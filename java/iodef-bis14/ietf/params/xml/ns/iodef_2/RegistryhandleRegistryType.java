//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.07.23 at 09:39:40 PM JST 
//


package ietf.params.xml.ns.iodef_2;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for registryhandle-registry-type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="registryhandle-registry-type"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
 *     &lt;enumeration value="internic"/&gt;
 *     &lt;enumeration value="apnic"/&gt;
 *     &lt;enumeration value="arin"/&gt;
 *     &lt;enumeration value="lacnic"/&gt;
 *     &lt;enumeration value="ripe"/&gt;
 *     &lt;enumeration value="afrinic"/&gt;
 *     &lt;enumeration value="local"/&gt;
 *     &lt;enumeration value="ext-value"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "registryhandle-registry-type")
@XmlEnum
public enum RegistryhandleRegistryType {

    @XmlEnumValue("internic")
    INTERNIC("internic"),
    @XmlEnumValue("apnic")
    APNIC("apnic"),
    @XmlEnumValue("arin")
    ARIN("arin"),
    @XmlEnumValue("lacnic")
    LACNIC("lacnic"),
    @XmlEnumValue("ripe")
    RIPE("ripe"),
    @XmlEnumValue("afrinic")
    AFRINIC("afrinic"),
    @XmlEnumValue("local")
    LOCAL("local"),
    @XmlEnumValue("ext-value")
    EXT_VALUE("ext-value");
    private final String value;

    RegistryhandleRegistryType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static RegistryhandleRegistryType fromValue(String v) {
        for (RegistryhandleRegistryType c: RegistryhandleRegistryType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
