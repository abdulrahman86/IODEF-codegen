// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___XSD_IODEF_BIS14_HXX
#define CXX___XSD_IODEF_BIS14_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace iodef_2_0
{
  class incident_purpose_type;
  class incident_status_type;
  class IncidentIDType;
  class contact_role_type;
  class contact_type_type;
  class registryhandle_registry_type;
  class ContactMeansType;
  class TimezoneType;
  class discovery_source_type;
  class systemimpact_type_type;
  class MLStringType;
  class BusinessImpactType;
  class businessimpact_severity_type;
  class businessimpact_type_type;
  class timeimpact_metric_type;
  class confidence_rating_type;
  class system_category_type;
  class system_ownership_type;
  class address_category_type;
  class noderole_category_type;
  class counter_type_type;
  class counter_unit_type;
  class domaindata_system_status_type;
  class domaindata_domain_status_type;
  class recordpattern_type_type;
  class recordpattern_offsetunit_type;
  class key_registryaction_type;
  class hashdata_scope_type;
  class SoftwareType;
  class softwarereference_spec_name_type;
  class softwarereference_dtype_type;
  class observable_type_type;
  class indicatorexpression_operator_type;
  class PositiveFloatType;
  class PortlistType;
  class ExtensionType;
  class ApplicationHeaderType;
  class yes_no_type;
  class yes_no_unknown_type;
  class restriction_type;
  class severity_type;
  class duration_type;
  class action_type;
  class dtype_type;
  class proto_dtype_type;
  class IODEF_Document;
  class Incident;
  class AlternativeID;
  class RelatedActivity;
  class ThreatActor;
  class Campaign;
  class Contact;
  class RegistryHandle;
  class PostalAddress;
  class History;
  class HistoryItem;
  class Expectation;
  class Discovery;
  class DetectionPattern;
  class Method;
  class Reference;
  class Assessment;
  class SystemImpact;
  class TimeImpact;
  class MonetaryImpact;
  class Confidence;
  class EventData;
  class Flow;
  class System;
  class Node;
  class Address;
  class NodeRole;
  class Service;
  class ServiceName;
  class Counter;
  class EmailData;
  class DomainData;
  class RelatedDNS;
  class Nameservers;
  class DomainContacts;
  class Record;
  class RecordData;
  class RecordPattern;
  class WindowsRegistryKeysModified;
  class Key;
  class FileData;
  class File;
  class HashData;
  class Hash;
  class FuzzyHash;
  class SignatureData;
  class CertificateData;
  class Certificate;
  class SoftwareReference;
  class IndicatorData;
  class Indicator;
  class IndicatorID;
  class AlternativeIndicatorID;
  class Observable;
  class BulkObservable;
  class BulkObservableFormat;
  class IndicatorExpression;
  class ObservableReference;
  class IndicatorReference;
  class occurrence;
  class completion;
  class record_type;
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "../xsd/xmldsig-core-schema.hxx"

#include "../xsd/iodef-enum-1.0.hxx"

#include "../xsd/xml.hxx"

namespace iodef_2_0
{
  class incident_purpose_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      traceback,
      mitigation,
      reporting,
      watch,
      other,
      ext_value
    };

    incident_purpose_type (value v);

    incident_purpose_type (const char* v);

    incident_purpose_type (const ::std::string& v);

    incident_purpose_type (const ::xml_schema::nmtoken& v);

    incident_purpose_type (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    incident_purpose_type (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    incident_purpose_type (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    incident_purpose_type (const incident_purpose_type& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual incident_purpose_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    incident_purpose_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_incident_purpose_type_convert ();
    }

    protected:
    value
    _xsd_incident_purpose_type_convert () const;

    public:
    static const char* const _xsd_incident_purpose_type_literals_[6];
    static const value _xsd_incident_purpose_type_indexes_[6];
  };

  class incident_status_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      new_,
      in_progress,
      forwarded,
      resolved,
      future,
      ext_value
    };

    incident_status_type (value v);

    incident_status_type (const char* v);

    incident_status_type (const ::std::string& v);

    incident_status_type (const ::xml_schema::nmtoken& v);

    incident_status_type (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    incident_status_type (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    incident_status_type (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    incident_status_type (const incident_status_type& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual incident_status_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    incident_status_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_incident_status_type_convert ();
    }

    protected:
    value
    _xsd_incident_status_type_convert () const;

    public:
    static const char* const _xsd_incident_status_type_literals_[6];
    static const value _xsd_incident_status_type_indexes_[6];
  };

  class IncidentIDType: public ::xml_schema::string
  {
    public:
    // name
    //
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // instance
    //
    typedef ::xml_schema::string instance_type;
    typedef ::xsd::cxx::tree::optional< instance_type > instance_optional;
    typedef ::xsd::cxx::tree::traits< instance_type, char > instance_traits;

    const instance_optional&
    instance () const;

    instance_optional&
    instance ();

    void
    instance (const instance_type& x);

    void
    instance (const instance_optional& x);

    void
    instance (::std::auto_ptr< instance_type > p);

    // restriction
    //
    typedef ::iodef_2_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_type&
    restriction () const;

    restriction_type&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    static const restriction_type&
    restriction_default_value ();

    // ext-restriction
    //
    typedef ::xml_schema::string ext_restriction_type;
    typedef ::xsd::cxx::tree::optional< ext_restriction_type > ext_restriction_optional;
    typedef ::xsd::cxx::tree::traits< ext_restriction_type, char > ext_restriction_traits;

    const ext_restriction_optional&
    ext_restriction () const;

    ext_restriction_optional&
    ext_restriction ();

    void
    ext_restriction (const ext_restriction_type& x);

    void
    ext_restriction (const ext_restriction_optional& x);

    void
    ext_restriction (::std::auto_ptr< ext_restriction_type > p);

    // Constructors.
    //
    IncidentIDType (const name_type&);

    IncidentIDType (const char*,
                    const name_type&);

    IncidentIDType (const ::std::string&,
                    const name_type&);

    IncidentIDType (const ::xml_schema::string&,
                    const name_type&);

    IncidentIDType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    IncidentIDType (const IncidentIDType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual IncidentIDType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    IncidentIDType&
    operator= (const IncidentIDType& x);

    virtual 
    ~IncidentIDType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< name_type > name_;
    instance_optional instance_;
    ::xsd::cxx::tree::one< restriction_type > restriction_;
    static const restriction_type restriction_default_value_;
    ext_restriction_optional ext_restriction_;
  };

  class contact_role_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      creator,
      reporter,
      admin,
      tech,
      provider,
      zone,
      user,
      billing,
      legal,
      abuse,
      irt,
      cc,
      cc_irt,
      leo,
      vendor,
      vendor_services,
      victim,
      victim_notified,
      ext_value
    };

    contact_role_type (value v);

    contact_role_type (const char* v);

    contact_role_type (const ::std::string& v);

    contact_role_type (const ::xml_schema::nmtoken& v);

    contact_role_type (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    contact_role_type (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    contact_role_type (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    contact_role_type (const contact_role_type& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual contact_role_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    contact_role_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_contact_role_type_convert ();
    }

    protected:
    value
    _xsd_contact_role_type_convert () const;

    public:
    static const char* const _xsd_contact_role_type_literals_[19];
    static const value _xsd_contact_role_type_indexes_[19];
  };

  class contact_type_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      person,
      organization,
      ext_value
    };

    contact_type_type (value v);

    contact_type_type (const char* v);

    contact_type_type (const ::std::string& v);

    contact_type_type (const ::xml_schema::nmtoken& v);

    contact_type_type (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    contact_type_type (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    contact_type_type (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    contact_type_type (const contact_type_type& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual contact_type_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    contact_type_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_contact_type_type_convert ();
    }

    protected:
    value
    _xsd_contact_type_type_convert () const;

    public:
    static const char* const _xsd_contact_type_type_literals_[3];
    static const value _xsd_contact_type_type_indexes_[3];
  };

  class registryhandle_registry_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      internic,
      apnic,
      arin,
      lacnic,
      ripe,
      afrinic,
      local,
      ext_value
    };

    registryhandle_registry_type (value v);

    registryhandle_registry_type (const char* v);

    registryhandle_registry_type (const ::std::string& v);

    registryhandle_registry_type (const ::xml_schema::nmtoken& v);

    registryhandle_registry_type (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

    registryhandle_registry_type (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

    registryhandle_registry_type (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

    registryhandle_registry_type (const registryhandle_registry_type& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

    virtual registryhandle_registry_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    registryhandle_registry_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_registryhandle_registry_type_convert ();
    }

    protected:
    value
    _xsd_registryhandle_registry_type_convert () const;

    public:
    static const char* const _xsd_registryhandle_registry_type_literals_[8];
    static const value _xsd_registryhandle_registry_type_indexes_[8];
  };

  class ContactMeansType: public ::xml_schema::string
  {
    public:
    // meaning
    //
    typedef ::xml_schema::string meaning_type;
    typedef ::xsd::cxx::tree::optional< meaning_type > meaning_optional;
    typedef ::xsd::cxx::tree::traits< meaning_type, char > meaning_traits;

    const meaning_optional&
    meaning () const;

    meaning_optional&
    meaning ();

    void
    meaning (const meaning_type& x);

    void
    meaning (const meaning_optional& x);

    void
    meaning (::std::auto_ptr< meaning_type > p);

    // Constructors.
    //
    ContactMeansType ();

    ContactMeansType (const char*);

    ContactMeansType (const ::std::string&);

    ContactMeansType (const ::xml_schema::string&);

    ContactMeansType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    ContactMeansType (const ContactMeansType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual ContactMeansType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    ContactMeansType&
    operator= (const ContactMeansType& x);

    virtual 
    ~ContactMeansType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    meaning_optional meaning_;
  };

  class TimezoneType: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    TimezoneType ();

    TimezoneType (const char*);

    TimezoneType (const ::std::string&);

    TimezoneType (const ::xml_schema::string&);

    TimezoneType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    TimezoneType (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    TimezoneType (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    TimezoneType (const TimezoneType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual TimezoneType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~TimezoneType ();
  };

  class discovery_source_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      nidps,
      hips,
      siem,
      av,
      third_party_monitoring,
      incident,
      os_log,
      application_log,
      device_log,
      network_flow,
      passive_dns,
      investigation,
      audit,
      internal_notification,
      external_notification,
      leo,
      partner,
      actor,
      unknown,
      ext_value
    };

    discovery_source_type (value v);

    discovery_source_type (const char* v);

    discovery_source_type (const ::std::string& v);

    discovery_source_type (const ::xml_schema::nmtoken& v);

    discovery_source_type (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    discovery_source_type (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    discovery_source_type (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    discovery_source_type (const discovery_source_type& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual discovery_source_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    discovery_source_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_discovery_source_type_convert ();
    }

    protected:
    value
    _xsd_discovery_source_type_convert () const;

    public:
    static const char* const _xsd_discovery_source_type_literals_[20];
    static const value _xsd_discovery_source_type_indexes_[20];
  };

  class systemimpact_type_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      admin,
      takeover_account,
      takeover_service,
      takeover_system,
      cps_manipulation,
      cps_damage,
      availability_data,
      availibility_account,
      availibility_service,
      availibility_system,
      damaged_system,
      damaged_data,
      breach_proprietary,
      breach_privacy,
      breach_credential,
      breach_configuration,
      integrity_data,
      integrity_configuration,
      integrity_hardware,
      traffic_redirection,
      monitoring_traffic,
      monitoring_host,
      policy,
      ext_value
    };

    systemimpact_type_type (value v);

    systemimpact_type_type (const char* v);

    systemimpact_type_type (const ::std::string& v);

    systemimpact_type_type (const ::xml_schema::nmtoken& v);

    systemimpact_type_type (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    systemimpact_type_type (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    systemimpact_type_type (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    systemimpact_type_type (const systemimpact_type_type& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual systemimpact_type_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    systemimpact_type_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_systemimpact_type_type_convert ();
    }

    protected:
    value
    _xsd_systemimpact_type_type_convert () const;

    public:
    static const char* const _xsd_systemimpact_type_type_literals_[24];
    static const value _xsd_systemimpact_type_type_indexes_[24];
  };

  class MLStringType: public ::xml_schema::string
  {
    public:
    // translation-id
    //
    typedef ::xml_schema::string translation_id_type;
    typedef ::xsd::cxx::tree::optional< translation_id_type > translation_id_optional;
    typedef ::xsd::cxx::tree::traits< translation_id_type, char > translation_id_traits;

    const translation_id_optional&
    translation_id () const;

    translation_id_optional&
    translation_id ();

    void
    translation_id (const translation_id_type& x);

    void
    translation_id (const translation_id_optional& x);

    void
    translation_id (::std::auto_ptr< translation_id_type > p);

    // lang
    //
    typedef ::xml_schema::language lang_type;
    typedef ::xsd::cxx::tree::optional< lang_type > lang_optional;
    typedef ::xsd::cxx::tree::traits< lang_type, char > lang_traits;

    const lang_optional&
    lang () const;

    lang_optional&
    lang ();

    void
    lang (const lang_type& x);

    void
    lang (const lang_optional& x);

    void
    lang (::std::auto_ptr< lang_type > p);

    // Constructors.
    //
    MLStringType ();

    MLStringType (const char*);

    MLStringType (const ::std::string&);

    MLStringType (const ::xml_schema::string&);

    MLStringType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    MLStringType (const MLStringType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual MLStringType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    MLStringType&
    operator= (const MLStringType& x);

    virtual 
    ~MLStringType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    translation_id_optional translation_id_;
    lang_optional lang_;
  };

  class BusinessImpactType: public ::iodef_2_0::MLStringType
  {
    public:
    // severity
    //
    typedef ::iodef_2_0::businessimpact_severity_type severity_type;
    typedef ::xsd::cxx::tree::optional< severity_type > severity_optional;
    typedef ::xsd::cxx::tree::traits< severity_type, char > severity_traits;

    const severity_optional&
    severity () const;

    severity_optional&
    severity ();

    void
    severity (const severity_type& x);

    void
    severity (const severity_optional& x);

    void
    severity (::std::auto_ptr< severity_type > p);

    // ext-severity
    //
    typedef ::xml_schema::string ext_severity_type;
    typedef ::xsd::cxx::tree::optional< ext_severity_type > ext_severity_optional;
    typedef ::xsd::cxx::tree::traits< ext_severity_type, char > ext_severity_traits;

    const ext_severity_optional&
    ext_severity () const;

    ext_severity_optional&
    ext_severity ();

    void
    ext_severity (const ext_severity_type& x);

    void
    ext_severity (const ext_severity_optional& x);

    void
    ext_severity (::std::auto_ptr< ext_severity_type > p);

    // type
    //
    typedef ::iodef_2_0::businessimpact_type_type type_type;
    typedef ::xsd::cxx::tree::optional< type_type > type_optional;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_optional&
    type () const;

    type_optional&
    type ();

    void
    type (const type_type& x);

    void
    type (const type_optional& x);

    void
    type (::std::auto_ptr< type_type > p);

    // ext-type
    //
    typedef ::xml_schema::string ext_type_type;
    typedef ::xsd::cxx::tree::optional< ext_type_type > ext_type_optional;
    typedef ::xsd::cxx::tree::traits< ext_type_type, char > ext_type_traits;

    const ext_type_optional&
    ext_type () const;

    ext_type_optional&
    ext_type ();

    void
    ext_type (const ext_type_type& x);

    void
    ext_type (const ext_type_optional& x);

    void
    ext_type (::std::auto_ptr< ext_type_type > p);

    // Constructors.
    //
    BusinessImpactType ();

    BusinessImpactType (const char*);

    BusinessImpactType (const ::std::string&);

    BusinessImpactType (const ::xml_schema::string&);

    BusinessImpactType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    BusinessImpactType (const BusinessImpactType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual BusinessImpactType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    BusinessImpactType&
    operator= (const BusinessImpactType& x);

    virtual 
    ~BusinessImpactType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    severity_optional severity_;
    ext_severity_optional ext_severity_;
    type_optional type_;
    ext_type_optional ext_type_;
  };

  class businessimpact_severity_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      none,
      low,
      medium,
      high,
      unknown,
      ext_value
    };

    businessimpact_severity_type (value v);

    businessimpact_severity_type (const char* v);

    businessimpact_severity_type (const ::std::string& v);

    businessimpact_severity_type (const ::xml_schema::nmtoken& v);

    businessimpact_severity_type (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

    businessimpact_severity_type (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

    businessimpact_severity_type (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

    businessimpact_severity_type (const businessimpact_severity_type& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

    virtual businessimpact_severity_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    businessimpact_severity_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_businessimpact_severity_type_convert ();
    }

    protected:
    value
    _xsd_businessimpact_severity_type_convert () const;

    public:
    static const char* const _xsd_businessimpact_severity_type_literals_[6];
    static const value _xsd_businessimpact_severity_type_indexes_[6];
  };

  class businessimpact_type_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      breach_proprietary,
      breach_privacy,
      breach_credential,
      loss_of_integrity,
      loss_of_service,
      theft_financial,
      theft_service,
      degraded_reputation,
      asset_damage,
      asset_manipulation,
      legal,
      extortion,
      ext_value
    };

    businessimpact_type_type (value v);

    businessimpact_type_type (const char* v);

    businessimpact_type_type (const ::std::string& v);

    businessimpact_type_type (const ::xml_schema::nmtoken& v);

    businessimpact_type_type (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    businessimpact_type_type (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    businessimpact_type_type (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    businessimpact_type_type (const businessimpact_type_type& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    virtual businessimpact_type_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    businessimpact_type_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_businessimpact_type_type_convert ();
    }

    protected:
    value
    _xsd_businessimpact_type_type_convert () const;

    public:
    static const char* const _xsd_businessimpact_type_type_literals_[13];
    static const value _xsd_businessimpact_type_type_indexes_[13];
  };

  class timeimpact_metric_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      labor,
      elapsed,
      downtime,
      ext_value
    };

    timeimpact_metric_type (value v);

    timeimpact_metric_type (const char* v);

    timeimpact_metric_type (const ::std::string& v);

    timeimpact_metric_type (const ::xml_schema::nmtoken& v);

    timeimpact_metric_type (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    timeimpact_metric_type (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    timeimpact_metric_type (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    timeimpact_metric_type (const timeimpact_metric_type& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual timeimpact_metric_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    timeimpact_metric_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_timeimpact_metric_type_convert ();
    }

    protected:
    value
    _xsd_timeimpact_metric_type_convert () const;

    public:
    static const char* const _xsd_timeimpact_metric_type_literals_[4];
    static const value _xsd_timeimpact_metric_type_indexes_[4];
  };

  class confidence_rating_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      low,
      medium,
      high,
      numeric,
      unknown
    };

    confidence_rating_type (value v);

    confidence_rating_type (const char* v);

    confidence_rating_type (const ::std::string& v);

    confidence_rating_type (const ::xml_schema::nmtoken& v);

    confidence_rating_type (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    confidence_rating_type (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    confidence_rating_type (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    confidence_rating_type (const confidence_rating_type& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual confidence_rating_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    confidence_rating_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_confidence_rating_type_convert ();
    }

    protected:
    value
    _xsd_confidence_rating_type_convert () const;

    public:
    static const char* const _xsd_confidence_rating_type_literals_[5];
    static const value _xsd_confidence_rating_type_indexes_[5];
  };

  class system_category_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      source,
      target,
      intermediate,
      sensor,
      infrastructure,
      ext_value
    };

    system_category_type (value v);

    system_category_type (const char* v);

    system_category_type (const ::std::string& v);

    system_category_type (const ::xml_schema::nmtoken& v);

    system_category_type (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    system_category_type (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    system_category_type (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    system_category_type (const system_category_type& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual system_category_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    system_category_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_system_category_type_convert ();
    }

    protected:
    value
    _xsd_system_category_type_convert () const;

    public:
    static const char* const _xsd_system_category_type_literals_[6];
    static const value _xsd_system_category_type_indexes_[6];
  };

  class system_ownership_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      organization,
      personal,
      partner,
      customer,
      no_relationship,
      unknown,
      ext_value
    };

    system_ownership_type (value v);

    system_ownership_type (const char* v);

    system_ownership_type (const ::std::string& v);

    system_ownership_type (const ::xml_schema::nmtoken& v);

    system_ownership_type (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    system_ownership_type (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    system_ownership_type (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    system_ownership_type (const system_ownership_type& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual system_ownership_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    system_ownership_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_system_ownership_type_convert ();
    }

    protected:
    value
    _xsd_system_ownership_type_convert () const;

    public:
    static const char* const _xsd_system_ownership_type_literals_[7];
    static const value _xsd_system_ownership_type_indexes_[7];
  };

  class address_category_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      asn,
      atm,
      e_mail,
      mac,
      ipv4_addr,
      ipv4_net,
      ipv4_net_mask,
      ipv6_addr,
      ipv6_net,
      ipv6_net_mask,
      site_uri,
      ext_value
    };

    address_category_type (value v);

    address_category_type (const char* v);

    address_category_type (const ::std::string& v);

    address_category_type (const ::xml_schema::nmtoken& v);

    address_category_type (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    address_category_type (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    address_category_type (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    address_category_type (const address_category_type& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual address_category_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    address_category_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_address_category_type_convert ();
    }

    protected:
    value
    _xsd_address_category_type_convert () const;

    public:
    static const char* const _xsd_address_category_type_literals_[12];
    static const value _xsd_address_category_type_indexes_[12];
  };

  class noderole_category_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      client,
      client_enterprise,
      client_partner,
      client_remote,
      client_kiosk,
      client_mobile,
      server_internal,
      server_public,
      www,
      mail,
      webmail,
      messaging,
      streaming,
      voice,
      file,
      ftp,
      p2p,
      name,
      directory,
      credential,
      print,
      application,
      database,
      backup,
      dhcp,
      assessment,
      source_control,
      config_management,
      monitoring,
      infra,
      infra_firewall,
      infra_router,
      infra_switch,
      camera,
      proxy,
      remote_access,
      log,
      virtualization,
      pos,
      scada,
      scada_supervisory,
      sinkhole,
      honeypot,
      anonymization,
      c2_server,
      malware_distribution,
      drop_server,
      hop_point,
      reflector,
      phishing_site,
      spear_phishing_site,
      recruiting_site,
      fraudulent_site,
      ext_value
    };

    noderole_category_type (value v);

    noderole_category_type (const char* v);

    noderole_category_type (const ::std::string& v);

    noderole_category_type (const ::xml_schema::nmtoken& v);

    noderole_category_type (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    noderole_category_type (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    noderole_category_type (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    noderole_category_type (const noderole_category_type& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual noderole_category_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    noderole_category_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_noderole_category_type_convert ();
    }

    protected:
    value
    _xsd_noderole_category_type_convert () const;

    public:
    static const char* const _xsd_noderole_category_type_literals_[54];
    static const value _xsd_noderole_category_type_indexes_[54];
  };

  class counter_type_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      counter,
      rate,
      average,
      ext_value
    };

    counter_type_type (value v);

    counter_type_type (const char* v);

    counter_type_type (const ::std::string& v);

    counter_type_type (const ::xml_schema::nmtoken& v);

    counter_type_type (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    counter_type_type (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    counter_type_type (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    counter_type_type (const counter_type_type& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual counter_type_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    counter_type_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_counter_type_type_convert ();
    }

    protected:
    value
    _xsd_counter_type_type_convert () const;

    public:
    static const char* const _xsd_counter_type_type_literals_[4];
    static const value _xsd_counter_type_type_indexes_[4];
  };

  class counter_unit_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      byte,
      mbit,
      packet,
      flow,
      session,
      event,
      alert,
      message,
      host,
      site,
      organization,
      ext_value
    };

    counter_unit_type (value v);

    counter_unit_type (const char* v);

    counter_unit_type (const ::std::string& v);

    counter_unit_type (const ::xml_schema::nmtoken& v);

    counter_unit_type (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    counter_unit_type (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    counter_unit_type (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    counter_unit_type (const counter_unit_type& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual counter_unit_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    counter_unit_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_counter_unit_type_convert ();
    }

    protected:
    value
    _xsd_counter_unit_type_convert () const;

    public:
    static const char* const _xsd_counter_unit_type_literals_[12];
    static const value _xsd_counter_unit_type_indexes_[12];
  };

  class domaindata_system_status_type: public ::xml_schema::string
  {
    public:
    enum value
    {
      spoofed,
      fraudulent,
      innocent_hacked,
      innocent_hijacked,
      unknown,
      ext_value
    };

    domaindata_system_status_type (value v);

    domaindata_system_status_type (const char* v);

    domaindata_system_status_type (const ::std::string& v);

    domaindata_system_status_type (const ::xml_schema::string& v);

    domaindata_system_status_type (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

    domaindata_system_status_type (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

    domaindata_system_status_type (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

    domaindata_system_status_type (const domaindata_system_status_type& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

    virtual domaindata_system_status_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    domaindata_system_status_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_domaindata_system_status_type_convert ();
    }

    protected:
    value
    _xsd_domaindata_system_status_type_convert () const;

    public:
    static const char* const _xsd_domaindata_system_status_type_literals_[6];
    static const value _xsd_domaindata_system_status_type_indexes_[6];
  };

  class domaindata_domain_status_type: public ::xml_schema::string
  {
    public:
    enum value
    {
      reservedDelegation,
      assignedAndActive,
      assignedAndInactive,
      assignedAndOnHold,
      revoked,
      transferPending,
      registryLock,
      registrarLock,
      other,
      unknown,
      ext_value
    };

    domaindata_domain_status_type (value v);

    domaindata_domain_status_type (const char* v);

    domaindata_domain_status_type (const ::std::string& v);

    domaindata_domain_status_type (const ::xml_schema::string& v);

    domaindata_domain_status_type (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

    domaindata_domain_status_type (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

    domaindata_domain_status_type (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

    domaindata_domain_status_type (const domaindata_domain_status_type& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

    virtual domaindata_domain_status_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    domaindata_domain_status_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_domaindata_domain_status_type_convert ();
    }

    protected:
    value
    _xsd_domaindata_domain_status_type_convert () const;

    public:
    static const char* const _xsd_domaindata_domain_status_type_literals_[11];
    static const value _xsd_domaindata_domain_status_type_indexes_[11];
  };

  class recordpattern_type_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      regex,
      binary,
      xpath,
      ext_value
    };

    recordpattern_type_type (value v);

    recordpattern_type_type (const char* v);

    recordpattern_type_type (const ::std::string& v);

    recordpattern_type_type (const ::xml_schema::nmtoken& v);

    recordpattern_type_type (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    recordpattern_type_type (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    recordpattern_type_type (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    recordpattern_type_type (const recordpattern_type_type& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual recordpattern_type_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    recordpattern_type_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_recordpattern_type_type_convert ();
    }

    protected:
    value
    _xsd_recordpattern_type_type_convert () const;

    public:
    static const char* const _xsd_recordpattern_type_type_literals_[4];
    static const value _xsd_recordpattern_type_type_indexes_[4];
  };

  class recordpattern_offsetunit_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      line,
      byte,
      ext_value
    };

    recordpattern_offsetunit_type (value v);

    recordpattern_offsetunit_type (const char* v);

    recordpattern_offsetunit_type (const ::std::string& v);

    recordpattern_offsetunit_type (const ::xml_schema::nmtoken& v);

    recordpattern_offsetunit_type (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

    recordpattern_offsetunit_type (const ::xercesc::DOMAttr& a,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

    recordpattern_offsetunit_type (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

    recordpattern_offsetunit_type (const recordpattern_offsetunit_type& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

    virtual recordpattern_offsetunit_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    recordpattern_offsetunit_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_recordpattern_offsetunit_type_convert ();
    }

    protected:
    value
    _xsd_recordpattern_offsetunit_type_convert () const;

    public:
    static const char* const _xsd_recordpattern_offsetunit_type_literals_[3];
    static const value _xsd_recordpattern_offsetunit_type_indexes_[3];
  };

  class key_registryaction_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      add_key,
      add_value,
      delete_key,
      delete_value,
      modify_key,
      modify_value,
      ext_value
    };

    key_registryaction_type (value v);

    key_registryaction_type (const char* v);

    key_registryaction_type (const ::std::string& v);

    key_registryaction_type (const ::xml_schema::nmtoken& v);

    key_registryaction_type (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    key_registryaction_type (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    key_registryaction_type (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    key_registryaction_type (const key_registryaction_type& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual key_registryaction_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    key_registryaction_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_key_registryaction_type_convert ();
    }

    protected:
    value
    _xsd_key_registryaction_type_convert () const;

    public:
    static const char* const _xsd_key_registryaction_type_literals_[7];
    static const value _xsd_key_registryaction_type_indexes_[7];
  };

  class hashdata_scope_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      file_contents,
      file_pe_section,
      file_pe_iat,
      file_pe_resource,
      file_pdf_object,
      email_hash,
      email_headers_hash,
      email_body_hash,
      ext_value
    };

    hashdata_scope_type (value v);

    hashdata_scope_type (const char* v);

    hashdata_scope_type (const ::std::string& v);

    hashdata_scope_type (const ::xml_schema::nmtoken& v);

    hashdata_scope_type (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    hashdata_scope_type (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    hashdata_scope_type (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    hashdata_scope_type (const hashdata_scope_type& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual hashdata_scope_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    hashdata_scope_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_hashdata_scope_type_convert ();
    }

    protected:
    value
    _xsd_hashdata_scope_type_convert () const;

    public:
    static const char* const _xsd_hashdata_scope_type_literals_[9];
    static const value _xsd_hashdata_scope_type_indexes_[9];
  };

  class SoftwareType: public ::xml_schema::type
  {
    public:
    // SoftwareReference
    //
    typedef ::iodef_2_0::SoftwareReference SoftwareReference_type;
    typedef ::xsd::cxx::tree::optional< SoftwareReference_type > SoftwareReference_optional;
    typedef ::xsd::cxx::tree::traits< SoftwareReference_type, char > SoftwareReference_traits;

    const SoftwareReference_optional&
    SoftwareReference () const;

    SoftwareReference_optional&
    SoftwareReference ();

    void
    SoftwareReference (const SoftwareReference_type& x);

    void
    SoftwareReference (const SoftwareReference_optional& x);

    void
    SoftwareReference (::std::auto_ptr< SoftwareReference_type > p);

    // URL
    //
    typedef ::xml_schema::uri URL_type;
    typedef ::xsd::cxx::tree::sequence< URL_type > URL_sequence;
    typedef URL_sequence::iterator URL_iterator;
    typedef URL_sequence::const_iterator URL_const_iterator;
    typedef ::xsd::cxx::tree::traits< URL_type, char > URL_traits;

    const URL_sequence&
    URL () const;

    URL_sequence&
    URL ();

    void
    URL (const URL_sequence& s);

    // Description
    //
    typedef ::iodef_2_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // Constructors.
    //
    SoftwareType ();

    SoftwareType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    SoftwareType (const SoftwareType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual SoftwareType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    SoftwareType&
    operator= (const SoftwareType& x);

    virtual 
    ~SoftwareType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    SoftwareReference_optional SoftwareReference_;
    URL_sequence URL_;
    Description_sequence Description_;
  };

  class softwarereference_spec_name_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      custom,
      cpe,
      swid,
      ext_value
    };

    softwarereference_spec_name_type (value v);

    softwarereference_spec_name_type (const char* v);

    softwarereference_spec_name_type (const ::std::string& v);

    softwarereference_spec_name_type (const ::xml_schema::nmtoken& v);

    softwarereference_spec_name_type (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

    softwarereference_spec_name_type (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

    softwarereference_spec_name_type (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

    softwarereference_spec_name_type (const softwarereference_spec_name_type& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

    virtual softwarereference_spec_name_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    softwarereference_spec_name_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_softwarereference_spec_name_type_convert ();
    }

    protected:
    value
    _xsd_softwarereference_spec_name_type_convert () const;

    public:
    static const char* const _xsd_softwarereference_spec_name_type_literals_[4];
    static const value _xsd_softwarereference_spec_name_type_indexes_[4];
  };

  class softwarereference_dtype_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      bytes,
      integer,
      real,
      string,
      xml,
      ext_value
    };

    softwarereference_dtype_type (value v);

    softwarereference_dtype_type (const char* v);

    softwarereference_dtype_type (const ::std::string& v);

    softwarereference_dtype_type (const ::xml_schema::nmtoken& v);

    softwarereference_dtype_type (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

    softwarereference_dtype_type (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

    softwarereference_dtype_type (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

    softwarereference_dtype_type (const softwarereference_dtype_type& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

    virtual softwarereference_dtype_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    softwarereference_dtype_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_softwarereference_dtype_type_convert ();
    }

    protected:
    value
    _xsd_softwarereference_dtype_type_convert () const;

    public:
    static const char* const _xsd_softwarereference_dtype_type_literals_[6];
    static const value _xsd_softwarereference_dtype_type_indexes_[6];
  };

  class observable_type_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      asn,
      atm,
      e_mail,
      ipv4_addr,
      ipv4_net,
      ipv4_net_mask,
      ipv6_addr,
      ipv6_net,
      ipv6_net_mask,
      mac,
      site_uri,
      fqdn,
      doman_name,
      domain_to_ipv4,
      domain_to_ipv6,
      domain_to_ipv4_timestamp,
      domain_to_ipv6_timestamp,
      ipv4_port,
      ipv6_port,
      windows_reg_key,
      file_hash,
      email_x_mailer,
      email_subject,
      http_user_agent,
      http_request_uri,
      mutex,
      file_path,
      user_name
    };

    observable_type_type (value v);

    observable_type_type (const char* v);

    observable_type_type (const ::std::string& v);

    observable_type_type (const ::xml_schema::nmtoken& v);

    observable_type_type (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    observable_type_type (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    observable_type_type (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    observable_type_type (const observable_type_type& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual observable_type_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    observable_type_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_observable_type_type_convert ();
    }

    protected:
    value
    _xsd_observable_type_type_convert () const;

    public:
    static const char* const _xsd_observable_type_type_literals_[28];
    static const value _xsd_observable_type_type_indexes_[28];
  };

  class indicatorexpression_operator_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      not_,
      and_,
      or_,
      xor_
    };

    indicatorexpression_operator_type (value v);

    indicatorexpression_operator_type (const char* v);

    indicatorexpression_operator_type (const ::std::string& v);

    indicatorexpression_operator_type (const ::xml_schema::nmtoken& v);

    indicatorexpression_operator_type (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

    indicatorexpression_operator_type (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

    indicatorexpression_operator_type (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

    indicatorexpression_operator_type (const indicatorexpression_operator_type& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

    virtual indicatorexpression_operator_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    indicatorexpression_operator_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_indicatorexpression_operator_type_convert ();
    }

    protected:
    value
    _xsd_indicatorexpression_operator_type_convert () const;

    public:
    static const char* const _xsd_indicatorexpression_operator_type_literals_[4];
    static const value _xsd_indicatorexpression_operator_type_indexes_[4];
  };

  class PositiveFloatType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    PositiveFloatType (const ::xml_schema::float_&);

    PositiveFloatType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    PositiveFloatType (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    PositiveFloatType (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    PositiveFloatType (const PositiveFloatType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual PositiveFloatType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~PositiveFloatType ();
  };

  class PortlistType: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    PortlistType ();

    PortlistType (const char*);

    PortlistType (const ::std::string&);

    PortlistType (const ::xml_schema::string&);

    PortlistType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    PortlistType (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    PortlistType (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    PortlistType (const PortlistType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual PortlistType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~PortlistType ();
  };

  class ExtensionType: public ::xml_schema::type
  {
    public:
    // dtype
    //
    typedef ::iodef_2_0::dtype_type dtype_type;
    typedef ::xsd::cxx::tree::traits< dtype_type, char > dtype_traits;

    const dtype_type&
    dtype () const;

    dtype_type&
    dtype ();

    void
    dtype (const dtype_type& x);

    void
    dtype (::std::auto_ptr< dtype_type > p);

    // meaning
    //
    typedef ::xml_schema::string meaning_type;
    typedef ::xsd::cxx::tree::optional< meaning_type > meaning_optional;
    typedef ::xsd::cxx::tree::traits< meaning_type, char > meaning_traits;

    const meaning_optional&
    meaning () const;

    meaning_optional&
    meaning ();

    void
    meaning (const meaning_type& x);

    void
    meaning (const meaning_optional& x);

    void
    meaning (::std::auto_ptr< meaning_type > p);

    // formatid
    //
    typedef ::xml_schema::string formatid_type;
    typedef ::xsd::cxx::tree::optional< formatid_type > formatid_optional;
    typedef ::xsd::cxx::tree::traits< formatid_type, char > formatid_traits;

    const formatid_optional&
    formatid () const;

    formatid_optional&
    formatid ();

    void
    formatid (const formatid_type& x);

    void
    formatid (const formatid_optional& x);

    void
    formatid (::std::auto_ptr< formatid_type > p);

    // restriction
    //
    typedef ::iodef_2_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // ext-restriction
    //
    typedef ::xml_schema::string ext_restriction_type;
    typedef ::xsd::cxx::tree::optional< ext_restriction_type > ext_restriction_optional;
    typedef ::xsd::cxx::tree::traits< ext_restriction_type, char > ext_restriction_traits;

    const ext_restriction_optional&
    ext_restriction () const;

    ext_restriction_optional&
    ext_restriction ();

    void
    ext_restriction (const ext_restriction_type& x);

    void
    ext_restriction (const ext_restriction_optional& x);

    void
    ext_restriction (::std::auto_ptr< ext_restriction_type > p);

    // Constructors.
    //
    ExtensionType (const dtype_type&);

    ExtensionType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    ExtensionType (const ExtensionType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual ExtensionType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    ExtensionType&
    operator= (const ExtensionType& x);

    virtual 
    ~ExtensionType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< dtype_type > dtype_;
    meaning_optional meaning_;
    formatid_optional formatid_;
    restriction_optional restriction_;
    ext_restriction_optional ext_restriction_;
  };

  class ApplicationHeaderType: public ::xml_schema::type
  {
    public:
    // proto
    //
    typedef ::xml_schema::integer proto_type;
    typedef ::xsd::cxx::tree::optional< proto_type > proto_optional;
    typedef ::xsd::cxx::tree::traits< proto_type, char > proto_traits;

    const proto_optional&
    proto () const;

    proto_optional&
    proto ();

    void
    proto (const proto_type& x);

    void
    proto (const proto_optional& x);

    // proto-name
    //
    typedef ::xml_schema::integer proto_name_type;
    typedef ::xsd::cxx::tree::optional< proto_name_type > proto_name_optional;
    typedef ::xsd::cxx::tree::traits< proto_name_type, char > proto_name_traits;

    const proto_name_optional&
    proto_name () const;

    proto_name_optional&
    proto_name ();

    void
    proto_name (const proto_name_type& x);

    void
    proto_name (const proto_name_optional& x);

    // field
    //
    typedef ::xml_schema::string field_type;
    typedef ::xsd::cxx::tree::traits< field_type, char > field_traits;

    const field_type&
    field () const;

    field_type&
    field ();

    void
    field (const field_type& x);

    void
    field (::std::auto_ptr< field_type > p);

    // dtype
    //
    typedef ::iodef_2_0::proto_dtype_type dtype_type;
    typedef ::xsd::cxx::tree::traits< dtype_type, char > dtype_traits;

    const dtype_type&
    dtype () const;

    dtype_type&
    dtype ();

    void
    dtype (const dtype_type& x);

    void
    dtype (::std::auto_ptr< dtype_type > p);

    // observable-id
    //
    typedef ::xml_schema::id observable_id_type;
    typedef ::xsd::cxx::tree::optional< observable_id_type > observable_id_optional;
    typedef ::xsd::cxx::tree::traits< observable_id_type, char > observable_id_traits;

    const observable_id_optional&
    observable_id () const;

    observable_id_optional&
    observable_id ();

    void
    observable_id (const observable_id_type& x);

    void
    observable_id (const observable_id_optional& x);

    void
    observable_id (::std::auto_ptr< observable_id_type > p);

    // Constructors.
    //
    ApplicationHeaderType (const field_type&,
                           const dtype_type&);

    ApplicationHeaderType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    ApplicationHeaderType (const ApplicationHeaderType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual ApplicationHeaderType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    ApplicationHeaderType&
    operator= (const ApplicationHeaderType& x);

    virtual 
    ~ApplicationHeaderType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    proto_optional proto_;
    proto_name_optional proto_name_;
    ::xsd::cxx::tree::one< field_type > field_;
    ::xsd::cxx::tree::one< dtype_type > dtype_;
    observable_id_optional observable_id_;
  };

  class yes_no_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      yes,
      no
    };

    yes_no_type (value v);

    yes_no_type (const char* v);

    yes_no_type (const ::std::string& v);

    yes_no_type (const ::xml_schema::nmtoken& v);

    yes_no_type (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    yes_no_type (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    yes_no_type (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    yes_no_type (const yes_no_type& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual yes_no_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    yes_no_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_yes_no_type_convert ();
    }

    protected:
    value
    _xsd_yes_no_type_convert () const;

    public:
    static const char* const _xsd_yes_no_type_literals_[2];
    static const value _xsd_yes_no_type_indexes_[2];
  };

  class yes_no_unknown_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      yes,
      no,
      unknown
    };

    yes_no_unknown_type (value v);

    yes_no_unknown_type (const char* v);

    yes_no_unknown_type (const ::std::string& v);

    yes_no_unknown_type (const ::xml_schema::nmtoken& v);

    yes_no_unknown_type (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    yes_no_unknown_type (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    yes_no_unknown_type (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    yes_no_unknown_type (const yes_no_unknown_type& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual yes_no_unknown_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    yes_no_unknown_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_yes_no_unknown_type_convert ();
    }

    protected:
    value
    _xsd_yes_no_unknown_type_convert () const;

    public:
    static const char* const _xsd_yes_no_unknown_type_literals_[3];
    static const value _xsd_yes_no_unknown_type_indexes_[3];
  };

  class restriction_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      default_,
      public_,
      partner,
      need_to_know,
      private_,
      white,
      green,
      amber,
      red,
      ext_value
    };

    restriction_type (value v);

    restriction_type (const char* v);

    restriction_type (const ::std::string& v);

    restriction_type (const ::xml_schema::nmtoken& v);

    restriction_type (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    restriction_type (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    restriction_type (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    restriction_type (const restriction_type& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual restriction_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    restriction_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_restriction_type_convert ();
    }

    protected:
    value
    _xsd_restriction_type_convert () const;

    public:
    static const char* const _xsd_restriction_type_literals_[10];
    static const value _xsd_restriction_type_indexes_[10];
  };

  class severity_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      low,
      medium,
      high
    };

    severity_type (value v);

    severity_type (const char* v);

    severity_type (const ::std::string& v);

    severity_type (const ::xml_schema::nmtoken& v);

    severity_type (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    severity_type (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    severity_type (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    severity_type (const severity_type& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual severity_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    severity_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_severity_type_convert ();
    }

    protected:
    value
    _xsd_severity_type_convert () const;

    public:
    static const char* const _xsd_severity_type_literals_[3];
    static const value _xsd_severity_type_indexes_[3];
  };

  class duration_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      second,
      minute,
      hour,
      day,
      month,
      quarter,
      year,
      ext_value
    };

    duration_type (value v);

    duration_type (const char* v);

    duration_type (const ::std::string& v);

    duration_type (const ::xml_schema::nmtoken& v);

    duration_type (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    duration_type (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    duration_type (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    duration_type (const duration_type& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual duration_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    duration_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_duration_type_convert ();
    }

    protected:
    value
    _xsd_duration_type_convert () const;

    public:
    static const char* const _xsd_duration_type_literals_[8];
    static const value _xsd_duration_type_indexes_[8];
  };

  class action_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      nothing,
      contact_source_site,
      contact_target_site,
      contact_sender,
      investigate,
      block_host,
      block_network,
      block_port,
      rate_limit_host,
      rate_limit_network,
      rate_limit_port,
      redirect_traffic,
      honeypot,
      upgrade_software,
      rebuild_asset,
      harden_asset,
      remediate_other,
      status_triage,
      status_new_info,
      watch_and_report,
      defined_coa,
      other,
      ext_value
    };

    action_type (value v);

    action_type (const char* v);

    action_type (const ::std::string& v);

    action_type (const ::xml_schema::nmtoken& v);

    action_type (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    action_type (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    action_type (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    action_type (const action_type& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual action_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    action_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_action_type_convert ();
    }

    protected:
    value
    _xsd_action_type_convert () const;

    public:
    static const char* const _xsd_action_type_literals_[23];
    static const value _xsd_action_type_indexes_[23];
  };

  class dtype_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      boolean,
      byte,
      bytes,
      character,
      date_time,
      integer,
      ntpstamp,
      portlist,
      real,
      string,
      file,
      path,
      frame,
      packet,
      ipv4_packet,
      ipv6_packet,
      url,
      csv,
      winreg,
      xml,
      ext_value
    };

    dtype_type (value v);

    dtype_type (const char* v);

    dtype_type (const ::std::string& v);

    dtype_type (const ::xml_schema::nmtoken& v);

    dtype_type (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    dtype_type (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    dtype_type (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    dtype_type (const dtype_type& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual dtype_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    dtype_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_dtype_type_convert ();
    }

    protected:
    value
    _xsd_dtype_type_convert () const;

    public:
    static const char* const _xsd_dtype_type_literals_[21];
    static const value _xsd_dtype_type_indexes_[21];
  };

  class proto_dtype_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      boolean,
      byte,
      bytes,
      character,
      date_time,
      integer,
      real,
      string,
      xml,
      ext_value
    };

    proto_dtype_type (value v);

    proto_dtype_type (const char* v);

    proto_dtype_type (const ::std::string& v);

    proto_dtype_type (const ::xml_schema::nmtoken& v);

    proto_dtype_type (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    proto_dtype_type (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    proto_dtype_type (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    proto_dtype_type (const proto_dtype_type& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual proto_dtype_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    proto_dtype_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_proto_dtype_type_convert ();
    }

    protected:
    value
    _xsd_proto_dtype_type_convert () const;

    public:
    static const char* const _xsd_proto_dtype_type_literals_[10];
    static const value _xsd_proto_dtype_type_indexes_[10];
  };

  class IODEF_Document: public ::xml_schema::type
  {
    public:
    // Incident
    //
    typedef ::iodef_2_0::Incident Incident_type;
    typedef ::xsd::cxx::tree::sequence< Incident_type > Incident_sequence;
    typedef Incident_sequence::iterator Incident_iterator;
    typedef Incident_sequence::const_iterator Incident_const_iterator;
    typedef ::xsd::cxx::tree::traits< Incident_type, char > Incident_traits;

    const Incident_sequence&
    Incident () const;

    Incident_sequence&
    Incident ();

    void
    Incident (const Incident_sequence& s);

    // AdditionalData
    //
    typedef ::iodef_2_0::ExtensionType AdditionalData_type;
    typedef ::xsd::cxx::tree::sequence< AdditionalData_type > AdditionalData_sequence;
    typedef AdditionalData_sequence::iterator AdditionalData_iterator;
    typedef AdditionalData_sequence::const_iterator AdditionalData_const_iterator;
    typedef ::xsd::cxx::tree::traits< AdditionalData_type, char > AdditionalData_traits;

    const AdditionalData_sequence&
    AdditionalData () const;

    AdditionalData_sequence&
    AdditionalData ();

    void
    AdditionalData (const AdditionalData_sequence& s);

    // version
    //
    typedef ::xml_schema::string version_type;
    typedef ::xsd::cxx::tree::traits< version_type, char > version_traits;

    const version_type&
    version () const;

    static const version_type&
    version_default_value ();

    // lang
    //
    typedef ::xml_schema::language lang_type;
    typedef ::xsd::cxx::tree::optional< lang_type > lang_optional;
    typedef ::xsd::cxx::tree::traits< lang_type, char > lang_traits;

    const lang_optional&
    lang () const;

    lang_optional&
    lang ();

    void
    lang (const lang_type& x);

    void
    lang (const lang_optional& x);

    void
    lang (::std::auto_ptr< lang_type > p);

    // format-id
    //
    typedef ::xml_schema::string format_id_type;
    typedef ::xsd::cxx::tree::optional< format_id_type > format_id_optional;
    typedef ::xsd::cxx::tree::traits< format_id_type, char > format_id_traits;

    const format_id_optional&
    format_id () const;

    format_id_optional&
    format_id ();

    void
    format_id (const format_id_type& x);

    void
    format_id (const format_id_optional& x);

    void
    format_id (::std::auto_ptr< format_id_type > p);

    // private-enum-name
    //
    typedef ::xml_schema::string private_enum_name_type;
    typedef ::xsd::cxx::tree::optional< private_enum_name_type > private_enum_name_optional;
    typedef ::xsd::cxx::tree::traits< private_enum_name_type, char > private_enum_name_traits;

    const private_enum_name_optional&
    private_enum_name () const;

    private_enum_name_optional&
    private_enum_name ();

    void
    private_enum_name (const private_enum_name_type& x);

    void
    private_enum_name (const private_enum_name_optional& x);

    void
    private_enum_name (::std::auto_ptr< private_enum_name_type > p);

    // private-enum-id
    //
    typedef ::xml_schema::string private_enum_id_type;
    typedef ::xsd::cxx::tree::optional< private_enum_id_type > private_enum_id_optional;
    typedef ::xsd::cxx::tree::traits< private_enum_id_type, char > private_enum_id_traits;

    const private_enum_id_optional&
    private_enum_id () const;

    private_enum_id_optional&
    private_enum_id ();

    void
    private_enum_id (const private_enum_id_type& x);

    void
    private_enum_id (const private_enum_id_optional& x);

    void
    private_enum_id (::std::auto_ptr< private_enum_id_type > p);

    // Constructors.
    //
    IODEF_Document ();

    IODEF_Document (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    IODEF_Document (const IODEF_Document& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual IODEF_Document*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    IODEF_Document&
    operator= (const IODEF_Document& x);

    virtual 
    ~IODEF_Document ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Incident_sequence Incident_;
    AdditionalData_sequence AdditionalData_;
    ::xsd::cxx::tree::one< version_type > version_;
    static const version_type version_default_value_;
    lang_optional lang_;
    format_id_optional format_id_;
    private_enum_name_optional private_enum_name_;
    private_enum_id_optional private_enum_id_;
  };

  class Incident: public ::xml_schema::type
  {
    public:
    // IncidentID
    //
    typedef ::iodef_2_0::IncidentIDType IncidentID_type;
    typedef ::xsd::cxx::tree::traits< IncidentID_type, char > IncidentID_traits;

    const IncidentID_type&
    IncidentID () const;

    IncidentID_type&
    IncidentID ();

    void
    IncidentID (const IncidentID_type& x);

    void
    IncidentID (::std::auto_ptr< IncidentID_type > p);

    // AlternativeID
    //
    typedef ::iodef_2_0::AlternativeID AlternativeID_type;
    typedef ::xsd::cxx::tree::optional< AlternativeID_type > AlternativeID_optional;
    typedef ::xsd::cxx::tree::traits< AlternativeID_type, char > AlternativeID_traits;

    const AlternativeID_optional&
    AlternativeID () const;

    AlternativeID_optional&
    AlternativeID ();

    void
    AlternativeID (const AlternativeID_type& x);

    void
    AlternativeID (const AlternativeID_optional& x);

    void
    AlternativeID (::std::auto_ptr< AlternativeID_type > p);

    // RelatedActivity
    //
    typedef ::iodef_2_0::RelatedActivity RelatedActivity_type;
    typedef ::xsd::cxx::tree::sequence< RelatedActivity_type > RelatedActivity_sequence;
    typedef RelatedActivity_sequence::iterator RelatedActivity_iterator;
    typedef RelatedActivity_sequence::const_iterator RelatedActivity_const_iterator;
    typedef ::xsd::cxx::tree::traits< RelatedActivity_type, char > RelatedActivity_traits;

    const RelatedActivity_sequence&
    RelatedActivity () const;

    RelatedActivity_sequence&
    RelatedActivity ();

    void
    RelatedActivity (const RelatedActivity_sequence& s);

    // DetectTime
    //
    typedef ::xml_schema::date_time DetectTime_type;
    typedef ::xsd::cxx::tree::optional< DetectTime_type > DetectTime_optional;
    typedef ::xsd::cxx::tree::traits< DetectTime_type, char > DetectTime_traits;

    const DetectTime_optional&
    DetectTime () const;

    DetectTime_optional&
    DetectTime ();

    void
    DetectTime (const DetectTime_type& x);

    void
    DetectTime (const DetectTime_optional& x);

    void
    DetectTime (::std::auto_ptr< DetectTime_type > p);

    // StartTime
    //
    typedef ::xml_schema::date_time StartTime_type;
    typedef ::xsd::cxx::tree::optional< StartTime_type > StartTime_optional;
    typedef ::xsd::cxx::tree::traits< StartTime_type, char > StartTime_traits;

    const StartTime_optional&
    StartTime () const;

    StartTime_optional&
    StartTime ();

    void
    StartTime (const StartTime_type& x);

    void
    StartTime (const StartTime_optional& x);

    void
    StartTime (::std::auto_ptr< StartTime_type > p);

    // EndTime
    //
    typedef ::xml_schema::date_time EndTime_type;
    typedef ::xsd::cxx::tree::optional< EndTime_type > EndTime_optional;
    typedef ::xsd::cxx::tree::traits< EndTime_type, char > EndTime_traits;

    const EndTime_optional&
    EndTime () const;

    EndTime_optional&
    EndTime ();

    void
    EndTime (const EndTime_type& x);

    void
    EndTime (const EndTime_optional& x);

    void
    EndTime (::std::auto_ptr< EndTime_type > p);

    // RecoveryTime
    //
    typedef ::xml_schema::date_time RecoveryTime_type;
    typedef ::xsd::cxx::tree::optional< RecoveryTime_type > RecoveryTime_optional;
    typedef ::xsd::cxx::tree::traits< RecoveryTime_type, char > RecoveryTime_traits;

    const RecoveryTime_optional&
    RecoveryTime () const;

    RecoveryTime_optional&
    RecoveryTime ();

    void
    RecoveryTime (const RecoveryTime_type& x);

    void
    RecoveryTime (const RecoveryTime_optional& x);

    void
    RecoveryTime (::std::auto_ptr< RecoveryTime_type > p);

    // ReportTime
    //
    typedef ::xml_schema::date_time ReportTime_type;
    typedef ::xsd::cxx::tree::traits< ReportTime_type, char > ReportTime_traits;

    const ReportTime_type&
    ReportTime () const;

    ReportTime_type&
    ReportTime ();

    void
    ReportTime (const ReportTime_type& x);

    void
    ReportTime (::std::auto_ptr< ReportTime_type > p);

    // GenerationTime
    //
    typedef ::xml_schema::date_time GenerationTime_type;
    typedef ::xsd::cxx::tree::optional< GenerationTime_type > GenerationTime_optional;
    typedef ::xsd::cxx::tree::traits< GenerationTime_type, char > GenerationTime_traits;

    const GenerationTime_optional&
    GenerationTime () const;

    GenerationTime_optional&
    GenerationTime ();

    void
    GenerationTime (const GenerationTime_type& x);

    void
    GenerationTime (const GenerationTime_optional& x);

    void
    GenerationTime (::std::auto_ptr< GenerationTime_type > p);

    // Description
    //
    typedef ::iodef_2_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // Discovery
    //
    typedef ::iodef_2_0::Discovery Discovery_type;
    typedef ::xsd::cxx::tree::sequence< Discovery_type > Discovery_sequence;
    typedef Discovery_sequence::iterator Discovery_iterator;
    typedef Discovery_sequence::const_iterator Discovery_const_iterator;
    typedef ::xsd::cxx::tree::traits< Discovery_type, char > Discovery_traits;

    const Discovery_sequence&
    Discovery () const;

    Discovery_sequence&
    Discovery ();

    void
    Discovery (const Discovery_sequence& s);

    // Assessment
    //
    typedef ::iodef_2_0::Assessment Assessment_type;
    typedef ::xsd::cxx::tree::sequence< Assessment_type > Assessment_sequence;
    typedef Assessment_sequence::iterator Assessment_iterator;
    typedef Assessment_sequence::const_iterator Assessment_const_iterator;
    typedef ::xsd::cxx::tree::traits< Assessment_type, char > Assessment_traits;

    const Assessment_sequence&
    Assessment () const;

    Assessment_sequence&
    Assessment ();

    void
    Assessment (const Assessment_sequence& s);

    // Method
    //
    typedef ::iodef_2_0::Method Method_type;
    typedef ::xsd::cxx::tree::sequence< Method_type > Method_sequence;
    typedef Method_sequence::iterator Method_iterator;
    typedef Method_sequence::const_iterator Method_const_iterator;
    typedef ::xsd::cxx::tree::traits< Method_type, char > Method_traits;

    const Method_sequence&
    Method () const;

    Method_sequence&
    Method ();

    void
    Method (const Method_sequence& s);

    // Contact
    //
    typedef ::iodef_2_0::Contact Contact_type;
    typedef ::xsd::cxx::tree::sequence< Contact_type > Contact_sequence;
    typedef Contact_sequence::iterator Contact_iterator;
    typedef Contact_sequence::const_iterator Contact_const_iterator;
    typedef ::xsd::cxx::tree::traits< Contact_type, char > Contact_traits;

    const Contact_sequence&
    Contact () const;

    Contact_sequence&
    Contact ();

    void
    Contact (const Contact_sequence& s);

    // EventData
    //
    typedef ::iodef_2_0::EventData EventData_type;
    typedef ::xsd::cxx::tree::sequence< EventData_type > EventData_sequence;
    typedef EventData_sequence::iterator EventData_iterator;
    typedef EventData_sequence::const_iterator EventData_const_iterator;
    typedef ::xsd::cxx::tree::traits< EventData_type, char > EventData_traits;

    const EventData_sequence&
    EventData () const;

    EventData_sequence&
    EventData ();

    void
    EventData (const EventData_sequence& s);

    // History
    //
    typedef ::iodef_2_0::History History_type;
    typedef ::xsd::cxx::tree::optional< History_type > History_optional;
    typedef ::xsd::cxx::tree::traits< History_type, char > History_traits;

    const History_optional&
    History () const;

    History_optional&
    History ();

    void
    History (const History_type& x);

    void
    History (const History_optional& x);

    void
    History (::std::auto_ptr< History_type > p);

    // AdditionalData
    //
    typedef ::iodef_2_0::ExtensionType AdditionalData_type;
    typedef ::xsd::cxx::tree::sequence< AdditionalData_type > AdditionalData_sequence;
    typedef AdditionalData_sequence::iterator AdditionalData_iterator;
    typedef AdditionalData_sequence::const_iterator AdditionalData_const_iterator;
    typedef ::xsd::cxx::tree::traits< AdditionalData_type, char > AdditionalData_traits;

    const AdditionalData_sequence&
    AdditionalData () const;

    AdditionalData_sequence&
    AdditionalData ();

    void
    AdditionalData (const AdditionalData_sequence& s);

    // purpose
    //
    typedef ::iodef_2_0::incident_purpose_type purpose_type;
    typedef ::xsd::cxx::tree::traits< purpose_type, char > purpose_traits;

    const purpose_type&
    purpose () const;

    purpose_type&
    purpose ();

    void
    purpose (const purpose_type& x);

    void
    purpose (::std::auto_ptr< purpose_type > p);

    // ext-purpose
    //
    typedef ::xml_schema::string ext_purpose_type;
    typedef ::xsd::cxx::tree::optional< ext_purpose_type > ext_purpose_optional;
    typedef ::xsd::cxx::tree::traits< ext_purpose_type, char > ext_purpose_traits;

    const ext_purpose_optional&
    ext_purpose () const;

    ext_purpose_optional&
    ext_purpose ();

    void
    ext_purpose (const ext_purpose_type& x);

    void
    ext_purpose (const ext_purpose_optional& x);

    void
    ext_purpose (::std::auto_ptr< ext_purpose_type > p);

    // status
    //
    typedef ::iodef_2_0::incident_status_type status_type;
    typedef ::xsd::cxx::tree::optional< status_type > status_optional;
    typedef ::xsd::cxx::tree::traits< status_type, char > status_traits;

    const status_optional&
    status () const;

    status_optional&
    status ();

    void
    status (const status_type& x);

    void
    status (const status_optional& x);

    void
    status (::std::auto_ptr< status_type > p);

    // ext-status
    //
    typedef ::xml_schema::string ext_status_type;
    typedef ::xsd::cxx::tree::optional< ext_status_type > ext_status_optional;
    typedef ::xsd::cxx::tree::traits< ext_status_type, char > ext_status_traits;

    const ext_status_optional&
    ext_status () const;

    ext_status_optional&
    ext_status ();

    void
    ext_status (const ext_status_type& x);

    void
    ext_status (const ext_status_optional& x);

    void
    ext_status (::std::auto_ptr< ext_status_type > p);

    // lang
    //
    typedef ::xml_schema::language lang_type;
    typedef ::xsd::cxx::tree::optional< lang_type > lang_optional;
    typedef ::xsd::cxx::tree::traits< lang_type, char > lang_traits;

    const lang_optional&
    lang () const;

    lang_optional&
    lang ();

    void
    lang (const lang_type& x);

    void
    lang (const lang_optional& x);

    void
    lang (::std::auto_ptr< lang_type > p);

    // restriction
    //
    typedef ::iodef_2_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_type&
    restriction () const;

    restriction_type&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    static const restriction_type&
    restriction_default_value ();

    // ext-restriction
    //
    typedef ::xml_schema::string ext_restriction_type;
    typedef ::xsd::cxx::tree::optional< ext_restriction_type > ext_restriction_optional;
    typedef ::xsd::cxx::tree::traits< ext_restriction_type, char > ext_restriction_traits;

    const ext_restriction_optional&
    ext_restriction () const;

    ext_restriction_optional&
    ext_restriction ();

    void
    ext_restriction (const ext_restriction_type& x);

    void
    ext_restriction (const ext_restriction_optional& x);

    void
    ext_restriction (::std::auto_ptr< ext_restriction_type > p);

    // observable-id
    //
    typedef ::xml_schema::id observable_id_type;
    typedef ::xsd::cxx::tree::optional< observable_id_type > observable_id_optional;
    typedef ::xsd::cxx::tree::traits< observable_id_type, char > observable_id_traits;

    const observable_id_optional&
    observable_id () const;

    observable_id_optional&
    observable_id ();

    void
    observable_id (const observable_id_type& x);

    void
    observable_id (const observable_id_optional& x);

    void
    observable_id (::std::auto_ptr< observable_id_type > p);

    // Constructors.
    //
    Incident (const IncidentID_type&,
              const ReportTime_type&,
              const purpose_type&);

    Incident (::std::auto_ptr< IncidentID_type >,
              const ReportTime_type&,
              const purpose_type&);

    Incident (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    Incident (const Incident& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual Incident*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Incident&
    operator= (const Incident& x);

    virtual 
    ~Incident ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< IncidentID_type > IncidentID_;
    AlternativeID_optional AlternativeID_;
    RelatedActivity_sequence RelatedActivity_;
    DetectTime_optional DetectTime_;
    StartTime_optional StartTime_;
    EndTime_optional EndTime_;
    RecoveryTime_optional RecoveryTime_;
    ::xsd::cxx::tree::one< ReportTime_type > ReportTime_;
    GenerationTime_optional GenerationTime_;
    Description_sequence Description_;
    Discovery_sequence Discovery_;
    Assessment_sequence Assessment_;
    Method_sequence Method_;
    Contact_sequence Contact_;
    EventData_sequence EventData_;
    History_optional History_;
    AdditionalData_sequence AdditionalData_;
    ::xsd::cxx::tree::one< purpose_type > purpose_;
    ext_purpose_optional ext_purpose_;
    status_optional status_;
    ext_status_optional ext_status_;
    lang_optional lang_;
    ::xsd::cxx::tree::one< restriction_type > restriction_;
    static const restriction_type restriction_default_value_;
    ext_restriction_optional ext_restriction_;
    observable_id_optional observable_id_;
  };

  class AlternativeID: public ::xml_schema::type
  {
    public:
    // IncidentID
    //
    typedef ::iodef_2_0::IncidentIDType IncidentID_type;
    typedef ::xsd::cxx::tree::sequence< IncidentID_type > IncidentID_sequence;
    typedef IncidentID_sequence::iterator IncidentID_iterator;
    typedef IncidentID_sequence::const_iterator IncidentID_const_iterator;
    typedef ::xsd::cxx::tree::traits< IncidentID_type, char > IncidentID_traits;

    const IncidentID_sequence&
    IncidentID () const;

    IncidentID_sequence&
    IncidentID ();

    void
    IncidentID (const IncidentID_sequence& s);

    // restriction
    //
    typedef ::iodef_2_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // ext-restriction
    //
    typedef ::xml_schema::string ext_restriction_type;
    typedef ::xsd::cxx::tree::optional< ext_restriction_type > ext_restriction_optional;
    typedef ::xsd::cxx::tree::traits< ext_restriction_type, char > ext_restriction_traits;

    const ext_restriction_optional&
    ext_restriction () const;

    ext_restriction_optional&
    ext_restriction ();

    void
    ext_restriction (const ext_restriction_type& x);

    void
    ext_restriction (const ext_restriction_optional& x);

    void
    ext_restriction (::std::auto_ptr< ext_restriction_type > p);

    // Constructors.
    //
    AlternativeID ();

    AlternativeID (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    AlternativeID (const AlternativeID& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual AlternativeID*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    AlternativeID&
    operator= (const AlternativeID& x);

    virtual 
    ~AlternativeID ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    IncidentID_sequence IncidentID_;
    restriction_optional restriction_;
    ext_restriction_optional ext_restriction_;
  };

  class RelatedActivity: public ::xml_schema::type
  {
    public:
    // IncidentID
    //
    typedef ::iodef_2_0::IncidentIDType IncidentID_type;
    typedef ::xsd::cxx::tree::sequence< IncidentID_type > IncidentID_sequence;
    typedef IncidentID_sequence::iterator IncidentID_iterator;
    typedef IncidentID_sequence::const_iterator IncidentID_const_iterator;
    typedef ::xsd::cxx::tree::traits< IncidentID_type, char > IncidentID_traits;

    const IncidentID_sequence&
    IncidentID () const;

    IncidentID_sequence&
    IncidentID ();

    void
    IncidentID (const IncidentID_sequence& s);

    // URL
    //
    typedef ::xml_schema::uri URL_type;
    typedef ::xsd::cxx::tree::sequence< URL_type > URL_sequence;
    typedef URL_sequence::iterator URL_iterator;
    typedef URL_sequence::const_iterator URL_const_iterator;
    typedef ::xsd::cxx::tree::traits< URL_type, char > URL_traits;

    const URL_sequence&
    URL () const;

    URL_sequence&
    URL ();

    void
    URL (const URL_sequence& s);

    // ThreatActor
    //
    typedef ::iodef_2_0::ThreatActor ThreatActor_type;
    typedef ::xsd::cxx::tree::sequence< ThreatActor_type > ThreatActor_sequence;
    typedef ThreatActor_sequence::iterator ThreatActor_iterator;
    typedef ThreatActor_sequence::const_iterator ThreatActor_const_iterator;
    typedef ::xsd::cxx::tree::traits< ThreatActor_type, char > ThreatActor_traits;

    const ThreatActor_sequence&
    ThreatActor () const;

    ThreatActor_sequence&
    ThreatActor ();

    void
    ThreatActor (const ThreatActor_sequence& s);

    // Campaign
    //
    typedef ::iodef_2_0::Campaign Campaign_type;
    typedef ::xsd::cxx::tree::sequence< Campaign_type > Campaign_sequence;
    typedef Campaign_sequence::iterator Campaign_iterator;
    typedef Campaign_sequence::const_iterator Campaign_const_iterator;
    typedef ::xsd::cxx::tree::traits< Campaign_type, char > Campaign_traits;

    const Campaign_sequence&
    Campaign () const;

    Campaign_sequence&
    Campaign ();

    void
    Campaign (const Campaign_sequence& s);

    // Confidence
    //
    typedef ::iodef_2_0::Confidence Confidence_type;
    typedef ::xsd::cxx::tree::optional< Confidence_type > Confidence_optional;
    typedef ::xsd::cxx::tree::traits< Confidence_type, char > Confidence_traits;

    const Confidence_optional&
    Confidence () const;

    Confidence_optional&
    Confidence ();

    void
    Confidence (const Confidence_type& x);

    void
    Confidence (const Confidence_optional& x);

    void
    Confidence (::std::auto_ptr< Confidence_type > p);

    // Description
    //
    typedef ::iodef_2_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // AdditionalData
    //
    typedef ::iodef_2_0::ExtensionType AdditionalData_type;
    typedef ::xsd::cxx::tree::sequence< AdditionalData_type > AdditionalData_sequence;
    typedef AdditionalData_sequence::iterator AdditionalData_iterator;
    typedef AdditionalData_sequence::const_iterator AdditionalData_const_iterator;
    typedef ::xsd::cxx::tree::traits< AdditionalData_type, char > AdditionalData_traits;

    const AdditionalData_sequence&
    AdditionalData () const;

    AdditionalData_sequence&
    AdditionalData ();

    void
    AdditionalData (const AdditionalData_sequence& s);

    // restriction
    //
    typedef ::iodef_2_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // ext-restriction
    //
    typedef ::xml_schema::string ext_restriction_type;
    typedef ::xsd::cxx::tree::optional< ext_restriction_type > ext_restriction_optional;
    typedef ::xsd::cxx::tree::traits< ext_restriction_type, char > ext_restriction_traits;

    const ext_restriction_optional&
    ext_restriction () const;

    ext_restriction_optional&
    ext_restriction ();

    void
    ext_restriction (const ext_restriction_type& x);

    void
    ext_restriction (const ext_restriction_optional& x);

    void
    ext_restriction (::std::auto_ptr< ext_restriction_type > p);

    // Constructors.
    //
    RelatedActivity ();

    RelatedActivity (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    RelatedActivity (const RelatedActivity& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual RelatedActivity*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    RelatedActivity&
    operator= (const RelatedActivity& x);

    virtual 
    ~RelatedActivity ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    IncidentID_sequence IncidentID_;
    URL_sequence URL_;
    ThreatActor_sequence ThreatActor_;
    Campaign_sequence Campaign_;
    Confidence_optional Confidence_;
    Description_sequence Description_;
    AdditionalData_sequence AdditionalData_;
    restriction_optional restriction_;
    ext_restriction_optional ext_restriction_;
  };

  class ThreatActor: public ::xml_schema::type
  {
    public:
    // ThreatActorID
    //
    typedef ::xml_schema::string ThreatActorID_type;
    typedef ::xsd::cxx::tree::optional< ThreatActorID_type > ThreatActorID_optional;
    typedef ::xsd::cxx::tree::traits< ThreatActorID_type, char > ThreatActorID_traits;

    const ThreatActorID_optional&
    ThreatActorID () const;

    ThreatActorID_optional&
    ThreatActorID ();

    void
    ThreatActorID (const ThreatActorID_type& x);

    void
    ThreatActorID (const ThreatActorID_optional& x);

    void
    ThreatActorID (::std::auto_ptr< ThreatActorID_type > p);

    // Description
    //
    typedef ::iodef_2_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // AdditionalData
    //
    typedef ::iodef_2_0::ExtensionType AdditionalData_type;
    typedef ::xsd::cxx::tree::sequence< AdditionalData_type > AdditionalData_sequence;
    typedef AdditionalData_sequence::iterator AdditionalData_iterator;
    typedef AdditionalData_sequence::const_iterator AdditionalData_const_iterator;
    typedef ::xsd::cxx::tree::traits< AdditionalData_type, char > AdditionalData_traits;

    const AdditionalData_sequence&
    AdditionalData () const;

    AdditionalData_sequence&
    AdditionalData ();

    void
    AdditionalData (const AdditionalData_sequence& s);

    // restriction
    //
    typedef ::iodef_2_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // ext-restriction
    //
    typedef ::xml_schema::string ext_restriction_type;
    typedef ::xsd::cxx::tree::optional< ext_restriction_type > ext_restriction_optional;
    typedef ::xsd::cxx::tree::traits< ext_restriction_type, char > ext_restriction_traits;

    const ext_restriction_optional&
    ext_restriction () const;

    ext_restriction_optional&
    ext_restriction ();

    void
    ext_restriction (const ext_restriction_type& x);

    void
    ext_restriction (const ext_restriction_optional& x);

    void
    ext_restriction (::std::auto_ptr< ext_restriction_type > p);

    // Constructors.
    //
    ThreatActor ();

    ThreatActor (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    ThreatActor (const ThreatActor& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual ThreatActor*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    ThreatActor&
    operator= (const ThreatActor& x);

    virtual 
    ~ThreatActor ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ThreatActorID_optional ThreatActorID_;
    Description_sequence Description_;
    AdditionalData_sequence AdditionalData_;
    restriction_optional restriction_;
    ext_restriction_optional ext_restriction_;
  };

  class Campaign: public ::xml_schema::type
  {
    public:
    // CampaignID
    //
    typedef ::xml_schema::string CampaignID_type;
    typedef ::xsd::cxx::tree::optional< CampaignID_type > CampaignID_optional;
    typedef ::xsd::cxx::tree::traits< CampaignID_type, char > CampaignID_traits;

    const CampaignID_optional&
    CampaignID () const;

    CampaignID_optional&
    CampaignID ();

    void
    CampaignID (const CampaignID_type& x);

    void
    CampaignID (const CampaignID_optional& x);

    void
    CampaignID (::std::auto_ptr< CampaignID_type > p);

    // Description
    //
    typedef ::iodef_2_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // AdditionalData
    //
    typedef ::iodef_2_0::ExtensionType AdditionalData_type;
    typedef ::xsd::cxx::tree::sequence< AdditionalData_type > AdditionalData_sequence;
    typedef AdditionalData_sequence::iterator AdditionalData_iterator;
    typedef AdditionalData_sequence::const_iterator AdditionalData_const_iterator;
    typedef ::xsd::cxx::tree::traits< AdditionalData_type, char > AdditionalData_traits;

    const AdditionalData_sequence&
    AdditionalData () const;

    AdditionalData_sequence&
    AdditionalData ();

    void
    AdditionalData (const AdditionalData_sequence& s);

    // restriction
    //
    typedef ::iodef_2_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // ext-restriction
    //
    typedef ::xml_schema::string ext_restriction_type;
    typedef ::xsd::cxx::tree::optional< ext_restriction_type > ext_restriction_optional;
    typedef ::xsd::cxx::tree::traits< ext_restriction_type, char > ext_restriction_traits;

    const ext_restriction_optional&
    ext_restriction () const;

    ext_restriction_optional&
    ext_restriction ();

    void
    ext_restriction (const ext_restriction_type& x);

    void
    ext_restriction (const ext_restriction_optional& x);

    void
    ext_restriction (::std::auto_ptr< ext_restriction_type > p);

    // Constructors.
    //
    Campaign ();

    Campaign (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    Campaign (const Campaign& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual Campaign*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Campaign&
    operator= (const Campaign& x);

    virtual 
    ~Campaign ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    CampaignID_optional CampaignID_;
    Description_sequence Description_;
    AdditionalData_sequence AdditionalData_;
    restriction_optional restriction_;
    ext_restriction_optional ext_restriction_;
  };

  class Contact: public ::xml_schema::type
  {
    public:
    // ContactName
    //
    typedef ::iodef_2_0::MLStringType ContactName_type;
    typedef ::xsd::cxx::tree::sequence< ContactName_type > ContactName_sequence;
    typedef ContactName_sequence::iterator ContactName_iterator;
    typedef ContactName_sequence::const_iterator ContactName_const_iterator;
    typedef ::xsd::cxx::tree::traits< ContactName_type, char > ContactName_traits;

    const ContactName_sequence&
    ContactName () const;

    ContactName_sequence&
    ContactName ();

    void
    ContactName (const ContactName_sequence& s);

    // ContactTitle
    //
    typedef ::iodef_2_0::MLStringType ContactTitle_type;
    typedef ::xsd::cxx::tree::sequence< ContactTitle_type > ContactTitle_sequence;
    typedef ContactTitle_sequence::iterator ContactTitle_iterator;
    typedef ContactTitle_sequence::const_iterator ContactTitle_const_iterator;
    typedef ::xsd::cxx::tree::traits< ContactTitle_type, char > ContactTitle_traits;

    const ContactTitle_sequence&
    ContactTitle () const;

    ContactTitle_sequence&
    ContactTitle ();

    void
    ContactTitle (const ContactTitle_sequence& s);

    // Description
    //
    typedef ::iodef_2_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // RegistryHandle
    //
    typedef ::iodef_2_0::RegistryHandle RegistryHandle_type;
    typedef ::xsd::cxx::tree::sequence< RegistryHandle_type > RegistryHandle_sequence;
    typedef RegistryHandle_sequence::iterator RegistryHandle_iterator;
    typedef RegistryHandle_sequence::const_iterator RegistryHandle_const_iterator;
    typedef ::xsd::cxx::tree::traits< RegistryHandle_type, char > RegistryHandle_traits;

    const RegistryHandle_sequence&
    RegistryHandle () const;

    RegistryHandle_sequence&
    RegistryHandle ();

    void
    RegistryHandle (const RegistryHandle_sequence& s);

    // PostalAddress
    //
    typedef ::iodef_2_0::PostalAddress PostalAddress_type;
    typedef ::xsd::cxx::tree::optional< PostalAddress_type > PostalAddress_optional;
    typedef ::xsd::cxx::tree::traits< PostalAddress_type, char > PostalAddress_traits;

    const PostalAddress_optional&
    PostalAddress () const;

    PostalAddress_optional&
    PostalAddress ();

    void
    PostalAddress (const PostalAddress_type& x);

    void
    PostalAddress (const PostalAddress_optional& x);

    void
    PostalAddress (::std::auto_ptr< PostalAddress_type > p);

    // Email
    //
    typedef ::iodef_2_0::ContactMeansType Email_type;
    typedef ::xsd::cxx::tree::sequence< Email_type > Email_sequence;
    typedef Email_sequence::iterator Email_iterator;
    typedef Email_sequence::const_iterator Email_const_iterator;
    typedef ::xsd::cxx::tree::traits< Email_type, char > Email_traits;

    const Email_sequence&
    Email () const;

    Email_sequence&
    Email ();

    void
    Email (const Email_sequence& s);

    // Telephone
    //
    typedef ::iodef_2_0::ContactMeansType Telephone_type;
    typedef ::xsd::cxx::tree::sequence< Telephone_type > Telephone_sequence;
    typedef Telephone_sequence::iterator Telephone_iterator;
    typedef Telephone_sequence::const_iterator Telephone_const_iterator;
    typedef ::xsd::cxx::tree::traits< Telephone_type, char > Telephone_traits;

    const Telephone_sequence&
    Telephone () const;

    Telephone_sequence&
    Telephone ();

    void
    Telephone (const Telephone_sequence& s);

    // Fax
    //
    typedef ::iodef_2_0::ContactMeansType Fax_type;
    typedef ::xsd::cxx::tree::optional< Fax_type > Fax_optional;
    typedef ::xsd::cxx::tree::traits< Fax_type, char > Fax_traits;

    const Fax_optional&
    Fax () const;

    Fax_optional&
    Fax ();

    void
    Fax (const Fax_type& x);

    void
    Fax (const Fax_optional& x);

    void
    Fax (::std::auto_ptr< Fax_type > p);

    // Timezone
    //
    typedef ::iodef_2_0::TimezoneType Timezone_type;
    typedef ::xsd::cxx::tree::optional< Timezone_type > Timezone_optional;
    typedef ::xsd::cxx::tree::traits< Timezone_type, char > Timezone_traits;

    const Timezone_optional&
    Timezone () const;

    Timezone_optional&
    Timezone ();

    void
    Timezone (const Timezone_type& x);

    void
    Timezone (const Timezone_optional& x);

    void
    Timezone (::std::auto_ptr< Timezone_type > p);

    // Contact
    //
    typedef ::iodef_2_0::Contact Contact1_type;
    typedef ::xsd::cxx::tree::sequence< Contact1_type > Contact1_sequence;
    typedef Contact1_sequence::iterator Contact1_iterator;
    typedef Contact1_sequence::const_iterator Contact1_const_iterator;
    typedef ::xsd::cxx::tree::traits< Contact1_type, char > Contact1_traits;

    const Contact1_sequence&
    Contact1 () const;

    Contact1_sequence&
    Contact1 ();

    void
    Contact1 (const Contact1_sequence& s);

    // AdditionalData
    //
    typedef ::iodef_2_0::ExtensionType AdditionalData_type;
    typedef ::xsd::cxx::tree::sequence< AdditionalData_type > AdditionalData_sequence;
    typedef AdditionalData_sequence::iterator AdditionalData_iterator;
    typedef AdditionalData_sequence::const_iterator AdditionalData_const_iterator;
    typedef ::xsd::cxx::tree::traits< AdditionalData_type, char > AdditionalData_traits;

    const AdditionalData_sequence&
    AdditionalData () const;

    AdditionalData_sequence&
    AdditionalData ();

    void
    AdditionalData (const AdditionalData_sequence& s);

    // role
    //
    typedef ::iodef_2_0::contact_role_type role_type;
    typedef ::xsd::cxx::tree::traits< role_type, char > role_traits;

    const role_type&
    role () const;

    role_type&
    role ();

    void
    role (const role_type& x);

    void
    role (::std::auto_ptr< role_type > p);

    // ext-role
    //
    typedef ::xml_schema::string ext_role_type;
    typedef ::xsd::cxx::tree::optional< ext_role_type > ext_role_optional;
    typedef ::xsd::cxx::tree::traits< ext_role_type, char > ext_role_traits;

    const ext_role_optional&
    ext_role () const;

    ext_role_optional&
    ext_role ();

    void
    ext_role (const ext_role_type& x);

    void
    ext_role (const ext_role_optional& x);

    void
    ext_role (::std::auto_ptr< ext_role_type > p);

    // type
    //
    typedef ::iodef_2_0::contact_type_type type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::auto_ptr< type_type > p);

    // ext-type
    //
    typedef ::xml_schema::string ext_type_type;
    typedef ::xsd::cxx::tree::optional< ext_type_type > ext_type_optional;
    typedef ::xsd::cxx::tree::traits< ext_type_type, char > ext_type_traits;

    const ext_type_optional&
    ext_type () const;

    ext_type_optional&
    ext_type ();

    void
    ext_type (const ext_type_type& x);

    void
    ext_type (const ext_type_optional& x);

    void
    ext_type (::std::auto_ptr< ext_type_type > p);

    // restriction
    //
    typedef ::iodef_2_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // ext-restriction
    //
    typedef ::xml_schema::string ext_restriction_type;
    typedef ::xsd::cxx::tree::optional< ext_restriction_type > ext_restriction_optional;
    typedef ::xsd::cxx::tree::traits< ext_restriction_type, char > ext_restriction_traits;

    const ext_restriction_optional&
    ext_restriction () const;

    ext_restriction_optional&
    ext_restriction ();

    void
    ext_restriction (const ext_restriction_type& x);

    void
    ext_restriction (const ext_restriction_optional& x);

    void
    ext_restriction (::std::auto_ptr< ext_restriction_type > p);

    // Constructors.
    //
    Contact (const role_type&,
             const type_type&);

    Contact (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Contact (const Contact& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Contact*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Contact&
    operator= (const Contact& x);

    virtual 
    ~Contact ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ContactName_sequence ContactName_;
    ContactTitle_sequence ContactTitle_;
    Description_sequence Description_;
    RegistryHandle_sequence RegistryHandle_;
    PostalAddress_optional PostalAddress_;
    Email_sequence Email_;
    Telephone_sequence Telephone_;
    Fax_optional Fax_;
    Timezone_optional Timezone_;
    Contact1_sequence Contact1_;
    AdditionalData_sequence AdditionalData_;
    ::xsd::cxx::tree::one< role_type > role_;
    ext_role_optional ext_role_;
    ::xsd::cxx::tree::one< type_type > type_;
    ext_type_optional ext_type_;
    restriction_optional restriction_;
    ext_restriction_optional ext_restriction_;
  };

  class RegistryHandle: public ::xml_schema::string
  {
    public:
    // registry
    //
    typedef ::iodef_2_0::registryhandle_registry_type registry_type;
    typedef ::xsd::cxx::tree::optional< registry_type > registry_optional;
    typedef ::xsd::cxx::tree::traits< registry_type, char > registry_traits;

    const registry_optional&
    registry () const;

    registry_optional&
    registry ();

    void
    registry (const registry_type& x);

    void
    registry (const registry_optional& x);

    void
    registry (::std::auto_ptr< registry_type > p);

    // ext-registry
    //
    typedef ::xml_schema::string ext_registry_type;
    typedef ::xsd::cxx::tree::optional< ext_registry_type > ext_registry_optional;
    typedef ::xsd::cxx::tree::traits< ext_registry_type, char > ext_registry_traits;

    const ext_registry_optional&
    ext_registry () const;

    ext_registry_optional&
    ext_registry ();

    void
    ext_registry (const ext_registry_type& x);

    void
    ext_registry (const ext_registry_optional& x);

    void
    ext_registry (::std::auto_ptr< ext_registry_type > p);

    // Constructors.
    //
    RegistryHandle ();

    RegistryHandle (const char*);

    RegistryHandle (const ::std::string&);

    RegistryHandle (const ::xml_schema::string&);

    RegistryHandle (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    RegistryHandle (const RegistryHandle& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual RegistryHandle*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    RegistryHandle&
    operator= (const RegistryHandle& x);

    virtual 
    ~RegistryHandle ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    registry_optional registry_;
    ext_registry_optional ext_registry_;
  };

  class PostalAddress: public ::iodef_2_0::MLStringType
  {
    public:
    // meaning
    //
    typedef ::xml_schema::string meaning_type;
    typedef ::xsd::cxx::tree::optional< meaning_type > meaning_optional;
    typedef ::xsd::cxx::tree::traits< meaning_type, char > meaning_traits;

    const meaning_optional&
    meaning () const;

    meaning_optional&
    meaning ();

    void
    meaning (const meaning_type& x);

    void
    meaning (const meaning_optional& x);

    void
    meaning (::std::auto_ptr< meaning_type > p);

    // Constructors.
    //
    PostalAddress ();

    PostalAddress (const char*);

    PostalAddress (const ::std::string&);

    PostalAddress (const ::xml_schema::string&);

    PostalAddress (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    PostalAddress (const PostalAddress& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual PostalAddress*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    PostalAddress&
    operator= (const PostalAddress& x);

    virtual 
    ~PostalAddress ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    meaning_optional meaning_;
  };

  class History: public ::xml_schema::type
  {
    public:
    // HistoryItem
    //
    typedef ::iodef_2_0::HistoryItem HistoryItem_type;
    typedef ::xsd::cxx::tree::sequence< HistoryItem_type > HistoryItem_sequence;
    typedef HistoryItem_sequence::iterator HistoryItem_iterator;
    typedef HistoryItem_sequence::const_iterator HistoryItem_const_iterator;
    typedef ::xsd::cxx::tree::traits< HistoryItem_type, char > HistoryItem_traits;

    const HistoryItem_sequence&
    HistoryItem () const;

    HistoryItem_sequence&
    HistoryItem ();

    void
    HistoryItem (const HistoryItem_sequence& s);

    // restriction
    //
    typedef ::iodef_2_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_type&
    restriction () const;

    restriction_type&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    static const restriction_type&
    restriction_default_value ();

    // ext-restriction
    //
    typedef ::xml_schema::string ext_restriction_type;
    typedef ::xsd::cxx::tree::optional< ext_restriction_type > ext_restriction_optional;
    typedef ::xsd::cxx::tree::traits< ext_restriction_type, char > ext_restriction_traits;

    const ext_restriction_optional&
    ext_restriction () const;

    ext_restriction_optional&
    ext_restriction ();

    void
    ext_restriction (const ext_restriction_type& x);

    void
    ext_restriction (const ext_restriction_optional& x);

    void
    ext_restriction (::std::auto_ptr< ext_restriction_type > p);

    // Constructors.
    //
    History ();

    History (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    History (const History& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual History*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    History&
    operator= (const History& x);

    virtual 
    ~History ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    HistoryItem_sequence HistoryItem_;
    ::xsd::cxx::tree::one< restriction_type > restriction_;
    static const restriction_type restriction_default_value_;
    ext_restriction_optional ext_restriction_;
  };

  class HistoryItem: public ::xml_schema::type
  {
    public:
    // DateTime
    //
    typedef ::xml_schema::date_time DateTime_type;
    typedef ::xsd::cxx::tree::traits< DateTime_type, char > DateTime_traits;

    const DateTime_type&
    DateTime () const;

    DateTime_type&
    DateTime ();

    void
    DateTime (const DateTime_type& x);

    void
    DateTime (::std::auto_ptr< DateTime_type > p);

    // IncidentID
    //
    typedef ::iodef_2_0::IncidentIDType IncidentID_type;
    typedef ::xsd::cxx::tree::optional< IncidentID_type > IncidentID_optional;
    typedef ::xsd::cxx::tree::traits< IncidentID_type, char > IncidentID_traits;

    const IncidentID_optional&
    IncidentID () const;

    IncidentID_optional&
    IncidentID ();

    void
    IncidentID (const IncidentID_type& x);

    void
    IncidentID (const IncidentID_optional& x);

    void
    IncidentID (::std::auto_ptr< IncidentID_type > p);

    // Contact
    //
    typedef ::iodef_2_0::Contact Contact_type;
    typedef ::xsd::cxx::tree::optional< Contact_type > Contact_optional;
    typedef ::xsd::cxx::tree::traits< Contact_type, char > Contact_traits;

    const Contact_optional&
    Contact () const;

    Contact_optional&
    Contact ();

    void
    Contact (const Contact_type& x);

    void
    Contact (const Contact_optional& x);

    void
    Contact (::std::auto_ptr< Contact_type > p);

    // Description
    //
    typedef ::iodef_2_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // DefinedCOA
    //
    typedef ::iodef_2_0::MLStringType DefinedCOA_type;
    typedef ::xsd::cxx::tree::sequence< DefinedCOA_type > DefinedCOA_sequence;
    typedef DefinedCOA_sequence::iterator DefinedCOA_iterator;
    typedef DefinedCOA_sequence::const_iterator DefinedCOA_const_iterator;
    typedef ::xsd::cxx::tree::traits< DefinedCOA_type, char > DefinedCOA_traits;

    const DefinedCOA_sequence&
    DefinedCOA () const;

    DefinedCOA_sequence&
    DefinedCOA ();

    void
    DefinedCOA (const DefinedCOA_sequence& s);

    // AdditionalData
    //
    typedef ::iodef_2_0::ExtensionType AdditionalData_type;
    typedef ::xsd::cxx::tree::sequence< AdditionalData_type > AdditionalData_sequence;
    typedef AdditionalData_sequence::iterator AdditionalData_iterator;
    typedef AdditionalData_sequence::const_iterator AdditionalData_const_iterator;
    typedef ::xsd::cxx::tree::traits< AdditionalData_type, char > AdditionalData_traits;

    const AdditionalData_sequence&
    AdditionalData () const;

    AdditionalData_sequence&
    AdditionalData ();

    void
    AdditionalData (const AdditionalData_sequence& s);

    // restriction
    //
    typedef ::iodef_2_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // ext-restriction
    //
    typedef ::xml_schema::string ext_restriction_type;
    typedef ::xsd::cxx::tree::optional< ext_restriction_type > ext_restriction_optional;
    typedef ::xsd::cxx::tree::traits< ext_restriction_type, char > ext_restriction_traits;

    const ext_restriction_optional&
    ext_restriction () const;

    ext_restriction_optional&
    ext_restriction ();

    void
    ext_restriction (const ext_restriction_type& x);

    void
    ext_restriction (const ext_restriction_optional& x);

    void
    ext_restriction (::std::auto_ptr< ext_restriction_type > p);

    // action
    //
    typedef ::iodef_2_0::action_type action_type;
    typedef ::xsd::cxx::tree::traits< action_type, char > action_traits;

    const action_type&
    action () const;

    action_type&
    action ();

    void
    action (const action_type& x);

    void
    action (::std::auto_ptr< action_type > p);

    // ext-action
    //
    typedef ::xml_schema::string ext_action_type;
    typedef ::xsd::cxx::tree::optional< ext_action_type > ext_action_optional;
    typedef ::xsd::cxx::tree::traits< ext_action_type, char > ext_action_traits;

    const ext_action_optional&
    ext_action () const;

    ext_action_optional&
    ext_action ();

    void
    ext_action (const ext_action_type& x);

    void
    ext_action (const ext_action_optional& x);

    void
    ext_action (::std::auto_ptr< ext_action_type > p);

    // observable-id
    //
    typedef ::xml_schema::id observable_id_type;
    typedef ::xsd::cxx::tree::optional< observable_id_type > observable_id_optional;
    typedef ::xsd::cxx::tree::traits< observable_id_type, char > observable_id_traits;

    const observable_id_optional&
    observable_id () const;

    observable_id_optional&
    observable_id ();

    void
    observable_id (const observable_id_type& x);

    void
    observable_id (const observable_id_optional& x);

    void
    observable_id (::std::auto_ptr< observable_id_type > p);

    // Constructors.
    //
    HistoryItem (const DateTime_type&,
                 const action_type&);

    HistoryItem (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    HistoryItem (const HistoryItem& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual HistoryItem*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    HistoryItem&
    operator= (const HistoryItem& x);

    virtual 
    ~HistoryItem ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< DateTime_type > DateTime_;
    IncidentID_optional IncidentID_;
    Contact_optional Contact_;
    Description_sequence Description_;
    DefinedCOA_sequence DefinedCOA_;
    AdditionalData_sequence AdditionalData_;
    restriction_optional restriction_;
    ext_restriction_optional ext_restriction_;
    ::xsd::cxx::tree::one< action_type > action_;
    ext_action_optional ext_action_;
    observable_id_optional observable_id_;
  };

  class Expectation: public ::xml_schema::type
  {
    public:
    // Description
    //
    typedef ::iodef_2_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // DefinedCOA
    //
    typedef ::iodef_2_0::MLStringType DefinedCOA_type;
    typedef ::xsd::cxx::tree::sequence< DefinedCOA_type > DefinedCOA_sequence;
    typedef DefinedCOA_sequence::iterator DefinedCOA_iterator;
    typedef DefinedCOA_sequence::const_iterator DefinedCOA_const_iterator;
    typedef ::xsd::cxx::tree::traits< DefinedCOA_type, char > DefinedCOA_traits;

    const DefinedCOA_sequence&
    DefinedCOA () const;

    DefinedCOA_sequence&
    DefinedCOA ();

    void
    DefinedCOA (const DefinedCOA_sequence& s);

    // StartTime
    //
    typedef ::xml_schema::date_time StartTime_type;
    typedef ::xsd::cxx::tree::optional< StartTime_type > StartTime_optional;
    typedef ::xsd::cxx::tree::traits< StartTime_type, char > StartTime_traits;

    const StartTime_optional&
    StartTime () const;

    StartTime_optional&
    StartTime ();

    void
    StartTime (const StartTime_type& x);

    void
    StartTime (const StartTime_optional& x);

    void
    StartTime (::std::auto_ptr< StartTime_type > p);

    // EndTime
    //
    typedef ::xml_schema::date_time EndTime_type;
    typedef ::xsd::cxx::tree::optional< EndTime_type > EndTime_optional;
    typedef ::xsd::cxx::tree::traits< EndTime_type, char > EndTime_traits;

    const EndTime_optional&
    EndTime () const;

    EndTime_optional&
    EndTime ();

    void
    EndTime (const EndTime_type& x);

    void
    EndTime (const EndTime_optional& x);

    void
    EndTime (::std::auto_ptr< EndTime_type > p);

    // Contact
    //
    typedef ::iodef_2_0::Contact Contact_type;
    typedef ::xsd::cxx::tree::optional< Contact_type > Contact_optional;
    typedef ::xsd::cxx::tree::traits< Contact_type, char > Contact_traits;

    const Contact_optional&
    Contact () const;

    Contact_optional&
    Contact ();

    void
    Contact (const Contact_type& x);

    void
    Contact (const Contact_optional& x);

    void
    Contact (::std::auto_ptr< Contact_type > p);

    // restriction
    //
    typedef ::iodef_2_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_type&
    restriction () const;

    restriction_type&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    static const restriction_type&
    restriction_default_value ();

    // ext-restriction
    //
    typedef ::xml_schema::string ext_restriction_type;
    typedef ::xsd::cxx::tree::optional< ext_restriction_type > ext_restriction_optional;
    typedef ::xsd::cxx::tree::traits< ext_restriction_type, char > ext_restriction_traits;

    const ext_restriction_optional&
    ext_restriction () const;

    ext_restriction_optional&
    ext_restriction ();

    void
    ext_restriction (const ext_restriction_type& x);

    void
    ext_restriction (const ext_restriction_optional& x);

    void
    ext_restriction (::std::auto_ptr< ext_restriction_type > p);

    // severity
    //
    typedef ::iodef_2_0::severity_type severity_type;
    typedef ::xsd::cxx::tree::optional< severity_type > severity_optional;
    typedef ::xsd::cxx::tree::traits< severity_type, char > severity_traits;

    const severity_optional&
    severity () const;

    severity_optional&
    severity ();

    void
    severity (const severity_type& x);

    void
    severity (const severity_optional& x);

    void
    severity (::std::auto_ptr< severity_type > p);

    // action
    //
    typedef ::iodef_2_0::action_type action_type;
    typedef ::xsd::cxx::tree::traits< action_type, char > action_traits;

    const action_type&
    action () const;

    action_type&
    action ();

    void
    action (const action_type& x);

    void
    action (::std::auto_ptr< action_type > p);

    static const action_type&
    action_default_value ();

    // ext-action
    //
    typedef ::xml_schema::string ext_action_type;
    typedef ::xsd::cxx::tree::optional< ext_action_type > ext_action_optional;
    typedef ::xsd::cxx::tree::traits< ext_action_type, char > ext_action_traits;

    const ext_action_optional&
    ext_action () const;

    ext_action_optional&
    ext_action ();

    void
    ext_action (const ext_action_type& x);

    void
    ext_action (const ext_action_optional& x);

    void
    ext_action (::std::auto_ptr< ext_action_type > p);

    // observable-id
    //
    typedef ::xml_schema::id observable_id_type;
    typedef ::xsd::cxx::tree::optional< observable_id_type > observable_id_optional;
    typedef ::xsd::cxx::tree::traits< observable_id_type, char > observable_id_traits;

    const observable_id_optional&
    observable_id () const;

    observable_id_optional&
    observable_id ();

    void
    observable_id (const observable_id_type& x);

    void
    observable_id (const observable_id_optional& x);

    void
    observable_id (::std::auto_ptr< observable_id_type > p);

    // Constructors.
    //
    Expectation ();

    Expectation (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    Expectation (const Expectation& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual Expectation*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Expectation&
    operator= (const Expectation& x);

    virtual 
    ~Expectation ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Description_sequence Description_;
    DefinedCOA_sequence DefinedCOA_;
    StartTime_optional StartTime_;
    EndTime_optional EndTime_;
    Contact_optional Contact_;
    ::xsd::cxx::tree::one< restriction_type > restriction_;
    static const restriction_type restriction_default_value_;
    ext_restriction_optional ext_restriction_;
    severity_optional severity_;
    ::xsd::cxx::tree::one< action_type > action_;
    static const action_type action_default_value_;
    ext_action_optional ext_action_;
    observable_id_optional observable_id_;
  };

  class Discovery: public ::xml_schema::type
  {
    public:
    // Description
    //
    typedef ::iodef_2_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // Contact
    //
    typedef ::iodef_2_0::Contact Contact_type;
    typedef ::xsd::cxx::tree::sequence< Contact_type > Contact_sequence;
    typedef Contact_sequence::iterator Contact_iterator;
    typedef Contact_sequence::const_iterator Contact_const_iterator;
    typedef ::xsd::cxx::tree::traits< Contact_type, char > Contact_traits;

    const Contact_sequence&
    Contact () const;

    Contact_sequence&
    Contact ();

    void
    Contact (const Contact_sequence& s);

    // DetectionPattern
    //
    typedef ::iodef_2_0::DetectionPattern DetectionPattern_type;
    typedef ::xsd::cxx::tree::sequence< DetectionPattern_type > DetectionPattern_sequence;
    typedef DetectionPattern_sequence::iterator DetectionPattern_iterator;
    typedef DetectionPattern_sequence::const_iterator DetectionPattern_const_iterator;
    typedef ::xsd::cxx::tree::traits< DetectionPattern_type, char > DetectionPattern_traits;

    const DetectionPattern_sequence&
    DetectionPattern () const;

    DetectionPattern_sequence&
    DetectionPattern ();

    void
    DetectionPattern (const DetectionPattern_sequence& s);

    // source
    //
    typedef ::iodef_2_0::discovery_source_type source_type;
    typedef ::xsd::cxx::tree::traits< source_type, char > source_traits;

    const source_type&
    source () const;

    source_type&
    source ();

    void
    source (const source_type& x);

    void
    source (::std::auto_ptr< source_type > p);

    static const source_type&
    source_default_value ();

    // ext-source
    //
    typedef ::xml_schema::string ext_source_type;
    typedef ::xsd::cxx::tree::optional< ext_source_type > ext_source_optional;
    typedef ::xsd::cxx::tree::traits< ext_source_type, char > ext_source_traits;

    const ext_source_optional&
    ext_source () const;

    ext_source_optional&
    ext_source ();

    void
    ext_source (const ext_source_type& x);

    void
    ext_source (const ext_source_optional& x);

    void
    ext_source (::std::auto_ptr< ext_source_type > p);

    // restriction
    //
    typedef ::iodef_2_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // ext-restriction
    //
    typedef ::xml_schema::string ext_restriction_type;
    typedef ::xsd::cxx::tree::optional< ext_restriction_type > ext_restriction_optional;
    typedef ::xsd::cxx::tree::traits< ext_restriction_type, char > ext_restriction_traits;

    const ext_restriction_optional&
    ext_restriction () const;

    ext_restriction_optional&
    ext_restriction ();

    void
    ext_restriction (const ext_restriction_type& x);

    void
    ext_restriction (const ext_restriction_optional& x);

    void
    ext_restriction (::std::auto_ptr< ext_restriction_type > p);

    // Constructors.
    //
    Discovery ();

    Discovery (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    Discovery (const Discovery& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual Discovery*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Discovery&
    operator= (const Discovery& x);

    virtual 
    ~Discovery ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Description_sequence Description_;
    Contact_sequence Contact_;
    DetectionPattern_sequence DetectionPattern_;
    ::xsd::cxx::tree::one< source_type > source_;
    static const source_type source_default_value_;
    ext_source_optional ext_source_;
    restriction_optional restriction_;
    ext_restriction_optional ext_restriction_;
  };

  class DetectionPattern: public ::xml_schema::type
  {
    public:
    // Application
    //
    typedef ::iodef_2_0::SoftwareType Application_type;
    typedef ::xsd::cxx::tree::traits< Application_type, char > Application_traits;

    const Application_type&
    Application () const;

    Application_type&
    Application ();

    void
    Application (const Application_type& x);

    void
    Application (::std::auto_ptr< Application_type > p);

    // Description
    //
    typedef ::iodef_2_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // DetectionConfiguration
    //
    typedef ::xml_schema::string DetectionConfiguration_type;
    typedef ::xsd::cxx::tree::sequence< DetectionConfiguration_type > DetectionConfiguration_sequence;
    typedef DetectionConfiguration_sequence::iterator DetectionConfiguration_iterator;
    typedef DetectionConfiguration_sequence::const_iterator DetectionConfiguration_const_iterator;
    typedef ::xsd::cxx::tree::traits< DetectionConfiguration_type, char > DetectionConfiguration_traits;

    const DetectionConfiguration_sequence&
    DetectionConfiguration () const;

    DetectionConfiguration_sequence&
    DetectionConfiguration ();

    void
    DetectionConfiguration (const DetectionConfiguration_sequence& s);

    // restriction
    //
    typedef ::iodef_2_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // ext-restriction
    //
    typedef ::xml_schema::string ext_restriction_type;
    typedef ::xsd::cxx::tree::optional< ext_restriction_type > ext_restriction_optional;
    typedef ::xsd::cxx::tree::traits< ext_restriction_type, char > ext_restriction_traits;

    const ext_restriction_optional&
    ext_restriction () const;

    ext_restriction_optional&
    ext_restriction ();

    void
    ext_restriction (const ext_restriction_type& x);

    void
    ext_restriction (const ext_restriction_optional& x);

    void
    ext_restriction (::std::auto_ptr< ext_restriction_type > p);

    // Constructors.
    //
    DetectionPattern (const Application_type&);

    DetectionPattern (::std::auto_ptr< Application_type >);

    DetectionPattern (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    DetectionPattern (const DetectionPattern& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual DetectionPattern*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    DetectionPattern&
    operator= (const DetectionPattern& x);

    virtual 
    ~DetectionPattern ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Application_type > Application_;
    Description_sequence Description_;
    DetectionConfiguration_sequence DetectionConfiguration_;
    restriction_optional restriction_;
    ext_restriction_optional ext_restriction_;
  };

  class Method: public ::xml_schema::type
  {
    public:
    // Reference
    //
    typedef ::iodef_2_0::Reference Reference_type;
    typedef ::xsd::cxx::tree::sequence< Reference_type > Reference_sequence;
    typedef Reference_sequence::iterator Reference_iterator;
    typedef Reference_sequence::const_iterator Reference_const_iterator;
    typedef ::xsd::cxx::tree::traits< Reference_type, char > Reference_traits;

    const Reference_sequence&
    Reference () const;

    Reference_sequence&
    Reference ();

    void
    Reference (const Reference_sequence& s);

    // Description
    //
    typedef ::iodef_2_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // AdditionalData
    //
    typedef ::iodef_2_0::ExtensionType AdditionalData_type;
    typedef ::xsd::cxx::tree::sequence< AdditionalData_type > AdditionalData_sequence;
    typedef AdditionalData_sequence::iterator AdditionalData_iterator;
    typedef AdditionalData_sequence::const_iterator AdditionalData_const_iterator;
    typedef ::xsd::cxx::tree::traits< AdditionalData_type, char > AdditionalData_traits;

    const AdditionalData_sequence&
    AdditionalData () const;

    AdditionalData_sequence&
    AdditionalData ();

    void
    AdditionalData (const AdditionalData_sequence& s);

    // restriction
    //
    typedef ::iodef_2_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // ext-restriction
    //
    typedef ::xml_schema::string ext_restriction_type;
    typedef ::xsd::cxx::tree::optional< ext_restriction_type > ext_restriction_optional;
    typedef ::xsd::cxx::tree::traits< ext_restriction_type, char > ext_restriction_traits;

    const ext_restriction_optional&
    ext_restriction () const;

    ext_restriction_optional&
    ext_restriction ();

    void
    ext_restriction (const ext_restriction_type& x);

    void
    ext_restriction (const ext_restriction_optional& x);

    void
    ext_restriction (::std::auto_ptr< ext_restriction_type > p);

    // Constructors.
    //
    Method ();

    Method (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Method (const Method& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual Method*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Method&
    operator= (const Method& x);

    virtual 
    ~Method ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Reference_sequence Reference_;
    Description_sequence Description_;
    AdditionalData_sequence AdditionalData_;
    restriction_optional restriction_;
    ext_restriction_optional ext_restriction_;
  };

  class Reference: public ::xml_schema::type
  {
    public:
    // ReferenceName
    //
    typedef ::iodef_enum_1_0::ReferenceName ReferenceName_type;
    typedef ::xsd::cxx::tree::optional< ReferenceName_type > ReferenceName_optional;
    typedef ::xsd::cxx::tree::traits< ReferenceName_type, char > ReferenceName_traits;

    const ReferenceName_optional&
    ReferenceName () const;

    ReferenceName_optional&
    ReferenceName ();

    void
    ReferenceName (const ReferenceName_type& x);

    void
    ReferenceName (const ReferenceName_optional& x);

    void
    ReferenceName (::std::auto_ptr< ReferenceName_type > p);

    // URL
    //
    typedef ::xml_schema::uri URL_type;
    typedef ::xsd::cxx::tree::sequence< URL_type > URL_sequence;
    typedef URL_sequence::iterator URL_iterator;
    typedef URL_sequence::const_iterator URL_const_iterator;
    typedef ::xsd::cxx::tree::traits< URL_type, char > URL_traits;

    const URL_sequence&
    URL () const;

    URL_sequence&
    URL ();

    void
    URL (const URL_sequence& s);

    // Description
    //
    typedef ::iodef_2_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // observable-id
    //
    typedef ::xml_schema::id observable_id_type;
    typedef ::xsd::cxx::tree::optional< observable_id_type > observable_id_optional;
    typedef ::xsd::cxx::tree::traits< observable_id_type, char > observable_id_traits;

    const observable_id_optional&
    observable_id () const;

    observable_id_optional&
    observable_id ();

    void
    observable_id (const observable_id_type& x);

    void
    observable_id (const observable_id_optional& x);

    void
    observable_id (::std::auto_ptr< observable_id_type > p);

    // Constructors.
    //
    Reference ();

    Reference (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    Reference (const Reference& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual Reference*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Reference&
    operator= (const Reference& x);

    virtual 
    ~Reference ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ReferenceName_optional ReferenceName_;
    URL_sequence URL_;
    Description_sequence Description_;
    observable_id_optional observable_id_;
  };

  class Assessment: public ::xml_schema::type
  {
    public:
    // IncidentCategory
    //
    typedef ::iodef_2_0::MLStringType IncidentCategory_type;
    typedef ::xsd::cxx::tree::sequence< IncidentCategory_type > IncidentCategory_sequence;
    typedef IncidentCategory_sequence::iterator IncidentCategory_iterator;
    typedef IncidentCategory_sequence::const_iterator IncidentCategory_const_iterator;
    typedef ::xsd::cxx::tree::traits< IncidentCategory_type, char > IncidentCategory_traits;

    const IncidentCategory_sequence&
    IncidentCategory () const;

    IncidentCategory_sequence&
    IncidentCategory ();

    void
    IncidentCategory (const IncidentCategory_sequence& s);

    // SystemImpact
    //
    typedef ::iodef_2_0::SystemImpact SystemImpact_type;
    typedef ::xsd::cxx::tree::sequence< SystemImpact_type > SystemImpact_sequence;
    typedef SystemImpact_sequence::iterator SystemImpact_iterator;
    typedef SystemImpact_sequence::const_iterator SystemImpact_const_iterator;
    typedef ::xsd::cxx::tree::traits< SystemImpact_type, char > SystemImpact_traits;

    const SystemImpact_sequence&
    SystemImpact () const;

    SystemImpact_sequence&
    SystemImpact ();

    void
    SystemImpact (const SystemImpact_sequence& s);

    // BusinessImpact
    //
    typedef ::iodef_2_0::BusinessImpactType BusinessImpact_type;
    typedef ::xsd::cxx::tree::sequence< BusinessImpact_type > BusinessImpact_sequence;
    typedef BusinessImpact_sequence::iterator BusinessImpact_iterator;
    typedef BusinessImpact_sequence::const_iterator BusinessImpact_const_iterator;
    typedef ::xsd::cxx::tree::traits< BusinessImpact_type, char > BusinessImpact_traits;

    const BusinessImpact_sequence&
    BusinessImpact () const;

    BusinessImpact_sequence&
    BusinessImpact ();

    void
    BusinessImpact (const BusinessImpact_sequence& s);

    // TimeImpact
    //
    typedef ::iodef_2_0::TimeImpact TimeImpact_type;
    typedef ::xsd::cxx::tree::sequence< TimeImpact_type > TimeImpact_sequence;
    typedef TimeImpact_sequence::iterator TimeImpact_iterator;
    typedef TimeImpact_sequence::const_iterator TimeImpact_const_iterator;
    typedef ::xsd::cxx::tree::traits< TimeImpact_type, char > TimeImpact_traits;

    const TimeImpact_sequence&
    TimeImpact () const;

    TimeImpact_sequence&
    TimeImpact ();

    void
    TimeImpact (const TimeImpact_sequence& s);

    // MonetaryImpact
    //
    typedef ::iodef_2_0::MonetaryImpact MonetaryImpact_type;
    typedef ::xsd::cxx::tree::sequence< MonetaryImpact_type > MonetaryImpact_sequence;
    typedef MonetaryImpact_sequence::iterator MonetaryImpact_iterator;
    typedef MonetaryImpact_sequence::const_iterator MonetaryImpact_const_iterator;
    typedef ::xsd::cxx::tree::traits< MonetaryImpact_type, char > MonetaryImpact_traits;

    const MonetaryImpact_sequence&
    MonetaryImpact () const;

    MonetaryImpact_sequence&
    MonetaryImpact ();

    void
    MonetaryImpact (const MonetaryImpact_sequence& s);

    // IntendedImpact
    //
    typedef ::iodef_2_0::BusinessImpactType IntendedImpact_type;
    typedef ::xsd::cxx::tree::sequence< IntendedImpact_type > IntendedImpact_sequence;
    typedef IntendedImpact_sequence::iterator IntendedImpact_iterator;
    typedef IntendedImpact_sequence::const_iterator IntendedImpact_const_iterator;
    typedef ::xsd::cxx::tree::traits< IntendedImpact_type, char > IntendedImpact_traits;

    const IntendedImpact_sequence&
    IntendedImpact () const;

    IntendedImpact_sequence&
    IntendedImpact ();

    void
    IntendedImpact (const IntendedImpact_sequence& s);

    // Counter
    //
    typedef ::iodef_2_0::Counter Counter_type;
    typedef ::xsd::cxx::tree::sequence< Counter_type > Counter_sequence;
    typedef Counter_sequence::iterator Counter_iterator;
    typedef Counter_sequence::const_iterator Counter_const_iterator;
    typedef ::xsd::cxx::tree::traits< Counter_type, char > Counter_traits;

    const Counter_sequence&
    Counter () const;

    Counter_sequence&
    Counter ();

    void
    Counter (const Counter_sequence& s);

    // MitigatingFactor
    //
    typedef ::iodef_2_0::MLStringType MitigatingFactor_type;
    typedef ::xsd::cxx::tree::sequence< MitigatingFactor_type > MitigatingFactor_sequence;
    typedef MitigatingFactor_sequence::iterator MitigatingFactor_iterator;
    typedef MitigatingFactor_sequence::const_iterator MitigatingFactor_const_iterator;
    typedef ::xsd::cxx::tree::traits< MitigatingFactor_type, char > MitigatingFactor_traits;

    const MitigatingFactor_sequence&
    MitigatingFactor () const;

    MitigatingFactor_sequence&
    MitigatingFactor ();

    void
    MitigatingFactor (const MitigatingFactor_sequence& s);

    // Confidence
    //
    typedef ::iodef_2_0::Confidence Confidence_type;
    typedef ::xsd::cxx::tree::optional< Confidence_type > Confidence_optional;
    typedef ::xsd::cxx::tree::traits< Confidence_type, char > Confidence_traits;

    const Confidence_optional&
    Confidence () const;

    Confidence_optional&
    Confidence ();

    void
    Confidence (const Confidence_type& x);

    void
    Confidence (const Confidence_optional& x);

    void
    Confidence (::std::auto_ptr< Confidence_type > p);

    // AdditionalData
    //
    typedef ::iodef_2_0::ExtensionType AdditionalData_type;
    typedef ::xsd::cxx::tree::sequence< AdditionalData_type > AdditionalData_sequence;
    typedef AdditionalData_sequence::iterator AdditionalData_iterator;
    typedef AdditionalData_sequence::const_iterator AdditionalData_const_iterator;
    typedef ::xsd::cxx::tree::traits< AdditionalData_type, char > AdditionalData_traits;

    const AdditionalData_sequence&
    AdditionalData () const;

    AdditionalData_sequence&
    AdditionalData ();

    void
    AdditionalData (const AdditionalData_sequence& s);

    // occurrence
    //
    typedef ::iodef_2_0::occurrence occurrence_type;
    typedef ::xsd::cxx::tree::optional< occurrence_type > occurrence_optional;
    typedef ::xsd::cxx::tree::traits< occurrence_type, char > occurrence_traits;

    const occurrence_optional&
    occurrence () const;

    occurrence_optional&
    occurrence ();

    void
    occurrence (const occurrence_type& x);

    void
    occurrence (const occurrence_optional& x);

    void
    occurrence (::std::auto_ptr< occurrence_type > p);

    // restriction
    //
    typedef ::iodef_2_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // ext-restriction
    //
    typedef ::xml_schema::string ext_restriction_type;
    typedef ::xsd::cxx::tree::optional< ext_restriction_type > ext_restriction_optional;
    typedef ::xsd::cxx::tree::traits< ext_restriction_type, char > ext_restriction_traits;

    const ext_restriction_optional&
    ext_restriction () const;

    ext_restriction_optional&
    ext_restriction ();

    void
    ext_restriction (const ext_restriction_type& x);

    void
    ext_restriction (const ext_restriction_optional& x);

    void
    ext_restriction (::std::auto_ptr< ext_restriction_type > p);

    // observable-id
    //
    typedef ::xml_schema::id observable_id_type;
    typedef ::xsd::cxx::tree::optional< observable_id_type > observable_id_optional;
    typedef ::xsd::cxx::tree::traits< observable_id_type, char > observable_id_traits;

    const observable_id_optional&
    observable_id () const;

    observable_id_optional&
    observable_id ();

    void
    observable_id (const observable_id_type& x);

    void
    observable_id (const observable_id_optional& x);

    void
    observable_id (::std::auto_ptr< observable_id_type > p);

    // Constructors.
    //
    Assessment ();

    Assessment (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    Assessment (const Assessment& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual Assessment*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Assessment&
    operator= (const Assessment& x);

    virtual 
    ~Assessment ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    IncidentCategory_sequence IncidentCategory_;
    SystemImpact_sequence SystemImpact_;
    BusinessImpact_sequence BusinessImpact_;
    TimeImpact_sequence TimeImpact_;
    MonetaryImpact_sequence MonetaryImpact_;
    IntendedImpact_sequence IntendedImpact_;
    Counter_sequence Counter_;
    MitigatingFactor_sequence MitigatingFactor_;
    Confidence_optional Confidence_;
    AdditionalData_sequence AdditionalData_;
    occurrence_optional occurrence_;
    restriction_optional restriction_;
    ext_restriction_optional ext_restriction_;
    observable_id_optional observable_id_;
  };

  class SystemImpact: public ::iodef_2_0::MLStringType
  {
    public:
    // severity
    //
    typedef ::iodef_2_0::severity_type severity_type;
    typedef ::xsd::cxx::tree::optional< severity_type > severity_optional;
    typedef ::xsd::cxx::tree::traits< severity_type, char > severity_traits;

    const severity_optional&
    severity () const;

    severity_optional&
    severity ();

    void
    severity (const severity_type& x);

    void
    severity (const severity_optional& x);

    void
    severity (::std::auto_ptr< severity_type > p);

    // completion
    //
    typedef ::iodef_2_0::completion completion_type;
    typedef ::xsd::cxx::tree::optional< completion_type > completion_optional;
    typedef ::xsd::cxx::tree::traits< completion_type, char > completion_traits;

    const completion_optional&
    completion () const;

    completion_optional&
    completion ();

    void
    completion (const completion_type& x);

    void
    completion (const completion_optional& x);

    void
    completion (::std::auto_ptr< completion_type > p);

    // type
    //
    typedef ::iodef_2_0::systemimpact_type_type type_type;
    typedef ::xsd::cxx::tree::optional< type_type > type_optional;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_optional&
    type () const;

    type_optional&
    type ();

    void
    type (const type_type& x);

    void
    type (const type_optional& x);

    void
    type (::std::auto_ptr< type_type > p);

    // ext-type
    //
    typedef ::xml_schema::string ext_type_type;
    typedef ::xsd::cxx::tree::optional< ext_type_type > ext_type_optional;
    typedef ::xsd::cxx::tree::traits< ext_type_type, char > ext_type_traits;

    const ext_type_optional&
    ext_type () const;

    ext_type_optional&
    ext_type ();

    void
    ext_type (const ext_type_type& x);

    void
    ext_type (const ext_type_optional& x);

    void
    ext_type (::std::auto_ptr< ext_type_type > p);

    // Constructors.
    //
    SystemImpact ();

    SystemImpact (const char*);

    SystemImpact (const ::std::string&);

    SystemImpact (const ::xml_schema::string&);

    SystemImpact (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    SystemImpact (const SystemImpact& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual SystemImpact*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    SystemImpact&
    operator= (const SystemImpact& x);

    virtual 
    ~SystemImpact ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    severity_optional severity_;
    completion_optional completion_;
    type_optional type_;
    ext_type_optional ext_type_;
  };

  class TimeImpact: public ::iodef_2_0::PositiveFloatType
  {
    public:
    // severity
    //
    typedef ::iodef_2_0::severity_type severity_type;
    typedef ::xsd::cxx::tree::optional< severity_type > severity_optional;
    typedef ::xsd::cxx::tree::traits< severity_type, char > severity_traits;

    const severity_optional&
    severity () const;

    severity_optional&
    severity ();

    void
    severity (const severity_type& x);

    void
    severity (const severity_optional& x);

    void
    severity (::std::auto_ptr< severity_type > p);

    // metric
    //
    typedef ::iodef_2_0::timeimpact_metric_type metric_type;
    typedef ::xsd::cxx::tree::traits< metric_type, char > metric_traits;

    const metric_type&
    metric () const;

    metric_type&
    metric ();

    void
    metric (const metric_type& x);

    void
    metric (::std::auto_ptr< metric_type > p);

    // duration
    //
    typedef ::iodef_2_0::duration_type duration_type;
    typedef ::xsd::cxx::tree::optional< duration_type > duration_optional;
    typedef ::xsd::cxx::tree::traits< duration_type, char > duration_traits;

    const duration_optional&
    duration () const;

    duration_optional&
    duration ();

    void
    duration (const duration_type& x);

    void
    duration (const duration_optional& x);

    void
    duration (::std::auto_ptr< duration_type > p);

    // Constructors.
    //
    TimeImpact (const ::xml_schema::float_&,
                const metric_type&);

    TimeImpact (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    TimeImpact (const TimeImpact& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual TimeImpact*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    TimeImpact&
    operator= (const TimeImpact& x);

    virtual 
    ~TimeImpact ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    severity_optional severity_;
    ::xsd::cxx::tree::one< metric_type > metric_;
    duration_optional duration_;
  };

  class MonetaryImpact: public ::iodef_2_0::PositiveFloatType
  {
    public:
    // severity
    //
    typedef ::iodef_2_0::severity_type severity_type;
    typedef ::xsd::cxx::tree::optional< severity_type > severity_optional;
    typedef ::xsd::cxx::tree::traits< severity_type, char > severity_traits;

    const severity_optional&
    severity () const;

    severity_optional&
    severity ();

    void
    severity (const severity_type& x);

    void
    severity (const severity_optional& x);

    void
    severity (::std::auto_ptr< severity_type > p);

    // currency
    //
    typedef ::xml_schema::string currency_type;
    typedef ::xsd::cxx::tree::optional< currency_type > currency_optional;
    typedef ::xsd::cxx::tree::traits< currency_type, char > currency_traits;

    const currency_optional&
    currency () const;

    currency_optional&
    currency ();

    void
    currency (const currency_type& x);

    void
    currency (const currency_optional& x);

    void
    currency (::std::auto_ptr< currency_type > p);

    // Constructors.
    //
    MonetaryImpact (const ::xml_schema::float_&);

    MonetaryImpact (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    MonetaryImpact (const MonetaryImpact& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual MonetaryImpact*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    MonetaryImpact&
    operator= (const MonetaryImpact& x);

    virtual 
    ~MonetaryImpact ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    severity_optional severity_;
    currency_optional currency_;
  };

  class Confidence: public ::xml_schema::type
  {
    public:
    // rating
    //
    typedef ::iodef_2_0::confidence_rating_type rating_type;
    typedef ::xsd::cxx::tree::traits< rating_type, char > rating_traits;

    const rating_type&
    rating () const;

    rating_type&
    rating ();

    void
    rating (const rating_type& x);

    void
    rating (::std::auto_ptr< rating_type > p);

    // Constructors.
    //
    Confidence (const rating_type&);

    Confidence (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    Confidence (const Confidence& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual Confidence*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Confidence&
    operator= (const Confidence& x);

    virtual 
    ~Confidence ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< rating_type > rating_;
  };

  class EventData: public ::xml_schema::type
  {
    public:
    // Description
    //
    typedef ::iodef_2_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // DetectTime
    //
    typedef ::xml_schema::date_time DetectTime_type;
    typedef ::xsd::cxx::tree::optional< DetectTime_type > DetectTime_optional;
    typedef ::xsd::cxx::tree::traits< DetectTime_type, char > DetectTime_traits;

    const DetectTime_optional&
    DetectTime () const;

    DetectTime_optional&
    DetectTime ();

    void
    DetectTime (const DetectTime_type& x);

    void
    DetectTime (const DetectTime_optional& x);

    void
    DetectTime (::std::auto_ptr< DetectTime_type > p);

    // StartTime
    //
    typedef ::xml_schema::date_time StartTime_type;
    typedef ::xsd::cxx::tree::optional< StartTime_type > StartTime_optional;
    typedef ::xsd::cxx::tree::traits< StartTime_type, char > StartTime_traits;

    const StartTime_optional&
    StartTime () const;

    StartTime_optional&
    StartTime ();

    void
    StartTime (const StartTime_type& x);

    void
    StartTime (const StartTime_optional& x);

    void
    StartTime (::std::auto_ptr< StartTime_type > p);

    // EndTime
    //
    typedef ::xml_schema::date_time EndTime_type;
    typedef ::xsd::cxx::tree::optional< EndTime_type > EndTime_optional;
    typedef ::xsd::cxx::tree::traits< EndTime_type, char > EndTime_traits;

    const EndTime_optional&
    EndTime () const;

    EndTime_optional&
    EndTime ();

    void
    EndTime (const EndTime_type& x);

    void
    EndTime (const EndTime_optional& x);

    void
    EndTime (::std::auto_ptr< EndTime_type > p);

    // RecoveryTime
    //
    typedef ::xml_schema::date_time RecoveryTime_type;
    typedef ::xsd::cxx::tree::optional< RecoveryTime_type > RecoveryTime_optional;
    typedef ::xsd::cxx::tree::traits< RecoveryTime_type, char > RecoveryTime_traits;

    const RecoveryTime_optional&
    RecoveryTime () const;

    RecoveryTime_optional&
    RecoveryTime ();

    void
    RecoveryTime (const RecoveryTime_type& x);

    void
    RecoveryTime (const RecoveryTime_optional& x);

    void
    RecoveryTime (::std::auto_ptr< RecoveryTime_type > p);

    // ReportTime
    //
    typedef ::xml_schema::date_time ReportTime_type;
    typedef ::xsd::cxx::tree::optional< ReportTime_type > ReportTime_optional;
    typedef ::xsd::cxx::tree::traits< ReportTime_type, char > ReportTime_traits;

    const ReportTime_optional&
    ReportTime () const;

    ReportTime_optional&
    ReportTime ();

    void
    ReportTime (const ReportTime_type& x);

    void
    ReportTime (const ReportTime_optional& x);

    void
    ReportTime (::std::auto_ptr< ReportTime_type > p);

    // Contact
    //
    typedef ::iodef_2_0::Contact Contact_type;
    typedef ::xsd::cxx::tree::sequence< Contact_type > Contact_sequence;
    typedef Contact_sequence::iterator Contact_iterator;
    typedef Contact_sequence::const_iterator Contact_const_iterator;
    typedef ::xsd::cxx::tree::traits< Contact_type, char > Contact_traits;

    const Contact_sequence&
    Contact () const;

    Contact_sequence&
    Contact ();

    void
    Contact (const Contact_sequence& s);

    // Discovery
    //
    typedef ::iodef_2_0::Discovery Discovery_type;
    typedef ::xsd::cxx::tree::sequence< Discovery_type > Discovery_sequence;
    typedef Discovery_sequence::iterator Discovery_iterator;
    typedef Discovery_sequence::const_iterator Discovery_const_iterator;
    typedef ::xsd::cxx::tree::traits< Discovery_type, char > Discovery_traits;

    const Discovery_sequence&
    Discovery () const;

    Discovery_sequence&
    Discovery ();

    void
    Discovery (const Discovery_sequence& s);

    // Assessment
    //
    typedef ::iodef_2_0::Assessment Assessment_type;
    typedef ::xsd::cxx::tree::optional< Assessment_type > Assessment_optional;
    typedef ::xsd::cxx::tree::traits< Assessment_type, char > Assessment_traits;

    const Assessment_optional&
    Assessment () const;

    Assessment_optional&
    Assessment ();

    void
    Assessment (const Assessment_type& x);

    void
    Assessment (const Assessment_optional& x);

    void
    Assessment (::std::auto_ptr< Assessment_type > p);

    // Method
    //
    typedef ::iodef_2_0::Method Method_type;
    typedef ::xsd::cxx::tree::sequence< Method_type > Method_sequence;
    typedef Method_sequence::iterator Method_iterator;
    typedef Method_sequence::const_iterator Method_const_iterator;
    typedef ::xsd::cxx::tree::traits< Method_type, char > Method_traits;

    const Method_sequence&
    Method () const;

    Method_sequence&
    Method ();

    void
    Method (const Method_sequence& s);

    // Flow
    //
    typedef ::iodef_2_0::Flow Flow_type;
    typedef ::xsd::cxx::tree::sequence< Flow_type > Flow_sequence;
    typedef Flow_sequence::iterator Flow_iterator;
    typedef Flow_sequence::const_iterator Flow_const_iterator;
    typedef ::xsd::cxx::tree::traits< Flow_type, char > Flow_traits;

    const Flow_sequence&
    Flow () const;

    Flow_sequence&
    Flow ();

    void
    Flow (const Flow_sequence& s);

    // Expectation
    //
    typedef ::iodef_2_0::Expectation Expectation_type;
    typedef ::xsd::cxx::tree::sequence< Expectation_type > Expectation_sequence;
    typedef Expectation_sequence::iterator Expectation_iterator;
    typedef Expectation_sequence::const_iterator Expectation_const_iterator;
    typedef ::xsd::cxx::tree::traits< Expectation_type, char > Expectation_traits;

    const Expectation_sequence&
    Expectation () const;

    Expectation_sequence&
    Expectation ();

    void
    Expectation (const Expectation_sequence& s);

    // Record
    //
    typedef ::iodef_2_0::Record Record_type;
    typedef ::xsd::cxx::tree::optional< Record_type > Record_optional;
    typedef ::xsd::cxx::tree::traits< Record_type, char > Record_traits;

    const Record_optional&
    Record () const;

    Record_optional&
    Record ();

    void
    Record (const Record_type& x);

    void
    Record (const Record_optional& x);

    void
    Record (::std::auto_ptr< Record_type > p);

    // EventData
    //
    typedef ::iodef_2_0::EventData EventData1_type;
    typedef ::xsd::cxx::tree::sequence< EventData1_type > EventData1_sequence;
    typedef EventData1_sequence::iterator EventData1_iterator;
    typedef EventData1_sequence::const_iterator EventData1_const_iterator;
    typedef ::xsd::cxx::tree::traits< EventData1_type, char > EventData1_traits;

    const EventData1_sequence&
    EventData1 () const;

    EventData1_sequence&
    EventData1 ();

    void
    EventData1 (const EventData1_sequence& s);

    // AdditionalData
    //
    typedef ::iodef_2_0::ExtensionType AdditionalData_type;
    typedef ::xsd::cxx::tree::sequence< AdditionalData_type > AdditionalData_sequence;
    typedef AdditionalData_sequence::iterator AdditionalData_iterator;
    typedef AdditionalData_sequence::const_iterator AdditionalData_const_iterator;
    typedef ::xsd::cxx::tree::traits< AdditionalData_type, char > AdditionalData_traits;

    const AdditionalData_sequence&
    AdditionalData () const;

    AdditionalData_sequence&
    AdditionalData ();

    void
    AdditionalData (const AdditionalData_sequence& s);

    // restriction
    //
    typedef ::iodef_2_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_type&
    restriction () const;

    restriction_type&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    static const restriction_type&
    restriction_default_value ();

    // ext-restriction
    //
    typedef ::xml_schema::string ext_restriction_type;
    typedef ::xsd::cxx::tree::optional< ext_restriction_type > ext_restriction_optional;
    typedef ::xsd::cxx::tree::traits< ext_restriction_type, char > ext_restriction_traits;

    const ext_restriction_optional&
    ext_restriction () const;

    ext_restriction_optional&
    ext_restriction ();

    void
    ext_restriction (const ext_restriction_type& x);

    void
    ext_restriction (const ext_restriction_optional& x);

    void
    ext_restriction (::std::auto_ptr< ext_restriction_type > p);

    // observable-id
    //
    typedef ::xml_schema::id observable_id_type;
    typedef ::xsd::cxx::tree::optional< observable_id_type > observable_id_optional;
    typedef ::xsd::cxx::tree::traits< observable_id_type, char > observable_id_traits;

    const observable_id_optional&
    observable_id () const;

    observable_id_optional&
    observable_id ();

    void
    observable_id (const observable_id_type& x);

    void
    observable_id (const observable_id_optional& x);

    void
    observable_id (::std::auto_ptr< observable_id_type > p);

    // Constructors.
    //
    EventData ();

    EventData (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    EventData (const EventData& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual EventData*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    EventData&
    operator= (const EventData& x);

    virtual 
    ~EventData ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Description_sequence Description_;
    DetectTime_optional DetectTime_;
    StartTime_optional StartTime_;
    EndTime_optional EndTime_;
    RecoveryTime_optional RecoveryTime_;
    ReportTime_optional ReportTime_;
    Contact_sequence Contact_;
    Discovery_sequence Discovery_;
    Assessment_optional Assessment_;
    Method_sequence Method_;
    Flow_sequence Flow_;
    Expectation_sequence Expectation_;
    Record_optional Record_;
    EventData1_sequence EventData1_;
    AdditionalData_sequence AdditionalData_;
    ::xsd::cxx::tree::one< restriction_type > restriction_;
    static const restriction_type restriction_default_value_;
    ext_restriction_optional ext_restriction_;
    observable_id_optional observable_id_;
  };

  class Flow: public ::xml_schema::type
  {
    public:
    // System
    //
    typedef ::iodef_2_0::System System_type;
    typedef ::xsd::cxx::tree::sequence< System_type > System_sequence;
    typedef System_sequence::iterator System_iterator;
    typedef System_sequence::const_iterator System_const_iterator;
    typedef ::xsd::cxx::tree::traits< System_type, char > System_traits;

    const System_sequence&
    System () const;

    System_sequence&
    System ();

    void
    System (const System_sequence& s);

    // Constructors.
    //
    Flow ();

    Flow (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    Flow (const Flow& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual Flow*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Flow&
    operator= (const Flow& x);

    virtual 
    ~Flow ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    System_sequence System_;
  };

  class System: public ::xml_schema::type
  {
    public:
    // Node
    //
    typedef ::iodef_2_0::Node Node_type;
    typedef ::xsd::cxx::tree::sequence< Node_type > Node_sequence;
    typedef Node_sequence::iterator Node_iterator;
    typedef Node_sequence::const_iterator Node_const_iterator;
    typedef ::xsd::cxx::tree::traits< Node_type, char > Node_traits;

    const Node_sequence&
    Node () const;

    Node_sequence&
    Node ();

    void
    Node (const Node_sequence& s);

    // NodeRole
    //
    typedef ::iodef_2_0::NodeRole NodeRole_type;
    typedef ::xsd::cxx::tree::sequence< NodeRole_type > NodeRole_sequence;
    typedef NodeRole_sequence::iterator NodeRole_iterator;
    typedef NodeRole_sequence::const_iterator NodeRole_const_iterator;
    typedef ::xsd::cxx::tree::traits< NodeRole_type, char > NodeRole_traits;

    const NodeRole_sequence&
    NodeRole () const;

    NodeRole_sequence&
    NodeRole ();

    void
    NodeRole (const NodeRole_sequence& s);

    // Service
    //
    typedef ::iodef_2_0::Service Service_type;
    typedef ::xsd::cxx::tree::sequence< Service_type > Service_sequence;
    typedef Service_sequence::iterator Service_iterator;
    typedef Service_sequence::const_iterator Service_const_iterator;
    typedef ::xsd::cxx::tree::traits< Service_type, char > Service_traits;

    const Service_sequence&
    Service () const;

    Service_sequence&
    Service ();

    void
    Service (const Service_sequence& s);

    // OperatingSystem
    //
    typedef ::iodef_2_0::SoftwareType OperatingSystem_type;
    typedef ::xsd::cxx::tree::sequence< OperatingSystem_type > OperatingSystem_sequence;
    typedef OperatingSystem_sequence::iterator OperatingSystem_iterator;
    typedef OperatingSystem_sequence::const_iterator OperatingSystem_const_iterator;
    typedef ::xsd::cxx::tree::traits< OperatingSystem_type, char > OperatingSystem_traits;

    const OperatingSystem_sequence&
    OperatingSystem () const;

    OperatingSystem_sequence&
    OperatingSystem ();

    void
    OperatingSystem (const OperatingSystem_sequence& s);

    // Counter
    //
    typedef ::iodef_2_0::Counter Counter_type;
    typedef ::xsd::cxx::tree::sequence< Counter_type > Counter_sequence;
    typedef Counter_sequence::iterator Counter_iterator;
    typedef Counter_sequence::const_iterator Counter_const_iterator;
    typedef ::xsd::cxx::tree::traits< Counter_type, char > Counter_traits;

    const Counter_sequence&
    Counter () const;

    Counter_sequence&
    Counter ();

    void
    Counter (const Counter_sequence& s);

    // AssetID
    //
    typedef ::xml_schema::string AssetID_type;
    typedef ::xsd::cxx::tree::sequence< AssetID_type > AssetID_sequence;
    typedef AssetID_sequence::iterator AssetID_iterator;
    typedef AssetID_sequence::const_iterator AssetID_const_iterator;
    typedef ::xsd::cxx::tree::traits< AssetID_type, char > AssetID_traits;

    const AssetID_sequence&
    AssetID () const;

    AssetID_sequence&
    AssetID ();

    void
    AssetID (const AssetID_sequence& s);

    // Description
    //
    typedef ::iodef_2_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // AdditionalData
    //
    typedef ::iodef_2_0::ExtensionType AdditionalData_type;
    typedef ::xsd::cxx::tree::sequence< AdditionalData_type > AdditionalData_sequence;
    typedef AdditionalData_sequence::iterator AdditionalData_iterator;
    typedef AdditionalData_sequence::const_iterator AdditionalData_const_iterator;
    typedef ::xsd::cxx::tree::traits< AdditionalData_type, char > AdditionalData_traits;

    const AdditionalData_sequence&
    AdditionalData () const;

    AdditionalData_sequence&
    AdditionalData ();

    void
    AdditionalData (const AdditionalData_sequence& s);

    // restriction
    //
    typedef ::iodef_2_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // ext-restriction
    //
    typedef ::xml_schema::string ext_restriction_type;
    typedef ::xsd::cxx::tree::optional< ext_restriction_type > ext_restriction_optional;
    typedef ::xsd::cxx::tree::traits< ext_restriction_type, char > ext_restriction_traits;

    const ext_restriction_optional&
    ext_restriction () const;

    ext_restriction_optional&
    ext_restriction ();

    void
    ext_restriction (const ext_restriction_type& x);

    void
    ext_restriction (const ext_restriction_optional& x);

    void
    ext_restriction (::std::auto_ptr< ext_restriction_type > p);

    // category
    //
    typedef ::iodef_2_0::system_category_type category_type;
    typedef ::xsd::cxx::tree::optional< category_type > category_optional;
    typedef ::xsd::cxx::tree::traits< category_type, char > category_traits;

    const category_optional&
    category () const;

    category_optional&
    category ();

    void
    category (const category_type& x);

    void
    category (const category_optional& x);

    void
    category (::std::auto_ptr< category_type > p);

    // ext-category
    //
    typedef ::xml_schema::string ext_category_type;
    typedef ::xsd::cxx::tree::optional< ext_category_type > ext_category_optional;
    typedef ::xsd::cxx::tree::traits< ext_category_type, char > ext_category_traits;

    const ext_category_optional&
    ext_category () const;

    ext_category_optional&
    ext_category ();

    void
    ext_category (const ext_category_type& x);

    void
    ext_category (const ext_category_optional& x);

    void
    ext_category (::std::auto_ptr< ext_category_type > p);

    // interface
    //
    typedef ::xml_schema::string interface_type;
    typedef ::xsd::cxx::tree::optional< interface_type > interface_optional;
    typedef ::xsd::cxx::tree::traits< interface_type, char > interface_traits;

    const interface_optional&
    interface () const;

    interface_optional&
    interface ();

    void
    interface (const interface_type& x);

    void
    interface (const interface_optional& x);

    void
    interface (::std::auto_ptr< interface_type > p);

    // spoofed
    //
    typedef ::iodef_2_0::yes_no_unknown_type spoofed_type;
    typedef ::xsd::cxx::tree::traits< spoofed_type, char > spoofed_traits;

    const spoofed_type&
    spoofed () const;

    spoofed_type&
    spoofed ();

    void
    spoofed (const spoofed_type& x);

    void
    spoofed (::std::auto_ptr< spoofed_type > p);

    static const spoofed_type&
    spoofed_default_value ();

    // virtual
    //
    typedef ::iodef_2_0::yes_no_unknown_type virtual_type;
    typedef ::xsd::cxx::tree::traits< virtual_type, char > virtual_traits;

    const virtual_type&
    virtual_ () const;

    virtual_type&
    virtual_ ();

    void
    virtual_ (const virtual_type& x);

    void
    virtual_ (::std::auto_ptr< virtual_type > p);

    static const virtual_type&
    virtual_default_value ();

    // ownership
    //
    typedef ::iodef_2_0::system_ownership_type ownership_type;
    typedef ::xsd::cxx::tree::optional< ownership_type > ownership_optional;
    typedef ::xsd::cxx::tree::traits< ownership_type, char > ownership_traits;

    const ownership_optional&
    ownership () const;

    ownership_optional&
    ownership ();

    void
    ownership (const ownership_type& x);

    void
    ownership (const ownership_optional& x);

    void
    ownership (::std::auto_ptr< ownership_type > p);

    // ext-ownership
    //
    typedef ::xml_schema::string ext_ownership_type;
    typedef ::xsd::cxx::tree::optional< ext_ownership_type > ext_ownership_optional;
    typedef ::xsd::cxx::tree::traits< ext_ownership_type, char > ext_ownership_traits;

    const ext_ownership_optional&
    ext_ownership () const;

    ext_ownership_optional&
    ext_ownership ();

    void
    ext_ownership (const ext_ownership_type& x);

    void
    ext_ownership (const ext_ownership_optional& x);

    void
    ext_ownership (::std::auto_ptr< ext_ownership_type > p);

    // Constructors.
    //
    System ();

    System (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    System (const System& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual System*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    System&
    operator= (const System& x);

    virtual 
    ~System ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Node_sequence Node_;
    NodeRole_sequence NodeRole_;
    Service_sequence Service_;
    OperatingSystem_sequence OperatingSystem_;
    Counter_sequence Counter_;
    AssetID_sequence AssetID_;
    Description_sequence Description_;
    AdditionalData_sequence AdditionalData_;
    restriction_optional restriction_;
    ext_restriction_optional ext_restriction_;
    category_optional category_;
    ext_category_optional ext_category_;
    interface_optional interface_;
    ::xsd::cxx::tree::one< spoofed_type > spoofed_;
    static const spoofed_type spoofed_default_value_;
    ::xsd::cxx::tree::one< virtual_type > virtual__;
    static const virtual_type virtual__default_value_;
    ownership_optional ownership_;
    ext_ownership_optional ext_ownership_;
  };

  class Node: public ::xml_schema::type
  {
    public:
    // DomainData
    //
    typedef ::iodef_2_0::DomainData DomainData_type;
    typedef ::xsd::cxx::tree::sequence< DomainData_type > DomainData_sequence;
    typedef DomainData_sequence::iterator DomainData_iterator;
    typedef DomainData_sequence::const_iterator DomainData_const_iterator;
    typedef ::xsd::cxx::tree::traits< DomainData_type, char > DomainData_traits;

    const DomainData_sequence&
    DomainData () const;

    DomainData_sequence&
    DomainData ();

    void
    DomainData (const DomainData_sequence& s);

    // Address
    //
    typedef ::iodef_2_0::Address Address_type;
    typedef ::xsd::cxx::tree::sequence< Address_type > Address_sequence;
    typedef Address_sequence::iterator Address_iterator;
    typedef Address_sequence::const_iterator Address_const_iterator;
    typedef ::xsd::cxx::tree::traits< Address_type, char > Address_traits;

    const Address_sequence&
    Address () const;

    Address_sequence&
    Address ();

    void
    Address (const Address_sequence& s);

    // PostalAddress
    //
    typedef ::iodef_2_0::PostalAddress PostalAddress_type;
    typedef ::xsd::cxx::tree::optional< PostalAddress_type > PostalAddress_optional;
    typedef ::xsd::cxx::tree::traits< PostalAddress_type, char > PostalAddress_traits;

    const PostalAddress_optional&
    PostalAddress () const;

    PostalAddress_optional&
    PostalAddress ();

    void
    PostalAddress (const PostalAddress_type& x);

    void
    PostalAddress (const PostalAddress_optional& x);

    void
    PostalAddress (::std::auto_ptr< PostalAddress_type > p);

    // Location
    //
    typedef ::iodef_2_0::MLStringType Location_type;
    typedef ::xsd::cxx::tree::sequence< Location_type > Location_sequence;
    typedef Location_sequence::iterator Location_iterator;
    typedef Location_sequence::const_iterator Location_const_iterator;
    typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

    const Location_sequence&
    Location () const;

    Location_sequence&
    Location ();

    void
    Location (const Location_sequence& s);

    // NodeRole
    //
    typedef ::iodef_2_0::NodeRole NodeRole_type;
    typedef ::xsd::cxx::tree::sequence< NodeRole_type > NodeRole_sequence;
    typedef NodeRole_sequence::iterator NodeRole_iterator;
    typedef NodeRole_sequence::const_iterator NodeRole_const_iterator;
    typedef ::xsd::cxx::tree::traits< NodeRole_type, char > NodeRole_traits;

    const NodeRole_sequence&
    NodeRole () const;

    NodeRole_sequence&
    NodeRole ();

    void
    NodeRole (const NodeRole_sequence& s);

    // Counter
    //
    typedef ::iodef_2_0::Counter Counter_type;
    typedef ::xsd::cxx::tree::sequence< Counter_type > Counter_sequence;
    typedef Counter_sequence::iterator Counter_iterator;
    typedef Counter_sequence::const_iterator Counter_const_iterator;
    typedef ::xsd::cxx::tree::traits< Counter_type, char > Counter_traits;

    const Counter_sequence&
    Counter () const;

    Counter_sequence&
    Counter ();

    void
    Counter (const Counter_sequence& s);

    // Constructors.
    //
    Node ();

    Node (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    Node (const Node& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual Node*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Node&
    operator= (const Node& x);

    virtual 
    ~Node ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    DomainData_sequence DomainData_;
    Address_sequence Address_;
    PostalAddress_optional PostalAddress_;
    Location_sequence Location_;
    NodeRole_sequence NodeRole_;
    Counter_sequence Counter_;
  };

  class Address: public ::xml_schema::string
  {
    public:
    // category
    //
    typedef ::iodef_2_0::address_category_type category_type;
    typedef ::xsd::cxx::tree::traits< category_type, char > category_traits;

    const category_type&
    category () const;

    category_type&
    category ();

    void
    category (const category_type& x);

    void
    category (::std::auto_ptr< category_type > p);

    static const category_type&
    category_default_value ();

    // ext-category
    //
    typedef ::xml_schema::string ext_category_type;
    typedef ::xsd::cxx::tree::optional< ext_category_type > ext_category_optional;
    typedef ::xsd::cxx::tree::traits< ext_category_type, char > ext_category_traits;

    const ext_category_optional&
    ext_category () const;

    ext_category_optional&
    ext_category ();

    void
    ext_category (const ext_category_type& x);

    void
    ext_category (const ext_category_optional& x);

    void
    ext_category (::std::auto_ptr< ext_category_type > p);

    // vlan-name
    //
    typedef ::xml_schema::string vlan_name_type;
    typedef ::xsd::cxx::tree::optional< vlan_name_type > vlan_name_optional;
    typedef ::xsd::cxx::tree::traits< vlan_name_type, char > vlan_name_traits;

    const vlan_name_optional&
    vlan_name () const;

    vlan_name_optional&
    vlan_name ();

    void
    vlan_name (const vlan_name_type& x);

    void
    vlan_name (const vlan_name_optional& x);

    void
    vlan_name (::std::auto_ptr< vlan_name_type > p);

    // vlan-num
    //
    typedef ::xml_schema::integer vlan_num_type;
    typedef ::xsd::cxx::tree::optional< vlan_num_type > vlan_num_optional;
    typedef ::xsd::cxx::tree::traits< vlan_num_type, char > vlan_num_traits;

    const vlan_num_optional&
    vlan_num () const;

    vlan_num_optional&
    vlan_num ();

    void
    vlan_num (const vlan_num_type& x);

    void
    vlan_num (const vlan_num_optional& x);

    // observable-id
    //
    typedef ::xml_schema::id observable_id_type;
    typedef ::xsd::cxx::tree::optional< observable_id_type > observable_id_optional;
    typedef ::xsd::cxx::tree::traits< observable_id_type, char > observable_id_traits;

    const observable_id_optional&
    observable_id () const;

    observable_id_optional&
    observable_id ();

    void
    observable_id (const observable_id_type& x);

    void
    observable_id (const observable_id_optional& x);

    void
    observable_id (::std::auto_ptr< observable_id_type > p);

    // Constructors.
    //
    Address ();

    Address (const char*);

    Address (const ::std::string&);

    Address (const ::xml_schema::string&);

    Address (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Address (const Address& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Address*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Address&
    operator= (const Address& x);

    virtual 
    ~Address ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< category_type > category_;
    static const category_type category_default_value_;
    ext_category_optional ext_category_;
    vlan_name_optional vlan_name_;
    vlan_num_optional vlan_num_;
    observable_id_optional observable_id_;
  };

  class NodeRole: public ::iodef_2_0::MLStringType
  {
    public:
    // category
    //
    typedef ::iodef_2_0::noderole_category_type category_type;
    typedef ::xsd::cxx::tree::traits< category_type, char > category_traits;

    const category_type&
    category () const;

    category_type&
    category ();

    void
    category (const category_type& x);

    void
    category (::std::auto_ptr< category_type > p);

    // ext-category
    //
    typedef ::xml_schema::string ext_category_type;
    typedef ::xsd::cxx::tree::optional< ext_category_type > ext_category_optional;
    typedef ::xsd::cxx::tree::traits< ext_category_type, char > ext_category_traits;

    const ext_category_optional&
    ext_category () const;

    ext_category_optional&
    ext_category ();

    void
    ext_category (const ext_category_type& x);

    void
    ext_category (const ext_category_optional& x);

    void
    ext_category (::std::auto_ptr< ext_category_type > p);

    // Constructors.
    //
    NodeRole (const category_type&);

    NodeRole (const char*,
              const category_type&);

    NodeRole (const ::std::string&,
              const category_type&);

    NodeRole (const ::xml_schema::string&,
              const category_type&);

    NodeRole (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    NodeRole (const NodeRole& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual NodeRole*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    NodeRole&
    operator= (const NodeRole& x);

    virtual 
    ~NodeRole ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< category_type > category_;
    ext_category_optional ext_category_;
  };

  class Service: public ::xml_schema::type
  {
    public:
    // ServiceName
    //
    typedef ::iodef_2_0::ServiceName ServiceName_type;
    typedef ::xsd::cxx::tree::optional< ServiceName_type > ServiceName_optional;
    typedef ::xsd::cxx::tree::traits< ServiceName_type, char > ServiceName_traits;

    const ServiceName_optional&
    ServiceName () const;

    ServiceName_optional&
    ServiceName ();

    void
    ServiceName (const ServiceName_type& x);

    void
    ServiceName (const ServiceName_optional& x);

    void
    ServiceName (::std::auto_ptr< ServiceName_type > p);

    // Port
    //
    typedef ::xml_schema::integer Port_type;
    typedef ::xsd::cxx::tree::optional< Port_type > Port_optional;
    typedef ::xsd::cxx::tree::traits< Port_type, char > Port_traits;

    const Port_optional&
    Port () const;

    Port_optional&
    Port ();

    void
    Port (const Port_type& x);

    void
    Port (const Port_optional& x);

    // Portlist
    //
    typedef ::iodef_2_0::PortlistType Portlist_type;
    typedef ::xsd::cxx::tree::optional< Portlist_type > Portlist_optional;
    typedef ::xsd::cxx::tree::traits< Portlist_type, char > Portlist_traits;

    const Portlist_optional&
    Portlist () const;

    Portlist_optional&
    Portlist ();

    void
    Portlist (const Portlist_type& x);

    void
    Portlist (const Portlist_optional& x);

    void
    Portlist (::std::auto_ptr< Portlist_type > p);

    // ProtoType
    //
    typedef ::xml_schema::integer ProtoType_type;
    typedef ::xsd::cxx::tree::optional< ProtoType_type > ProtoType_optional;
    typedef ::xsd::cxx::tree::traits< ProtoType_type, char > ProtoType_traits;

    const ProtoType_optional&
    ProtoType () const;

    ProtoType_optional&
    ProtoType ();

    void
    ProtoType (const ProtoType_type& x);

    void
    ProtoType (const ProtoType_optional& x);

    // ProtoCode
    //
    typedef ::xml_schema::integer ProtoCode_type;
    typedef ::xsd::cxx::tree::optional< ProtoCode_type > ProtoCode_optional;
    typedef ::xsd::cxx::tree::traits< ProtoCode_type, char > ProtoCode_traits;

    const ProtoCode_optional&
    ProtoCode () const;

    ProtoCode_optional&
    ProtoCode ();

    void
    ProtoCode (const ProtoCode_type& x);

    void
    ProtoCode (const ProtoCode_optional& x);

    // ProtoField
    //
    typedef ::xml_schema::integer ProtoField_type;
    typedef ::xsd::cxx::tree::optional< ProtoField_type > ProtoField_optional;
    typedef ::xsd::cxx::tree::traits< ProtoField_type, char > ProtoField_traits;

    const ProtoField_optional&
    ProtoField () const;

    ProtoField_optional&
    ProtoField ();

    void
    ProtoField (const ProtoField_type& x);

    void
    ProtoField (const ProtoField_optional& x);

    // ApplicationHeader
    //
    typedef ::iodef_2_0::ApplicationHeaderType ApplicationHeader_type;
    typedef ::xsd::cxx::tree::sequence< ApplicationHeader_type > ApplicationHeader_sequence;
    typedef ApplicationHeader_sequence::iterator ApplicationHeader_iterator;
    typedef ApplicationHeader_sequence::const_iterator ApplicationHeader_const_iterator;
    typedef ::xsd::cxx::tree::traits< ApplicationHeader_type, char > ApplicationHeader_traits;

    const ApplicationHeader_sequence&
    ApplicationHeader () const;

    ApplicationHeader_sequence&
    ApplicationHeader ();

    void
    ApplicationHeader (const ApplicationHeader_sequence& s);

    // EmailData
    //
    typedef ::iodef_2_0::EmailData EmailData_type;
    typedef ::xsd::cxx::tree::optional< EmailData_type > EmailData_optional;
    typedef ::xsd::cxx::tree::traits< EmailData_type, char > EmailData_traits;

    const EmailData_optional&
    EmailData () const;

    EmailData_optional&
    EmailData ();

    void
    EmailData (const EmailData_type& x);

    void
    EmailData (const EmailData_optional& x);

    void
    EmailData (::std::auto_ptr< EmailData_type > p);

    // Application
    //
    typedef ::iodef_2_0::SoftwareType Application_type;
    typedef ::xsd::cxx::tree::optional< Application_type > Application_optional;
    typedef ::xsd::cxx::tree::traits< Application_type, char > Application_traits;

    const Application_optional&
    Application () const;

    Application_optional&
    Application ();

    void
    Application (const Application_type& x);

    void
    Application (const Application_optional& x);

    void
    Application (::std::auto_ptr< Application_type > p);

    // ip-protocol
    //
    typedef ::xml_schema::integer ip_protocol_type;
    typedef ::xsd::cxx::tree::traits< ip_protocol_type, char > ip_protocol_traits;

    const ip_protocol_type&
    ip_protocol () const;

    ip_protocol_type&
    ip_protocol ();

    void
    ip_protocol (const ip_protocol_type& x);

    // observable-id
    //
    typedef ::xml_schema::id observable_id_type;
    typedef ::xsd::cxx::tree::optional< observable_id_type > observable_id_optional;
    typedef ::xsd::cxx::tree::traits< observable_id_type, char > observable_id_traits;

    const observable_id_optional&
    observable_id () const;

    observable_id_optional&
    observable_id ();

    void
    observable_id (const observable_id_type& x);

    void
    observable_id (const observable_id_optional& x);

    void
    observable_id (::std::auto_ptr< observable_id_type > p);

    // Constructors.
    //
    Service (const ip_protocol_type&);

    Service (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Service (const Service& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Service*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Service&
    operator= (const Service& x);

    virtual 
    ~Service ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ServiceName_optional ServiceName_;
    Port_optional Port_;
    Portlist_optional Portlist_;
    ProtoType_optional ProtoType_;
    ProtoCode_optional ProtoCode_;
    ProtoField_optional ProtoField_;
    ApplicationHeader_sequence ApplicationHeader_;
    EmailData_optional EmailData_;
    Application_optional Application_;
    ::xsd::cxx::tree::one< ip_protocol_type > ip_protocol_;
    observable_id_optional observable_id_;
  };

  class ServiceName: public ::xml_schema::type
  {
    public:
    // IANAService
    //
    typedef ::xml_schema::string IANAService_type;
    typedef ::xsd::cxx::tree::traits< IANAService_type, char > IANAService_traits;

    const IANAService_type&
    IANAService () const;

    IANAService_type&
    IANAService ();

    void
    IANAService (const IANAService_type& x);

    void
    IANAService (::std::auto_ptr< IANAService_type > p);

    // URL
    //
    typedef ::xml_schema::uri URL_type;
    typedef ::xsd::cxx::tree::sequence< URL_type > URL_sequence;
    typedef URL_sequence::iterator URL_iterator;
    typedef URL_sequence::const_iterator URL_const_iterator;
    typedef ::xsd::cxx::tree::traits< URL_type, char > URL_traits;

    const URL_sequence&
    URL () const;

    URL_sequence&
    URL ();

    void
    URL (const URL_sequence& s);

    // Description
    //
    typedef ::iodef_2_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // Constructors.
    //
    ServiceName (const IANAService_type&);

    ServiceName (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    ServiceName (const ServiceName& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual ServiceName*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    ServiceName&
    operator= (const ServiceName& x);

    virtual 
    ~ServiceName ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< IANAService_type > IANAService_;
    URL_sequence URL_;
    Description_sequence Description_;
  };

  class Counter: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >
  {
    public:
    // type
    //
    typedef ::iodef_2_0::counter_type_type type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::auto_ptr< type_type > p);

    // unit
    //
    typedef ::iodef_2_0::counter_unit_type unit_type;
    typedef ::xsd::cxx::tree::traits< unit_type, char > unit_traits;

    const unit_type&
    unit () const;

    unit_type&
    unit ();

    void
    unit (const unit_type& x);

    void
    unit (::std::auto_ptr< unit_type > p);

    // ext-type
    //
    typedef ::xml_schema::string ext_type_type;
    typedef ::xsd::cxx::tree::optional< ext_type_type > ext_type_optional;
    typedef ::xsd::cxx::tree::traits< ext_type_type, char > ext_type_traits;

    const ext_type_optional&
    ext_type () const;

    ext_type_optional&
    ext_type ();

    void
    ext_type (const ext_type_type& x);

    void
    ext_type (const ext_type_optional& x);

    void
    ext_type (::std::auto_ptr< ext_type_type > p);

    // meaning
    //
    typedef ::xml_schema::string meaning_type;
    typedef ::xsd::cxx::tree::optional< meaning_type > meaning_optional;
    typedef ::xsd::cxx::tree::traits< meaning_type, char > meaning_traits;

    const meaning_optional&
    meaning () const;

    meaning_optional&
    meaning ();

    void
    meaning (const meaning_type& x);

    void
    meaning (const meaning_optional& x);

    void
    meaning (::std::auto_ptr< meaning_type > p);

    // duration
    //
    typedef ::iodef_2_0::duration_type duration_type;
    typedef ::xsd::cxx::tree::optional< duration_type > duration_optional;
    typedef ::xsd::cxx::tree::traits< duration_type, char > duration_traits;

    const duration_optional&
    duration () const;

    duration_optional&
    duration ();

    void
    duration (const duration_type& x);

    void
    duration (const duration_optional& x);

    void
    duration (::std::auto_ptr< duration_type > p);

    // ext-duration
    //
    typedef ::xml_schema::string ext_duration_type;
    typedef ::xsd::cxx::tree::optional< ext_duration_type > ext_duration_optional;
    typedef ::xsd::cxx::tree::traits< ext_duration_type, char > ext_duration_traits;

    const ext_duration_optional&
    ext_duration () const;

    ext_duration_optional&
    ext_duration ();

    void
    ext_duration (const ext_duration_type& x);

    void
    ext_duration (const ext_duration_optional& x);

    void
    ext_duration (::std::auto_ptr< ext_duration_type > p);

    // Constructors.
    //
    Counter (const ::xml_schema::double_&,
             const type_type&,
             const unit_type&);

    Counter (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Counter (const Counter& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Counter*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Counter&
    operator= (const Counter& x);

    virtual 
    ~Counter ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    ::xsd::cxx::tree::one< unit_type > unit_;
    ext_type_optional ext_type_;
    meaning_optional meaning_;
    duration_optional duration_;
    ext_duration_optional ext_duration_;
  };

  class EmailData: public ::xml_schema::type
  {
    public:
    // EmailFrom
    //
    typedef ::iodef_2_0::MLStringType EmailFrom_type;
    typedef ::xsd::cxx::tree::optional< EmailFrom_type > EmailFrom_optional;
    typedef ::xsd::cxx::tree::traits< EmailFrom_type, char > EmailFrom_traits;

    const EmailFrom_optional&
    EmailFrom () const;

    EmailFrom_optional&
    EmailFrom ();

    void
    EmailFrom (const EmailFrom_type& x);

    void
    EmailFrom (const EmailFrom_optional& x);

    void
    EmailFrom (::std::auto_ptr< EmailFrom_type > p);

    // EmailSubject
    //
    typedef ::iodef_2_0::MLStringType EmailSubject_type;
    typedef ::xsd::cxx::tree::optional< EmailSubject_type > EmailSubject_optional;
    typedef ::xsd::cxx::tree::traits< EmailSubject_type, char > EmailSubject_traits;

    const EmailSubject_optional&
    EmailSubject () const;

    EmailSubject_optional&
    EmailSubject ();

    void
    EmailSubject (const EmailSubject_type& x);

    void
    EmailSubject (const EmailSubject_optional& x);

    void
    EmailSubject (::std::auto_ptr< EmailSubject_type > p);

    // EmailX-Mailer
    //
    typedef ::iodef_2_0::MLStringType EmailX_Mailer_type;
    typedef ::xsd::cxx::tree::optional< EmailX_Mailer_type > EmailX_Mailer_optional;
    typedef ::xsd::cxx::tree::traits< EmailX_Mailer_type, char > EmailX_Mailer_traits;

    const EmailX_Mailer_optional&
    EmailX_Mailer () const;

    EmailX_Mailer_optional&
    EmailX_Mailer ();

    void
    EmailX_Mailer (const EmailX_Mailer_type& x);

    void
    EmailX_Mailer (const EmailX_Mailer_optional& x);

    void
    EmailX_Mailer (::std::auto_ptr< EmailX_Mailer_type > p);

    // EmailHeaderField
    //
    typedef ::iodef_2_0::ApplicationHeaderType EmailHeaderField_type;
    typedef ::xsd::cxx::tree::optional< EmailHeaderField_type > EmailHeaderField_optional;
    typedef ::xsd::cxx::tree::traits< EmailHeaderField_type, char > EmailHeaderField_traits;

    const EmailHeaderField_optional&
    EmailHeaderField () const;

    EmailHeaderField_optional&
    EmailHeaderField ();

    void
    EmailHeaderField (const EmailHeaderField_type& x);

    void
    EmailHeaderField (const EmailHeaderField_optional& x);

    void
    EmailHeaderField (::std::auto_ptr< EmailHeaderField_type > p);

    // HashData
    //
    typedef ::iodef_2_0::HashData HashData_type;
    typedef ::xsd::cxx::tree::optional< HashData_type > HashData_optional;
    typedef ::xsd::cxx::tree::traits< HashData_type, char > HashData_traits;

    const HashData_optional&
    HashData () const;

    HashData_optional&
    HashData ();

    void
    HashData (const HashData_type& x);

    void
    HashData (const HashData_optional& x);

    void
    HashData (::std::auto_ptr< HashData_type > p);

    // SignatureData
    //
    typedef ::iodef_2_0::SignatureData SignatureData_type;
    typedef ::xsd::cxx::tree::optional< SignatureData_type > SignatureData_optional;
    typedef ::xsd::cxx::tree::traits< SignatureData_type, char > SignatureData_traits;

    const SignatureData_optional&
    SignatureData () const;

    SignatureData_optional&
    SignatureData ();

    void
    SignatureData (const SignatureData_type& x);

    void
    SignatureData (const SignatureData_optional& x);

    void
    SignatureData (::std::auto_ptr< SignatureData_type > p);

    // observable-id
    //
    typedef ::xml_schema::id observable_id_type;
    typedef ::xsd::cxx::tree::optional< observable_id_type > observable_id_optional;
    typedef ::xsd::cxx::tree::traits< observable_id_type, char > observable_id_traits;

    const observable_id_optional&
    observable_id () const;

    observable_id_optional&
    observable_id ();

    void
    observable_id (const observable_id_type& x);

    void
    observable_id (const observable_id_optional& x);

    void
    observable_id (::std::auto_ptr< observable_id_type > p);

    // Constructors.
    //
    EmailData ();

    EmailData (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    EmailData (const EmailData& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual EmailData*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    EmailData&
    operator= (const EmailData& x);

    virtual 
    ~EmailData ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    EmailFrom_optional EmailFrom_;
    EmailSubject_optional EmailSubject_;
    EmailX_Mailer_optional EmailX_Mailer_;
    EmailHeaderField_optional EmailHeaderField_;
    HashData_optional HashData_;
    SignatureData_optional SignatureData_;
    observable_id_optional observable_id_;
  };

  class DomainData: public ::xml_schema::type
  {
    public:
    // Name
    //
    typedef ::xml_schema::string Name_type;
    typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

    const Name_type&
    Name () const;

    Name_type&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (::std::auto_ptr< Name_type > p);

    // DateDomainWasChecked
    //
    typedef ::xml_schema::date_time DateDomainWasChecked_type;
    typedef ::xsd::cxx::tree::optional< DateDomainWasChecked_type > DateDomainWasChecked_optional;
    typedef ::xsd::cxx::tree::traits< DateDomainWasChecked_type, char > DateDomainWasChecked_traits;

    const DateDomainWasChecked_optional&
    DateDomainWasChecked () const;

    DateDomainWasChecked_optional&
    DateDomainWasChecked ();

    void
    DateDomainWasChecked (const DateDomainWasChecked_type& x);

    void
    DateDomainWasChecked (const DateDomainWasChecked_optional& x);

    void
    DateDomainWasChecked (::std::auto_ptr< DateDomainWasChecked_type > p);

    // RegistrationDate
    //
    typedef ::xml_schema::date_time RegistrationDate_type;
    typedef ::xsd::cxx::tree::optional< RegistrationDate_type > RegistrationDate_optional;
    typedef ::xsd::cxx::tree::traits< RegistrationDate_type, char > RegistrationDate_traits;

    const RegistrationDate_optional&
    RegistrationDate () const;

    RegistrationDate_optional&
    RegistrationDate ();

    void
    RegistrationDate (const RegistrationDate_type& x);

    void
    RegistrationDate (const RegistrationDate_optional& x);

    void
    RegistrationDate (::std::auto_ptr< RegistrationDate_type > p);

    // ExpirationDate
    //
    typedef ::xml_schema::date_time ExpirationDate_type;
    typedef ::xsd::cxx::tree::optional< ExpirationDate_type > ExpirationDate_optional;
    typedef ::xsd::cxx::tree::traits< ExpirationDate_type, char > ExpirationDate_traits;

    const ExpirationDate_optional&
    ExpirationDate () const;

    ExpirationDate_optional&
    ExpirationDate ();

    void
    ExpirationDate (const ExpirationDate_type& x);

    void
    ExpirationDate (const ExpirationDate_optional& x);

    void
    ExpirationDate (::std::auto_ptr< ExpirationDate_type > p);

    // RelatedDNS
    //
    typedef ::iodef_2_0::RelatedDNS RelatedDNS_type;
    typedef ::xsd::cxx::tree::sequence< RelatedDNS_type > RelatedDNS_sequence;
    typedef RelatedDNS_sequence::iterator RelatedDNS_iterator;
    typedef RelatedDNS_sequence::const_iterator RelatedDNS_const_iterator;
    typedef ::xsd::cxx::tree::traits< RelatedDNS_type, char > RelatedDNS_traits;

    const RelatedDNS_sequence&
    RelatedDNS () const;

    RelatedDNS_sequence&
    RelatedDNS ();

    void
    RelatedDNS (const RelatedDNS_sequence& s);

    // Nameservers
    //
    typedef ::iodef_2_0::Nameservers Nameservers_type;
    typedef ::xsd::cxx::tree::sequence< Nameservers_type > Nameservers_sequence;
    typedef Nameservers_sequence::iterator Nameservers_iterator;
    typedef Nameservers_sequence::const_iterator Nameservers_const_iterator;
    typedef ::xsd::cxx::tree::traits< Nameservers_type, char > Nameservers_traits;

    const Nameservers_sequence&
    Nameservers () const;

    Nameservers_sequence&
    Nameservers ();

    void
    Nameservers (const Nameservers_sequence& s);

    // DomainContacts
    //
    typedef ::iodef_2_0::DomainContacts DomainContacts_type;
    typedef ::xsd::cxx::tree::optional< DomainContacts_type > DomainContacts_optional;
    typedef ::xsd::cxx::tree::traits< DomainContacts_type, char > DomainContacts_traits;

    const DomainContacts_optional&
    DomainContacts () const;

    DomainContacts_optional&
    DomainContacts ();

    void
    DomainContacts (const DomainContacts_type& x);

    void
    DomainContacts (const DomainContacts_optional& x);

    void
    DomainContacts (::std::auto_ptr< DomainContacts_type > p);

    // system-status
    //
    typedef ::iodef_2_0::domaindata_system_status_type system_status_type;
    typedef ::xsd::cxx::tree::optional< system_status_type > system_status_optional;
    typedef ::xsd::cxx::tree::traits< system_status_type, char > system_status_traits;

    const system_status_optional&
    system_status () const;

    system_status_optional&
    system_status ();

    void
    system_status (const system_status_type& x);

    void
    system_status (const system_status_optional& x);

    void
    system_status (::std::auto_ptr< system_status_type > p);

    // ext-system-status
    //
    typedef ::xml_schema::string ext_system_status_type;
    typedef ::xsd::cxx::tree::optional< ext_system_status_type > ext_system_status_optional;
    typedef ::xsd::cxx::tree::traits< ext_system_status_type, char > ext_system_status_traits;

    const ext_system_status_optional&
    ext_system_status () const;

    ext_system_status_optional&
    ext_system_status ();

    void
    ext_system_status (const ext_system_status_type& x);

    void
    ext_system_status (const ext_system_status_optional& x);

    void
    ext_system_status (::std::auto_ptr< ext_system_status_type > p);

    // domain-status
    //
    typedef ::iodef_2_0::domaindata_domain_status_type domain_status_type;
    typedef ::xsd::cxx::tree::optional< domain_status_type > domain_status_optional;
    typedef ::xsd::cxx::tree::traits< domain_status_type, char > domain_status_traits;

    const domain_status_optional&
    domain_status () const;

    domain_status_optional&
    domain_status ();

    void
    domain_status (const domain_status_type& x);

    void
    domain_status (const domain_status_optional& x);

    void
    domain_status (::std::auto_ptr< domain_status_type > p);

    // ext-domain-status
    //
    typedef ::xml_schema::string ext_domain_status_type;
    typedef ::xsd::cxx::tree::optional< ext_domain_status_type > ext_domain_status_optional;
    typedef ::xsd::cxx::tree::traits< ext_domain_status_type, char > ext_domain_status_traits;

    const ext_domain_status_optional&
    ext_domain_status () const;

    ext_domain_status_optional&
    ext_domain_status ();

    void
    ext_domain_status (const ext_domain_status_type& x);

    void
    ext_domain_status (const ext_domain_status_optional& x);

    void
    ext_domain_status (::std::auto_ptr< ext_domain_status_type > p);

    // observable-id
    //
    typedef ::xml_schema::id observable_id_type;
    typedef ::xsd::cxx::tree::optional< observable_id_type > observable_id_optional;
    typedef ::xsd::cxx::tree::traits< observable_id_type, char > observable_id_traits;

    const observable_id_optional&
    observable_id () const;

    observable_id_optional&
    observable_id ();

    void
    observable_id (const observable_id_type& x);

    void
    observable_id (const observable_id_optional& x);

    void
    observable_id (::std::auto_ptr< observable_id_type > p);

    // Constructors.
    //
    DomainData (const Name_type&);

    DomainData (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    DomainData (const DomainData& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual DomainData*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    DomainData&
    operator= (const DomainData& x);

    virtual 
    ~DomainData ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Name_type > Name_;
    DateDomainWasChecked_optional DateDomainWasChecked_;
    RegistrationDate_optional RegistrationDate_;
    ExpirationDate_optional ExpirationDate_;
    RelatedDNS_sequence RelatedDNS_;
    Nameservers_sequence Nameservers_;
    DomainContacts_optional DomainContacts_;
    system_status_optional system_status_;
    ext_system_status_optional ext_system_status_;
    domain_status_optional domain_status_;
    ext_domain_status_optional ext_domain_status_;
    observable_id_optional observable_id_;
  };

  class RelatedDNS: public ::xml_schema::string
  {
    public:
    // record-type
    //
    typedef ::iodef_2_0::record_type record_type_type;
    typedef ::xsd::cxx::tree::optional< record_type_type > record_type_optional;
    typedef ::xsd::cxx::tree::traits< record_type_type, char > record_type_traits;

    const record_type_optional&
    record_type () const;

    record_type_optional&
    record_type ();

    void
    record_type (const record_type_type& x);

    void
    record_type (const record_type_optional& x);

    void
    record_type (::std::auto_ptr< record_type_type > p);

    // Constructors.
    //
    RelatedDNS ();

    RelatedDNS (const char*);

    RelatedDNS (const ::std::string&);

    RelatedDNS (const ::xml_schema::string&);

    RelatedDNS (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    RelatedDNS (const RelatedDNS& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual RelatedDNS*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    RelatedDNS&
    operator= (const RelatedDNS& x);

    virtual 
    ~RelatedDNS ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    record_type_optional record_type_;
  };

  class Nameservers: public ::xml_schema::type
  {
    public:
    // Server
    //
    typedef ::xml_schema::string Server_type;
    typedef ::xsd::cxx::tree::traits< Server_type, char > Server_traits;

    const Server_type&
    Server () const;

    Server_type&
    Server ();

    void
    Server (const Server_type& x);

    void
    Server (::std::auto_ptr< Server_type > p);

    // Address
    //
    typedef ::iodef_2_0::Address Address_type;
    typedef ::xsd::cxx::tree::sequence< Address_type > Address_sequence;
    typedef Address_sequence::iterator Address_iterator;
    typedef Address_sequence::const_iterator Address_const_iterator;
    typedef ::xsd::cxx::tree::traits< Address_type, char > Address_traits;

    const Address_sequence&
    Address () const;

    Address_sequence&
    Address ();

    void
    Address (const Address_sequence& s);

    // Constructors.
    //
    Nameservers (const Server_type&);

    Nameservers (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    Nameservers (const Nameservers& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual Nameservers*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Nameservers&
    operator= (const Nameservers& x);

    virtual 
    ~Nameservers ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Server_type > Server_;
    Address_sequence Address_;
  };

  class DomainContacts: public ::xml_schema::type
  {
    public:
    // SameDomainContact
    //
    typedef ::xml_schema::string SameDomainContact_type;
    typedef ::xsd::cxx::tree::optional< SameDomainContact_type > SameDomainContact_optional;
    typedef ::xsd::cxx::tree::traits< SameDomainContact_type, char > SameDomainContact_traits;

    const SameDomainContact_optional&
    SameDomainContact () const;

    SameDomainContact_optional&
    SameDomainContact ();

    void
    SameDomainContact (const SameDomainContact_type& x);

    void
    SameDomainContact (const SameDomainContact_optional& x);

    void
    SameDomainContact (::std::auto_ptr< SameDomainContact_type > p);

    // Contact
    //
    typedef ::iodef_2_0::Contact Contact_type;
    typedef ::xsd::cxx::tree::sequence< Contact_type > Contact_sequence;
    typedef Contact_sequence::iterator Contact_iterator;
    typedef Contact_sequence::const_iterator Contact_const_iterator;
    typedef ::xsd::cxx::tree::traits< Contact_type, char > Contact_traits;

    const Contact_sequence&
    Contact () const;

    Contact_sequence&
    Contact ();

    void
    Contact (const Contact_sequence& s);

    // Constructors.
    //
    DomainContacts ();

    DomainContacts (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    DomainContacts (const DomainContacts& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual DomainContacts*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    DomainContacts&
    operator= (const DomainContacts& x);

    virtual 
    ~DomainContacts ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    SameDomainContact_optional SameDomainContact_;
    Contact_sequence Contact_;
  };

  class Record: public ::xml_schema::type
  {
    public:
    // RecordData
    //
    typedef ::iodef_2_0::RecordData RecordData_type;
    typedef ::xsd::cxx::tree::sequence< RecordData_type > RecordData_sequence;
    typedef RecordData_sequence::iterator RecordData_iterator;
    typedef RecordData_sequence::const_iterator RecordData_const_iterator;
    typedef ::xsd::cxx::tree::traits< RecordData_type, char > RecordData_traits;

    const RecordData_sequence&
    RecordData () const;

    RecordData_sequence&
    RecordData ();

    void
    RecordData (const RecordData_sequence& s);

    // restriction
    //
    typedef ::iodef_2_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // ext-restriction
    //
    typedef ::xml_schema::string ext_restriction_type;
    typedef ::xsd::cxx::tree::optional< ext_restriction_type > ext_restriction_optional;
    typedef ::xsd::cxx::tree::traits< ext_restriction_type, char > ext_restriction_traits;

    const ext_restriction_optional&
    ext_restriction () const;

    ext_restriction_optional&
    ext_restriction ();

    void
    ext_restriction (const ext_restriction_type& x);

    void
    ext_restriction (const ext_restriction_optional& x);

    void
    ext_restriction (::std::auto_ptr< ext_restriction_type > p);

    // Constructors.
    //
    Record ();

    Record (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Record (const Record& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual Record*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Record&
    operator= (const Record& x);

    virtual 
    ~Record ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    RecordData_sequence RecordData_;
    restriction_optional restriction_;
    ext_restriction_optional ext_restriction_;
  };

  class RecordData: public ::xml_schema::type
  {
    public:
    // DateTime
    //
    typedef ::xml_schema::date_time DateTime_type;
    typedef ::xsd::cxx::tree::optional< DateTime_type > DateTime_optional;
    typedef ::xsd::cxx::tree::traits< DateTime_type, char > DateTime_traits;

    const DateTime_optional&
    DateTime () const;

    DateTime_optional&
    DateTime ();

    void
    DateTime (const DateTime_type& x);

    void
    DateTime (const DateTime_optional& x);

    void
    DateTime (::std::auto_ptr< DateTime_type > p);

    // Description
    //
    typedef ::iodef_2_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // Application
    //
    typedef ::iodef_2_0::SoftwareType Application_type;
    typedef ::xsd::cxx::tree::optional< Application_type > Application_optional;
    typedef ::xsd::cxx::tree::traits< Application_type, char > Application_traits;

    const Application_optional&
    Application () const;

    Application_optional&
    Application ();

    void
    Application (const Application_type& x);

    void
    Application (const Application_optional& x);

    void
    Application (::std::auto_ptr< Application_type > p);

    // RecordPattern
    //
    typedef ::iodef_2_0::RecordPattern RecordPattern_type;
    typedef ::xsd::cxx::tree::sequence< RecordPattern_type > RecordPattern_sequence;
    typedef RecordPattern_sequence::iterator RecordPattern_iterator;
    typedef RecordPattern_sequence::const_iterator RecordPattern_const_iterator;
    typedef ::xsd::cxx::tree::traits< RecordPattern_type, char > RecordPattern_traits;

    const RecordPattern_sequence&
    RecordPattern () const;

    RecordPattern_sequence&
    RecordPattern ();

    void
    RecordPattern (const RecordPattern_sequence& s);

    // RecordItem
    //
    typedef ::iodef_2_0::ExtensionType RecordItem_type;
    typedef ::xsd::cxx::tree::sequence< RecordItem_type > RecordItem_sequence;
    typedef RecordItem_sequence::iterator RecordItem_iterator;
    typedef RecordItem_sequence::const_iterator RecordItem_const_iterator;
    typedef ::xsd::cxx::tree::traits< RecordItem_type, char > RecordItem_traits;

    const RecordItem_sequence&
    RecordItem () const;

    RecordItem_sequence&
    RecordItem ();

    void
    RecordItem (const RecordItem_sequence& s);

    // FileData
    //
    typedef ::iodef_2_0::FileData FileData_type;
    typedef ::xsd::cxx::tree::sequence< FileData_type > FileData_sequence;
    typedef FileData_sequence::iterator FileData_iterator;
    typedef FileData_sequence::const_iterator FileData_const_iterator;
    typedef ::xsd::cxx::tree::traits< FileData_type, char > FileData_traits;

    const FileData_sequence&
    FileData () const;

    FileData_sequence&
    FileData ();

    void
    FileData (const FileData_sequence& s);

    // WindowsRegistryKeysModified
    //
    typedef ::iodef_2_0::WindowsRegistryKeysModified WindowsRegistryKeysModified_type;
    typedef ::xsd::cxx::tree::sequence< WindowsRegistryKeysModified_type > WindowsRegistryKeysModified_sequence;
    typedef WindowsRegistryKeysModified_sequence::iterator WindowsRegistryKeysModified_iterator;
    typedef WindowsRegistryKeysModified_sequence::const_iterator WindowsRegistryKeysModified_const_iterator;
    typedef ::xsd::cxx::tree::traits< WindowsRegistryKeysModified_type, char > WindowsRegistryKeysModified_traits;

    const WindowsRegistryKeysModified_sequence&
    WindowsRegistryKeysModified () const;

    WindowsRegistryKeysModified_sequence&
    WindowsRegistryKeysModified ();

    void
    WindowsRegistryKeysModified (const WindowsRegistryKeysModified_sequence& s);

    // CertificateData
    //
    typedef ::iodef_2_0::CertificateData CertificateData_type;
    typedef ::xsd::cxx::tree::sequence< CertificateData_type > CertificateData_sequence;
    typedef CertificateData_sequence::iterator CertificateData_iterator;
    typedef CertificateData_sequence::const_iterator CertificateData_const_iterator;
    typedef ::xsd::cxx::tree::traits< CertificateData_type, char > CertificateData_traits;

    const CertificateData_sequence&
    CertificateData () const;

    CertificateData_sequence&
    CertificateData ();

    void
    CertificateData (const CertificateData_sequence& s);

    // AdditionalData
    //
    typedef ::iodef_2_0::ExtensionType AdditionalData_type;
    typedef ::xsd::cxx::tree::sequence< AdditionalData_type > AdditionalData_sequence;
    typedef AdditionalData_sequence::iterator AdditionalData_iterator;
    typedef AdditionalData_sequence::const_iterator AdditionalData_const_iterator;
    typedef ::xsd::cxx::tree::traits< AdditionalData_type, char > AdditionalData_traits;

    const AdditionalData_sequence&
    AdditionalData () const;

    AdditionalData_sequence&
    AdditionalData ();

    void
    AdditionalData (const AdditionalData_sequence& s);

    // restriction
    //
    typedef ::iodef_2_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // ext-restriction
    //
    typedef ::xml_schema::string ext_restriction_type;
    typedef ::xsd::cxx::tree::optional< ext_restriction_type > ext_restriction_optional;
    typedef ::xsd::cxx::tree::traits< ext_restriction_type, char > ext_restriction_traits;

    const ext_restriction_optional&
    ext_restriction () const;

    ext_restriction_optional&
    ext_restriction ();

    void
    ext_restriction (const ext_restriction_type& x);

    void
    ext_restriction (const ext_restriction_optional& x);

    void
    ext_restriction (::std::auto_ptr< ext_restriction_type > p);

    // observable-id
    //
    typedef ::xml_schema::id observable_id_type;
    typedef ::xsd::cxx::tree::optional< observable_id_type > observable_id_optional;
    typedef ::xsd::cxx::tree::traits< observable_id_type, char > observable_id_traits;

    const observable_id_optional&
    observable_id () const;

    observable_id_optional&
    observable_id ();

    void
    observable_id (const observable_id_type& x);

    void
    observable_id (const observable_id_optional& x);

    void
    observable_id (::std::auto_ptr< observable_id_type > p);

    // Constructors.
    //
    RecordData ();

    RecordData (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    RecordData (const RecordData& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual RecordData*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    RecordData&
    operator= (const RecordData& x);

    virtual 
    ~RecordData ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    DateTime_optional DateTime_;
    Description_sequence Description_;
    Application_optional Application_;
    RecordPattern_sequence RecordPattern_;
    RecordItem_sequence RecordItem_;
    FileData_sequence FileData_;
    WindowsRegistryKeysModified_sequence WindowsRegistryKeysModified_;
    CertificateData_sequence CertificateData_;
    AdditionalData_sequence AdditionalData_;
    restriction_optional restriction_;
    ext_restriction_optional ext_restriction_;
    observable_id_optional observable_id_;
  };

  class RecordPattern: public ::xml_schema::string
  {
    public:
    // type
    //
    typedef ::iodef_2_0::recordpattern_type_type type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::auto_ptr< type_type > p);

    // ext-type
    //
    typedef ::xml_schema::string ext_type_type;
    typedef ::xsd::cxx::tree::optional< ext_type_type > ext_type_optional;
    typedef ::xsd::cxx::tree::traits< ext_type_type, char > ext_type_traits;

    const ext_type_optional&
    ext_type () const;

    ext_type_optional&
    ext_type ();

    void
    ext_type (const ext_type_type& x);

    void
    ext_type (const ext_type_optional& x);

    void
    ext_type (::std::auto_ptr< ext_type_type > p);

    // offset
    //
    typedef ::xml_schema::integer offset_type;
    typedef ::xsd::cxx::tree::optional< offset_type > offset_optional;
    typedef ::xsd::cxx::tree::traits< offset_type, char > offset_traits;

    const offset_optional&
    offset () const;

    offset_optional&
    offset ();

    void
    offset (const offset_type& x);

    void
    offset (const offset_optional& x);

    // offsetunit
    //
    typedef ::iodef_2_0::recordpattern_offsetunit_type offsetunit_type;
    typedef ::xsd::cxx::tree::traits< offsetunit_type, char > offsetunit_traits;

    const offsetunit_type&
    offsetunit () const;

    offsetunit_type&
    offsetunit ();

    void
    offsetunit (const offsetunit_type& x);

    void
    offsetunit (::std::auto_ptr< offsetunit_type > p);

    static const offsetunit_type&
    offsetunit_default_value ();

    // ext-offsetunit
    //
    typedef ::xml_schema::string ext_offsetunit_type;
    typedef ::xsd::cxx::tree::optional< ext_offsetunit_type > ext_offsetunit_optional;
    typedef ::xsd::cxx::tree::traits< ext_offsetunit_type, char > ext_offsetunit_traits;

    const ext_offsetunit_optional&
    ext_offsetunit () const;

    ext_offsetunit_optional&
    ext_offsetunit ();

    void
    ext_offsetunit (const ext_offsetunit_type& x);

    void
    ext_offsetunit (const ext_offsetunit_optional& x);

    void
    ext_offsetunit (::std::auto_ptr< ext_offsetunit_type > p);

    // instance
    //
    typedef ::xml_schema::integer instance_type;
    typedef ::xsd::cxx::tree::optional< instance_type > instance_optional;
    typedef ::xsd::cxx::tree::traits< instance_type, char > instance_traits;

    const instance_optional&
    instance () const;

    instance_optional&
    instance ();

    void
    instance (const instance_type& x);

    void
    instance (const instance_optional& x);

    // Constructors.
    //
    RecordPattern (const type_type&);

    RecordPattern (const char*,
                   const type_type&);

    RecordPattern (const ::std::string&,
                   const type_type&);

    RecordPattern (const ::xml_schema::string&,
                   const type_type&);

    RecordPattern (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    RecordPattern (const RecordPattern& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual RecordPattern*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    RecordPattern&
    operator= (const RecordPattern& x);

    virtual 
    ~RecordPattern ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    ext_type_optional ext_type_;
    offset_optional offset_;
    ::xsd::cxx::tree::one< offsetunit_type > offsetunit_;
    static const offsetunit_type offsetunit_default_value_;
    ext_offsetunit_optional ext_offsetunit_;
    instance_optional instance_;
  };

  class WindowsRegistryKeysModified: public ::xml_schema::type
  {
    public:
    // Key
    //
    typedef ::iodef_2_0::Key Key_type;
    typedef ::xsd::cxx::tree::sequence< Key_type > Key_sequence;
    typedef Key_sequence::iterator Key_iterator;
    typedef Key_sequence::const_iterator Key_const_iterator;
    typedef ::xsd::cxx::tree::traits< Key_type, char > Key_traits;

    const Key_sequence&
    Key () const;

    Key_sequence&
    Key ();

    void
    Key (const Key_sequence& s);

    // observable-id
    //
    typedef ::xml_schema::id observable_id_type;
    typedef ::xsd::cxx::tree::optional< observable_id_type > observable_id_optional;
    typedef ::xsd::cxx::tree::traits< observable_id_type, char > observable_id_traits;

    const observable_id_optional&
    observable_id () const;

    observable_id_optional&
    observable_id ();

    void
    observable_id (const observable_id_type& x);

    void
    observable_id (const observable_id_optional& x);

    void
    observable_id (::std::auto_ptr< observable_id_type > p);

    // Constructors.
    //
    WindowsRegistryKeysModified ();

    WindowsRegistryKeysModified (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    WindowsRegistryKeysModified (const WindowsRegistryKeysModified& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    virtual WindowsRegistryKeysModified*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    WindowsRegistryKeysModified&
    operator= (const WindowsRegistryKeysModified& x);

    virtual 
    ~WindowsRegistryKeysModified ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Key_sequence Key_;
    observable_id_optional observable_id_;
  };

  class Key: public ::xml_schema::type
  {
    public:
    // KeyName
    //
    typedef ::xml_schema::string KeyName_type;
    typedef ::xsd::cxx::tree::traits< KeyName_type, char > KeyName_traits;

    const KeyName_type&
    KeyName () const;

    KeyName_type&
    KeyName ();

    void
    KeyName (const KeyName_type& x);

    void
    KeyName (::std::auto_ptr< KeyName_type > p);

    // Value
    //
    typedef ::xml_schema::string Value_type;
    typedef ::xsd::cxx::tree::optional< Value_type > Value_optional;
    typedef ::xsd::cxx::tree::traits< Value_type, char > Value_traits;

    const Value_optional&
    Value () const;

    Value_optional&
    Value ();

    void
    Value (const Value_type& x);

    void
    Value (const Value_optional& x);

    void
    Value (::std::auto_ptr< Value_type > p);

    // registryaction
    //
    typedef ::iodef_2_0::key_registryaction_type registryaction_type;
    typedef ::xsd::cxx::tree::optional< registryaction_type > registryaction_optional;
    typedef ::xsd::cxx::tree::traits< registryaction_type, char > registryaction_traits;

    const registryaction_optional&
    registryaction () const;

    registryaction_optional&
    registryaction ();

    void
    registryaction (const registryaction_type& x);

    void
    registryaction (const registryaction_optional& x);

    void
    registryaction (::std::auto_ptr< registryaction_type > p);

    // ext-registryaction
    //
    typedef ::xml_schema::string ext_registryaction_type;
    typedef ::xsd::cxx::tree::optional< ext_registryaction_type > ext_registryaction_optional;
    typedef ::xsd::cxx::tree::traits< ext_registryaction_type, char > ext_registryaction_traits;

    const ext_registryaction_optional&
    ext_registryaction () const;

    ext_registryaction_optional&
    ext_registryaction ();

    void
    ext_registryaction (const ext_registryaction_type& x);

    void
    ext_registryaction (const ext_registryaction_optional& x);

    void
    ext_registryaction (::std::auto_ptr< ext_registryaction_type > p);

    // Constructors.
    //
    Key (const KeyName_type&);

    Key (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    Key (const Key& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    virtual Key*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Key&
    operator= (const Key& x);

    virtual 
    ~Key ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< KeyName_type > KeyName_;
    Value_optional Value_;
    registryaction_optional registryaction_;
    ext_registryaction_optional ext_registryaction_;
  };

  class FileData: public ::xml_schema::type
  {
    public:
    // File
    //
    typedef ::iodef_2_0::File File_type;
    typedef ::xsd::cxx::tree::sequence< File_type > File_sequence;
    typedef File_sequence::iterator File_iterator;
    typedef File_sequence::const_iterator File_const_iterator;
    typedef ::xsd::cxx::tree::traits< File_type, char > File_traits;

    const File_sequence&
    File () const;

    File_sequence&
    File ();

    void
    File (const File_sequence& s);

    // observable-id
    //
    typedef ::xml_schema::id observable_id_type;
    typedef ::xsd::cxx::tree::optional< observable_id_type > observable_id_optional;
    typedef ::xsd::cxx::tree::traits< observable_id_type, char > observable_id_traits;

    const observable_id_optional&
    observable_id () const;

    observable_id_optional&
    observable_id ();

    void
    observable_id (const observable_id_type& x);

    void
    observable_id (const observable_id_optional& x);

    void
    observable_id (::std::auto_ptr< observable_id_type > p);

    // restriction
    //
    typedef ::iodef_2_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // ext-restriction
    //
    typedef ::xml_schema::string ext_restriction_type;
    typedef ::xsd::cxx::tree::optional< ext_restriction_type > ext_restriction_optional;
    typedef ::xsd::cxx::tree::traits< ext_restriction_type, char > ext_restriction_traits;

    const ext_restriction_optional&
    ext_restriction () const;

    ext_restriction_optional&
    ext_restriction ();

    void
    ext_restriction (const ext_restriction_type& x);

    void
    ext_restriction (const ext_restriction_optional& x);

    void
    ext_restriction (::std::auto_ptr< ext_restriction_type > p);

    // Constructors.
    //
    FileData ();

    FileData (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    FileData (const FileData& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual FileData*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    FileData&
    operator= (const FileData& x);

    virtual 
    ~FileData ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    File_sequence File_;
    observable_id_optional observable_id_;
    restriction_optional restriction_;
    ext_restriction_optional ext_restriction_;
  };

  class File: public ::xml_schema::type
  {
    public:
    // FileName
    //
    typedef ::xml_schema::string FileName_type;
    typedef ::xsd::cxx::tree::optional< FileName_type > FileName_optional;
    typedef ::xsd::cxx::tree::traits< FileName_type, char > FileName_traits;

    const FileName_optional&
    FileName () const;

    FileName_optional&
    FileName ();

    void
    FileName (const FileName_type& x);

    void
    FileName (const FileName_optional& x);

    void
    FileName (::std::auto_ptr< FileName_type > p);

    // FileSize
    //
    typedef ::xml_schema::integer FileSize_type;
    typedef ::xsd::cxx::tree::optional< FileSize_type > FileSize_optional;
    typedef ::xsd::cxx::tree::traits< FileSize_type, char > FileSize_traits;

    const FileSize_optional&
    FileSize () const;

    FileSize_optional&
    FileSize ();

    void
    FileSize (const FileSize_type& x);

    void
    FileSize (const FileSize_optional& x);

    // FileType
    //
    typedef ::xml_schema::integer FileType_type;
    typedef ::xsd::cxx::tree::optional< FileType_type > FileType_optional;
    typedef ::xsd::cxx::tree::traits< FileType_type, char > FileType_traits;

    const FileType_optional&
    FileType () const;

    FileType_optional&
    FileType ();

    void
    FileType (const FileType_type& x);

    void
    FileType (const FileType_optional& x);

    // URL
    //
    typedef ::xml_schema::uri URL_type;
    typedef ::xsd::cxx::tree::sequence< URL_type > URL_sequence;
    typedef URL_sequence::iterator URL_iterator;
    typedef URL_sequence::const_iterator URL_const_iterator;
    typedef ::xsd::cxx::tree::traits< URL_type, char > URL_traits;

    const URL_sequence&
    URL () const;

    URL_sequence&
    URL ();

    void
    URL (const URL_sequence& s);

    // HashData
    //
    typedef ::iodef_2_0::HashData HashData_type;
    typedef ::xsd::cxx::tree::optional< HashData_type > HashData_optional;
    typedef ::xsd::cxx::tree::traits< HashData_type, char > HashData_traits;

    const HashData_optional&
    HashData () const;

    HashData_optional&
    HashData ();

    void
    HashData (const HashData_type& x);

    void
    HashData (const HashData_optional& x);

    void
    HashData (::std::auto_ptr< HashData_type > p);

    // Signature
    //
    typedef ::xmldsig_ns::SignatureType Signature_type;
    typedef ::xsd::cxx::tree::optional< Signature_type > Signature_optional;
    typedef ::xsd::cxx::tree::traits< Signature_type, char > Signature_traits;

    const Signature_optional&
    Signature () const;

    Signature_optional&
    Signature ();

    void
    Signature (const Signature_type& x);

    void
    Signature (const Signature_optional& x);

    void
    Signature (::std::auto_ptr< Signature_type > p);

    // Application
    //
    typedef ::iodef_2_0::SoftwareType Application_type;
    typedef ::xsd::cxx::tree::optional< Application_type > Application_optional;
    typedef ::xsd::cxx::tree::traits< Application_type, char > Application_traits;

    const Application_optional&
    Application () const;

    Application_optional&
    Application ();

    void
    Application (const Application_type& x);

    void
    Application (const Application_optional& x);

    void
    Application (::std::auto_ptr< Application_type > p);

    // FileProperties
    //
    typedef ::iodef_2_0::ExtensionType FileProperties_type;
    typedef ::xsd::cxx::tree::sequence< FileProperties_type > FileProperties_sequence;
    typedef FileProperties_sequence::iterator FileProperties_iterator;
    typedef FileProperties_sequence::const_iterator FileProperties_const_iterator;
    typedef ::xsd::cxx::tree::traits< FileProperties_type, char > FileProperties_traits;

    const FileProperties_sequence&
    FileProperties () const;

    FileProperties_sequence&
    FileProperties ();

    void
    FileProperties (const FileProperties_sequence& s);

    // observable-id
    //
    typedef ::xml_schema::id observable_id_type;
    typedef ::xsd::cxx::tree::optional< observable_id_type > observable_id_optional;
    typedef ::xsd::cxx::tree::traits< observable_id_type, char > observable_id_traits;

    const observable_id_optional&
    observable_id () const;

    observable_id_optional&
    observable_id ();

    void
    observable_id (const observable_id_type& x);

    void
    observable_id (const observable_id_optional& x);

    void
    observable_id (::std::auto_ptr< observable_id_type > p);

    // Constructors.
    //
    File ();

    File (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    File (const File& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual File*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    File&
    operator= (const File& x);

    virtual 
    ~File ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    FileName_optional FileName_;
    FileSize_optional FileSize_;
    FileType_optional FileType_;
    URL_sequence URL_;
    HashData_optional HashData_;
    Signature_optional Signature_;
    Application_optional Application_;
    FileProperties_sequence FileProperties_;
    observable_id_optional observable_id_;
  };

  class HashData: public ::xml_schema::type
  {
    public:
    // HashTarget
    //
    typedef ::iodef_2_0::MLStringType HashTarget_type;
    typedef ::xsd::cxx::tree::optional< HashTarget_type > HashTarget_optional;
    typedef ::xsd::cxx::tree::traits< HashTarget_type, char > HashTarget_traits;

    const HashTarget_optional&
    HashTarget () const;

    HashTarget_optional&
    HashTarget ();

    void
    HashTarget (const HashTarget_type& x);

    void
    HashTarget (const HashTarget_optional& x);

    void
    HashTarget (::std::auto_ptr< HashTarget_type > p);

    // Hash
    //
    typedef ::iodef_2_0::Hash Hash_type;
    typedef ::xsd::cxx::tree::sequence< Hash_type > Hash_sequence;
    typedef Hash_sequence::iterator Hash_iterator;
    typedef Hash_sequence::const_iterator Hash_const_iterator;
    typedef ::xsd::cxx::tree::traits< Hash_type, char > Hash_traits;

    const Hash_sequence&
    Hash () const;

    Hash_sequence&
    Hash ();

    void
    Hash (const Hash_sequence& s);

    // FuzzyHash
    //
    typedef ::iodef_2_0::FuzzyHash FuzzyHash_type;
    typedef ::xsd::cxx::tree::sequence< FuzzyHash_type > FuzzyHash_sequence;
    typedef FuzzyHash_sequence::iterator FuzzyHash_iterator;
    typedef FuzzyHash_sequence::const_iterator FuzzyHash_const_iterator;
    typedef ::xsd::cxx::tree::traits< FuzzyHash_type, char > FuzzyHash_traits;

    const FuzzyHash_sequence&
    FuzzyHash () const;

    FuzzyHash_sequence&
    FuzzyHash ();

    void
    FuzzyHash (const FuzzyHash_sequence& s);

    // scope
    //
    typedef ::iodef_2_0::hashdata_scope_type scope_type;
    typedef ::xsd::cxx::tree::traits< scope_type, char > scope_traits;

    const scope_type&
    scope () const;

    scope_type&
    scope ();

    void
    scope (const scope_type& x);

    void
    scope (::std::auto_ptr< scope_type > p);

    // ext-scope
    //
    typedef ::xml_schema::string ext_scope_type;
    typedef ::xsd::cxx::tree::optional< ext_scope_type > ext_scope_optional;
    typedef ::xsd::cxx::tree::traits< ext_scope_type, char > ext_scope_traits;

    const ext_scope_optional&
    ext_scope () const;

    ext_scope_optional&
    ext_scope ();

    void
    ext_scope (const ext_scope_type& x);

    void
    ext_scope (const ext_scope_optional& x);

    void
    ext_scope (::std::auto_ptr< ext_scope_type > p);

    // Constructors.
    //
    HashData (const scope_type&);

    HashData (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    HashData (const HashData& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual HashData*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    HashData&
    operator= (const HashData& x);

    virtual 
    ~HashData ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    HashTarget_optional HashTarget_;
    Hash_sequence Hash_;
    FuzzyHash_sequence FuzzyHash_;
    ::xsd::cxx::tree::one< scope_type > scope_;
    ext_scope_optional ext_scope_;
  };

  class Hash: public ::xml_schema::type
  {
    public:
    // DigestMethod
    //
    typedef ::xmldsig_ns::DigestMethodType DigestMethod_type;
    typedef ::xsd::cxx::tree::traits< DigestMethod_type, char > DigestMethod_traits;

    const DigestMethod_type&
    DigestMethod () const;

    DigestMethod_type&
    DigestMethod ();

    void
    DigestMethod (const DigestMethod_type& x);

    void
    DigestMethod (::std::auto_ptr< DigestMethod_type > p);

    // DigestValue
    //
    typedef ::xmldsig_ns::DigestValueType DigestValue_type;
    typedef ::xsd::cxx::tree::traits< DigestValue_type, char > DigestValue_traits;

    const DigestValue_type&
    DigestValue () const;

    DigestValue_type&
    DigestValue ();

    void
    DigestValue (const DigestValue_type& x);

    void
    DigestValue (::std::auto_ptr< DigestValue_type > p);

    // CanonicalizationMethod
    //
    typedef ::xmldsig_ns::CanonicalizationMethodType CanonicalizationMethod_type;
    typedef ::xsd::cxx::tree::traits< CanonicalizationMethod_type, char > CanonicalizationMethod_traits;

    const CanonicalizationMethod_type&
    CanonicalizationMethod () const;

    CanonicalizationMethod_type&
    CanonicalizationMethod ();

    void
    CanonicalizationMethod (const CanonicalizationMethod_type& x);

    void
    CanonicalizationMethod (::std::auto_ptr< CanonicalizationMethod_type > p);

    // Application
    //
    typedef ::iodef_2_0::SoftwareType Application_type;
    typedef ::xsd::cxx::tree::optional< Application_type > Application_optional;
    typedef ::xsd::cxx::tree::traits< Application_type, char > Application_traits;

    const Application_optional&
    Application () const;

    Application_optional&
    Application ();

    void
    Application (const Application_type& x);

    void
    Application (const Application_optional& x);

    void
    Application (::std::auto_ptr< Application_type > p);

    // Constructors.
    //
    Hash (const DigestMethod_type&,
          const DigestValue_type&,
          const CanonicalizationMethod_type&);

    Hash (::std::auto_ptr< DigestMethod_type >,
          const DigestValue_type&,
          ::std::auto_ptr< CanonicalizationMethod_type >);

    Hash (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    Hash (const Hash& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual Hash*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Hash&
    operator= (const Hash& x);

    virtual 
    ~Hash ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< DigestMethod_type > DigestMethod_;
    ::xsd::cxx::tree::one< DigestValue_type > DigestValue_;
    ::xsd::cxx::tree::one< CanonicalizationMethod_type > CanonicalizationMethod_;
    Application_optional Application_;
  };

  class FuzzyHash: public ::xml_schema::type
  {
    public:
    // AdditionalData
    //
    typedef ::iodef_2_0::ExtensionType AdditionalData_type;
    typedef ::xsd::cxx::tree::traits< AdditionalData_type, char > AdditionalData_traits;

    const AdditionalData_type&
    AdditionalData () const;

    AdditionalData_type&
    AdditionalData ();

    void
    AdditionalData (const AdditionalData_type& x);

    void
    AdditionalData (::std::auto_ptr< AdditionalData_type > p);

    // Application
    //
    typedef ::iodef_2_0::SoftwareType Application_type;
    typedef ::xsd::cxx::tree::optional< Application_type > Application_optional;
    typedef ::xsd::cxx::tree::traits< Application_type, char > Application_traits;

    const Application_optional&
    Application () const;

    Application_optional&
    Application ();

    void
    Application (const Application_type& x);

    void
    Application (const Application_optional& x);

    void
    Application (::std::auto_ptr< Application_type > p);

    // Constructors.
    //
    FuzzyHash (const AdditionalData_type&);

    FuzzyHash (::std::auto_ptr< AdditionalData_type >);

    FuzzyHash (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    FuzzyHash (const FuzzyHash& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual FuzzyHash*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    FuzzyHash&
    operator= (const FuzzyHash& x);

    virtual 
    ~FuzzyHash ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< AdditionalData_type > AdditionalData_;
    Application_optional Application_;
  };

  class SignatureData: public ::xml_schema::type
  {
    public:
    // Signature
    //
    typedef ::xmldsig_ns::SignatureType Signature_type;
    typedef ::xsd::cxx::tree::sequence< Signature_type > Signature_sequence;
    typedef Signature_sequence::iterator Signature_iterator;
    typedef Signature_sequence::const_iterator Signature_const_iterator;
    typedef ::xsd::cxx::tree::traits< Signature_type, char > Signature_traits;

    const Signature_sequence&
    Signature () const;

    Signature_sequence&
    Signature ();

    void
    Signature (const Signature_sequence& s);

    // Constructors.
    //
    SignatureData ();

    SignatureData (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    SignatureData (const SignatureData& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual SignatureData*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    SignatureData&
    operator= (const SignatureData& x);

    virtual 
    ~SignatureData ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Signature_sequence Signature_;
  };

  class CertificateData: public ::xml_schema::type
  {
    public:
    // Certificate
    //
    typedef ::iodef_2_0::Certificate Certificate_type;
    typedef ::xsd::cxx::tree::sequence< Certificate_type > Certificate_sequence;
    typedef Certificate_sequence::iterator Certificate_iterator;
    typedef Certificate_sequence::const_iterator Certificate_const_iterator;
    typedef ::xsd::cxx::tree::traits< Certificate_type, char > Certificate_traits;

    const Certificate_sequence&
    Certificate () const;

    Certificate_sequence&
    Certificate ();

    void
    Certificate (const Certificate_sequence& s);

    // observable-id
    //
    typedef ::xml_schema::id observable_id_type;
    typedef ::xsd::cxx::tree::optional< observable_id_type > observable_id_optional;
    typedef ::xsd::cxx::tree::traits< observable_id_type, char > observable_id_traits;

    const observable_id_optional&
    observable_id () const;

    observable_id_optional&
    observable_id ();

    void
    observable_id (const observable_id_type& x);

    void
    observable_id (const observable_id_optional& x);

    void
    observable_id (::std::auto_ptr< observable_id_type > p);

    // restriction
    //
    typedef ::iodef_2_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // ext-restriction
    //
    typedef ::xml_schema::string ext_restriction_type;
    typedef ::xsd::cxx::tree::optional< ext_restriction_type > ext_restriction_optional;
    typedef ::xsd::cxx::tree::traits< ext_restriction_type, char > ext_restriction_traits;

    const ext_restriction_optional&
    ext_restriction () const;

    ext_restriction_optional&
    ext_restriction ();

    void
    ext_restriction (const ext_restriction_type& x);

    void
    ext_restriction (const ext_restriction_optional& x);

    void
    ext_restriction (::std::auto_ptr< ext_restriction_type > p);

    // Constructors.
    //
    CertificateData ();

    CertificateData (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    CertificateData (const CertificateData& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual CertificateData*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CertificateData&
    operator= (const CertificateData& x);

    virtual 
    ~CertificateData ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Certificate_sequence Certificate_;
    observable_id_optional observable_id_;
    restriction_optional restriction_;
    ext_restriction_optional ext_restriction_;
  };

  class Certificate: public ::xml_schema::type
  {
    public:
    // X509Data
    //
    typedef ::xmldsig_ns::X509DataType X509Data_type;
    typedef ::xsd::cxx::tree::traits< X509Data_type, char > X509Data_traits;

    const X509Data_type&
    X509Data () const;

    X509Data_type&
    X509Data ();

    void
    X509Data (const X509Data_type& x);

    void
    X509Data (::std::auto_ptr< X509Data_type > p);

    // observable-id
    //
    typedef ::xml_schema::id observable_id_type;
    typedef ::xsd::cxx::tree::optional< observable_id_type > observable_id_optional;
    typedef ::xsd::cxx::tree::traits< observable_id_type, char > observable_id_traits;

    const observable_id_optional&
    observable_id () const;

    observable_id_optional&
    observable_id ();

    void
    observable_id (const observable_id_type& x);

    void
    observable_id (const observable_id_optional& x);

    void
    observable_id (::std::auto_ptr< observable_id_type > p);

    // Constructors.
    //
    Certificate (const X509Data_type&);

    Certificate (::std::auto_ptr< X509Data_type >);

    Certificate (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    Certificate (const Certificate& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual Certificate*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Certificate&
    operator= (const Certificate& x);

    virtual 
    ~Certificate ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< X509Data_type > X509Data_;
    observable_id_optional observable_id_;
  };

  class SoftwareReference: public ::xml_schema::type
  {
    public:
    // spec-name
    //
    typedef ::iodef_2_0::softwarereference_spec_name_type spec_name_type;
    typedef ::xsd::cxx::tree::traits< spec_name_type, char > spec_name_traits;

    const spec_name_type&
    spec_name () const;

    spec_name_type&
    spec_name ();

    void
    spec_name (const spec_name_type& x);

    void
    spec_name (::std::auto_ptr< spec_name_type > p);

    // ext-spec-name
    //
    typedef ::xml_schema::string ext_spec_name_type;
    typedef ::xsd::cxx::tree::optional< ext_spec_name_type > ext_spec_name_optional;
    typedef ::xsd::cxx::tree::traits< ext_spec_name_type, char > ext_spec_name_traits;

    const ext_spec_name_optional&
    ext_spec_name () const;

    ext_spec_name_optional&
    ext_spec_name ();

    void
    ext_spec_name (const ext_spec_name_type& x);

    void
    ext_spec_name (const ext_spec_name_optional& x);

    void
    ext_spec_name (::std::auto_ptr< ext_spec_name_type > p);

    // dtype
    //
    typedef ::iodef_2_0::softwarereference_dtype_type dtype_type;
    typedef ::xsd::cxx::tree::optional< dtype_type > dtype_optional;
    typedef ::xsd::cxx::tree::traits< dtype_type, char > dtype_traits;

    const dtype_optional&
    dtype () const;

    dtype_optional&
    dtype ();

    void
    dtype (const dtype_type& x);

    void
    dtype (const dtype_optional& x);

    void
    dtype (::std::auto_ptr< dtype_type > p);

    // ext-dtype
    //
    typedef ::xml_schema::string ext_dtype_type;
    typedef ::xsd::cxx::tree::optional< ext_dtype_type > ext_dtype_optional;
    typedef ::xsd::cxx::tree::traits< ext_dtype_type, char > ext_dtype_traits;

    const ext_dtype_optional&
    ext_dtype () const;

    ext_dtype_optional&
    ext_dtype ();

    void
    ext_dtype (const ext_dtype_type& x);

    void
    ext_dtype (const ext_dtype_optional& x);

    void
    ext_dtype (::std::auto_ptr< ext_dtype_type > p);

    // Constructors.
    //
    SoftwareReference (const spec_name_type&);

    SoftwareReference (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    SoftwareReference (const SoftwareReference& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual SoftwareReference*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    SoftwareReference&
    operator= (const SoftwareReference& x);

    virtual 
    ~SoftwareReference ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< spec_name_type > spec_name_;
    ext_spec_name_optional ext_spec_name_;
    dtype_optional dtype_;
    ext_dtype_optional ext_dtype_;
  };

  class IndicatorData: public ::xml_schema::type
  {
    public:
    // Indicator
    //
    typedef ::iodef_2_0::Indicator Indicator_type;
    typedef ::xsd::cxx::tree::sequence< Indicator_type > Indicator_sequence;
    typedef Indicator_sequence::iterator Indicator_iterator;
    typedef Indicator_sequence::const_iterator Indicator_const_iterator;
    typedef ::xsd::cxx::tree::traits< Indicator_type, char > Indicator_traits;

    const Indicator_sequence&
    Indicator () const;

    Indicator_sequence&
    Indicator ();

    void
    Indicator (const Indicator_sequence& s);

    // Constructors.
    //
    IndicatorData ();

    IndicatorData (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    IndicatorData (const IndicatorData& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual IndicatorData*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    IndicatorData&
    operator= (const IndicatorData& x);

    virtual 
    ~IndicatorData ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Indicator_sequence Indicator_;
  };

  class Indicator: public ::xml_schema::type
  {
    public:
    // IndicatorID
    //
    typedef ::iodef_2_0::IndicatorID IndicatorID_type;
    typedef ::xsd::cxx::tree::traits< IndicatorID_type, char > IndicatorID_traits;

    const IndicatorID_type&
    IndicatorID () const;

    IndicatorID_type&
    IndicatorID ();

    void
    IndicatorID (const IndicatorID_type& x);

    void
    IndicatorID (::std::auto_ptr< IndicatorID_type > p);

    // AlternativeIndicatorID
    //
    typedef ::iodef_2_0::AlternativeIndicatorID AlternativeIndicatorID_type;
    typedef ::xsd::cxx::tree::sequence< AlternativeIndicatorID_type > AlternativeIndicatorID_sequence;
    typedef AlternativeIndicatorID_sequence::iterator AlternativeIndicatorID_iterator;
    typedef AlternativeIndicatorID_sequence::const_iterator AlternativeIndicatorID_const_iterator;
    typedef ::xsd::cxx::tree::traits< AlternativeIndicatorID_type, char > AlternativeIndicatorID_traits;

    const AlternativeIndicatorID_sequence&
    AlternativeIndicatorID () const;

    AlternativeIndicatorID_sequence&
    AlternativeIndicatorID ();

    void
    AlternativeIndicatorID (const AlternativeIndicatorID_sequence& s);

    // Description
    //
    typedef ::iodef_2_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // StartTime
    //
    typedef ::xml_schema::date_time StartTime_type;
    typedef ::xsd::cxx::tree::optional< StartTime_type > StartTime_optional;
    typedef ::xsd::cxx::tree::traits< StartTime_type, char > StartTime_traits;

    const StartTime_optional&
    StartTime () const;

    StartTime_optional&
    StartTime ();

    void
    StartTime (const StartTime_type& x);

    void
    StartTime (const StartTime_optional& x);

    void
    StartTime (::std::auto_ptr< StartTime_type > p);

    // EndTime
    //
    typedef ::xml_schema::date_time EndTime_type;
    typedef ::xsd::cxx::tree::optional< EndTime_type > EndTime_optional;
    typedef ::xsd::cxx::tree::traits< EndTime_type, char > EndTime_traits;

    const EndTime_optional&
    EndTime () const;

    EndTime_optional&
    EndTime ();

    void
    EndTime (const EndTime_type& x);

    void
    EndTime (const EndTime_optional& x);

    void
    EndTime (::std::auto_ptr< EndTime_type > p);

    // Confidence
    //
    typedef ::iodef_2_0::Confidence Confidence_type;
    typedef ::xsd::cxx::tree::optional< Confidence_type > Confidence_optional;
    typedef ::xsd::cxx::tree::traits< Confidence_type, char > Confidence_traits;

    const Confidence_optional&
    Confidence () const;

    Confidence_optional&
    Confidence ();

    void
    Confidence (const Confidence_type& x);

    void
    Confidence (const Confidence_optional& x);

    void
    Confidence (::std::auto_ptr< Confidence_type > p);

    // Contact
    //
    typedef ::iodef_2_0::Contact Contact_type;
    typedef ::xsd::cxx::tree::sequence< Contact_type > Contact_sequence;
    typedef Contact_sequence::iterator Contact_iterator;
    typedef Contact_sequence::const_iterator Contact_const_iterator;
    typedef ::xsd::cxx::tree::traits< Contact_type, char > Contact_traits;

    const Contact_sequence&
    Contact () const;

    Contact_sequence&
    Contact ();

    void
    Contact (const Contact_sequence& s);

    // Observable
    //
    typedef ::iodef_2_0::Observable Observable_type;
    typedef ::xsd::cxx::tree::optional< Observable_type > Observable_optional;
    typedef ::xsd::cxx::tree::traits< Observable_type, char > Observable_traits;

    const Observable_optional&
    Observable () const;

    Observable_optional&
    Observable ();

    void
    Observable (const Observable_type& x);

    void
    Observable (const Observable_optional& x);

    void
    Observable (::std::auto_ptr< Observable_type > p);

    // ObservableReference
    //
    typedef ::iodef_2_0::ObservableReference ObservableReference_type;
    typedef ::xsd::cxx::tree::optional< ObservableReference_type > ObservableReference_optional;
    typedef ::xsd::cxx::tree::traits< ObservableReference_type, char > ObservableReference_traits;

    const ObservableReference_optional&
    ObservableReference () const;

    ObservableReference_optional&
    ObservableReference ();

    void
    ObservableReference (const ObservableReference_type& x);

    void
    ObservableReference (const ObservableReference_optional& x);

    void
    ObservableReference (::std::auto_ptr< ObservableReference_type > p);

    // IndicatorExpression
    //
    typedef ::iodef_2_0::IndicatorExpression IndicatorExpression_type;
    typedef ::xsd::cxx::tree::optional< IndicatorExpression_type > IndicatorExpression_optional;
    typedef ::xsd::cxx::tree::traits< IndicatorExpression_type, char > IndicatorExpression_traits;

    const IndicatorExpression_optional&
    IndicatorExpression () const;

    IndicatorExpression_optional&
    IndicatorExpression ();

    void
    IndicatorExpression (const IndicatorExpression_type& x);

    void
    IndicatorExpression (const IndicatorExpression_optional& x);

    void
    IndicatorExpression (::std::auto_ptr< IndicatorExpression_type > p);

    // IndicatorReference
    //
    typedef ::iodef_2_0::IndicatorReference IndicatorReference_type;
    typedef ::xsd::cxx::tree::optional< IndicatorReference_type > IndicatorReference_optional;
    typedef ::xsd::cxx::tree::traits< IndicatorReference_type, char > IndicatorReference_traits;

    const IndicatorReference_optional&
    IndicatorReference () const;

    IndicatorReference_optional&
    IndicatorReference ();

    void
    IndicatorReference (const IndicatorReference_type& x);

    void
    IndicatorReference (const IndicatorReference_optional& x);

    void
    IndicatorReference (::std::auto_ptr< IndicatorReference_type > p);

    // restriction
    //
    typedef ::iodef_2_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // ext-restriction
    //
    typedef ::xml_schema::string ext_restriction_type;
    typedef ::xsd::cxx::tree::optional< ext_restriction_type > ext_restriction_optional;
    typedef ::xsd::cxx::tree::traits< ext_restriction_type, char > ext_restriction_traits;

    const ext_restriction_optional&
    ext_restriction () const;

    ext_restriction_optional&
    ext_restriction ();

    void
    ext_restriction (const ext_restriction_type& x);

    void
    ext_restriction (const ext_restriction_optional& x);

    void
    ext_restriction (::std::auto_ptr< ext_restriction_type > p);

    // Constructors.
    //
    Indicator (const IndicatorID_type&);

    Indicator (::std::auto_ptr< IndicatorID_type >);

    Indicator (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    Indicator (const Indicator& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual Indicator*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Indicator&
    operator= (const Indicator& x);

    virtual 
    ~Indicator ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< IndicatorID_type > IndicatorID_;
    AlternativeIndicatorID_sequence AlternativeIndicatorID_;
    Description_sequence Description_;
    StartTime_optional StartTime_;
    EndTime_optional EndTime_;
    Confidence_optional Confidence_;
    Contact_sequence Contact_;
    Observable_optional Observable_;
    ObservableReference_optional ObservableReference_;
    IndicatorExpression_optional IndicatorExpression_;
    IndicatorReference_optional IndicatorReference_;
    restriction_optional restriction_;
    ext_restriction_optional ext_restriction_;
  };

  class IndicatorID: public ::xml_schema::id
  {
    public:
    // name
    //
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // version
    //
    typedef ::xml_schema::string version_type;
    typedef ::xsd::cxx::tree::traits< version_type, char > version_traits;

    const version_type&
    version () const;

    version_type&
    version ();

    void
    version (const version_type& x);

    void
    version (::std::auto_ptr< version_type > p);

    // Constructors.
    //
    IndicatorID (const ::xml_schema::id&,
                 const name_type&,
                 const version_type&);

    IndicatorID (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    IndicatorID (const IndicatorID& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual IndicatorID*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    IndicatorID&
    operator= (const IndicatorID& x);

    virtual 
    ~IndicatorID ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< version_type > version_;
  };

  class AlternativeIndicatorID: public ::xml_schema::type
  {
    public:
    // IndicatorID
    //
    typedef ::iodef_2_0::IndicatorID IndicatorID_type;
    typedef ::xsd::cxx::tree::sequence< IndicatorID_type > IndicatorID_sequence;
    typedef IndicatorID_sequence::iterator IndicatorID_iterator;
    typedef IndicatorID_sequence::const_iterator IndicatorID_const_iterator;
    typedef ::xsd::cxx::tree::traits< IndicatorID_type, char > IndicatorID_traits;

    const IndicatorID_sequence&
    IndicatorID () const;

    IndicatorID_sequence&
    IndicatorID ();

    void
    IndicatorID (const IndicatorID_sequence& s);

    // restriction
    //
    typedef ::iodef_2_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // ext-restriction
    //
    typedef ::xml_schema::string ext_restriction_type;
    typedef ::xsd::cxx::tree::optional< ext_restriction_type > ext_restriction_optional;
    typedef ::xsd::cxx::tree::traits< ext_restriction_type, char > ext_restriction_traits;

    const ext_restriction_optional&
    ext_restriction () const;

    ext_restriction_optional&
    ext_restriction ();

    void
    ext_restriction (const ext_restriction_type& x);

    void
    ext_restriction (const ext_restriction_optional& x);

    void
    ext_restriction (::std::auto_ptr< ext_restriction_type > p);

    // Constructors.
    //
    AlternativeIndicatorID ();

    AlternativeIndicatorID (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    AlternativeIndicatorID (const AlternativeIndicatorID& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual AlternativeIndicatorID*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    AlternativeIndicatorID&
    operator= (const AlternativeIndicatorID& x);

    virtual 
    ~AlternativeIndicatorID ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    IndicatorID_sequence IndicatorID_;
    restriction_optional restriction_;
    ext_restriction_optional ext_restriction_;
  };

  class Observable: public ::xml_schema::type
  {
    public:
    // Address
    //
    typedef ::iodef_2_0::Address Address_type;
    typedef ::xsd::cxx::tree::optional< Address_type > Address_optional;
    typedef ::xsd::cxx::tree::traits< Address_type, char > Address_traits;

    const Address_optional&
    Address () const;

    Address_optional&
    Address ();

    void
    Address (const Address_type& x);

    void
    Address (const Address_optional& x);

    void
    Address (::std::auto_ptr< Address_type > p);

    // DomainData
    //
    typedef ::iodef_2_0::DomainData DomainData_type;
    typedef ::xsd::cxx::tree::optional< DomainData_type > DomainData_optional;
    typedef ::xsd::cxx::tree::traits< DomainData_type, char > DomainData_traits;

    const DomainData_optional&
    DomainData () const;

    DomainData_optional&
    DomainData ();

    void
    DomainData (const DomainData_type& x);

    void
    DomainData (const DomainData_optional& x);

    void
    DomainData (::std::auto_ptr< DomainData_type > p);

    // EmailData
    //
    typedef ::iodef_2_0::EmailData EmailData_type;
    typedef ::xsd::cxx::tree::optional< EmailData_type > EmailData_optional;
    typedef ::xsd::cxx::tree::traits< EmailData_type, char > EmailData_traits;

    const EmailData_optional&
    EmailData () const;

    EmailData_optional&
    EmailData ();

    void
    EmailData (const EmailData_type& x);

    void
    EmailData (const EmailData_optional& x);

    void
    EmailData (::std::auto_ptr< EmailData_type > p);

    // ApplicationHeader
    //
    typedef ::iodef_2_0::ApplicationHeaderType ApplicationHeader_type;
    typedef ::xsd::cxx::tree::optional< ApplicationHeader_type > ApplicationHeader_optional;
    typedef ::xsd::cxx::tree::traits< ApplicationHeader_type, char > ApplicationHeader_traits;

    const ApplicationHeader_optional&
    ApplicationHeader () const;

    ApplicationHeader_optional&
    ApplicationHeader ();

    void
    ApplicationHeader (const ApplicationHeader_type& x);

    void
    ApplicationHeader (const ApplicationHeader_optional& x);

    void
    ApplicationHeader (::std::auto_ptr< ApplicationHeader_type > p);

    // WindowsRegistryKeysModified
    //
    typedef ::iodef_2_0::WindowsRegistryKeysModified WindowsRegistryKeysModified_type;
    typedef ::xsd::cxx::tree::optional< WindowsRegistryKeysModified_type > WindowsRegistryKeysModified_optional;
    typedef ::xsd::cxx::tree::traits< WindowsRegistryKeysModified_type, char > WindowsRegistryKeysModified_traits;

    const WindowsRegistryKeysModified_optional&
    WindowsRegistryKeysModified () const;

    WindowsRegistryKeysModified_optional&
    WindowsRegistryKeysModified ();

    void
    WindowsRegistryKeysModified (const WindowsRegistryKeysModified_type& x);

    void
    WindowsRegistryKeysModified (const WindowsRegistryKeysModified_optional& x);

    void
    WindowsRegistryKeysModified (::std::auto_ptr< WindowsRegistryKeysModified_type > p);

    // FileData
    //
    typedef ::iodef_2_0::FileData FileData_type;
    typedef ::xsd::cxx::tree::optional< FileData_type > FileData_optional;
    typedef ::xsd::cxx::tree::traits< FileData_type, char > FileData_traits;

    const FileData_optional&
    FileData () const;

    FileData_optional&
    FileData ();

    void
    FileData (const FileData_type& x);

    void
    FileData (const FileData_optional& x);

    void
    FileData (::std::auto_ptr< FileData_type > p);

    // CertificateData
    //
    typedef ::iodef_2_0::CertificateData CertificateData_type;
    typedef ::xsd::cxx::tree::optional< CertificateData_type > CertificateData_optional;
    typedef ::xsd::cxx::tree::traits< CertificateData_type, char > CertificateData_traits;

    const CertificateData_optional&
    CertificateData () const;

    CertificateData_optional&
    CertificateData ();

    void
    CertificateData (const CertificateData_type& x);

    void
    CertificateData (const CertificateData_optional& x);

    void
    CertificateData (::std::auto_ptr< CertificateData_type > p);

    // RegistryHandle
    //
    typedef ::iodef_2_0::RegistryHandle RegistryHandle_type;
    typedef ::xsd::cxx::tree::optional< RegistryHandle_type > RegistryHandle_optional;
    typedef ::xsd::cxx::tree::traits< RegistryHandle_type, char > RegistryHandle_traits;

    const RegistryHandle_optional&
    RegistryHandle () const;

    RegistryHandle_optional&
    RegistryHandle ();

    void
    RegistryHandle (const RegistryHandle_type& x);

    void
    RegistryHandle (const RegistryHandle_optional& x);

    void
    RegistryHandle (::std::auto_ptr< RegistryHandle_type > p);

    // RecordData
    //
    typedef ::iodef_2_0::RecordData RecordData_type;
    typedef ::xsd::cxx::tree::optional< RecordData_type > RecordData_optional;
    typedef ::xsd::cxx::tree::traits< RecordData_type, char > RecordData_traits;

    const RecordData_optional&
    RecordData () const;

    RecordData_optional&
    RecordData ();

    void
    RecordData (const RecordData_type& x);

    void
    RecordData (const RecordData_optional& x);

    void
    RecordData (::std::auto_ptr< RecordData_type > p);

    // EventData
    //
    typedef ::iodef_2_0::EventData EventData_type;
    typedef ::xsd::cxx::tree::optional< EventData_type > EventData_optional;
    typedef ::xsd::cxx::tree::traits< EventData_type, char > EventData_traits;

    const EventData_optional&
    EventData () const;

    EventData_optional&
    EventData ();

    void
    EventData (const EventData_type& x);

    void
    EventData (const EventData_optional& x);

    void
    EventData (::std::auto_ptr< EventData_type > p);

    // Incident
    //
    typedef ::iodef_2_0::Incident Incident_type;
    typedef ::xsd::cxx::tree::optional< Incident_type > Incident_optional;
    typedef ::xsd::cxx::tree::traits< Incident_type, char > Incident_traits;

    const Incident_optional&
    Incident () const;

    Incident_optional&
    Incident ();

    void
    Incident (const Incident_type& x);

    void
    Incident (const Incident_optional& x);

    void
    Incident (::std::auto_ptr< Incident_type > p);

    // Expectation
    //
    typedef ::iodef_2_0::Expectation Expectation_type;
    typedef ::xsd::cxx::tree::sequence< Expectation_type > Expectation_sequence;
    typedef Expectation_sequence::iterator Expectation_iterator;
    typedef Expectation_sequence::const_iterator Expectation_const_iterator;
    typedef ::xsd::cxx::tree::traits< Expectation_type, char > Expectation_traits;

    const Expectation_sequence&
    Expectation () const;

    Expectation_sequence&
    Expectation ();

    void
    Expectation (const Expectation_sequence& s);

    // Reference
    //
    typedef ::iodef_2_0::Reference Reference_type;
    typedef ::xsd::cxx::tree::sequence< Reference_type > Reference_sequence;
    typedef Reference_sequence::iterator Reference_iterator;
    typedef Reference_sequence::const_iterator Reference_const_iterator;
    typedef ::xsd::cxx::tree::traits< Reference_type, char > Reference_traits;

    const Reference_sequence&
    Reference () const;

    Reference_sequence&
    Reference ();

    void
    Reference (const Reference_sequence& s);

    // Assessment
    //
    typedef ::iodef_2_0::Assessment Assessment_type;
    typedef ::xsd::cxx::tree::optional< Assessment_type > Assessment_optional;
    typedef ::xsd::cxx::tree::traits< Assessment_type, char > Assessment_traits;

    const Assessment_optional&
    Assessment () const;

    Assessment_optional&
    Assessment ();

    void
    Assessment (const Assessment_type& x);

    void
    Assessment (const Assessment_optional& x);

    void
    Assessment (::std::auto_ptr< Assessment_type > p);

    // HistoryItem
    //
    typedef ::iodef_2_0::HistoryItem HistoryItem_type;
    typedef ::xsd::cxx::tree::optional< HistoryItem_type > HistoryItem_optional;
    typedef ::xsd::cxx::tree::traits< HistoryItem_type, char > HistoryItem_traits;

    const HistoryItem_optional&
    HistoryItem () const;

    HistoryItem_optional&
    HistoryItem ();

    void
    HistoryItem (const HistoryItem_type& x);

    void
    HistoryItem (const HistoryItem_optional& x);

    void
    HistoryItem (::std::auto_ptr< HistoryItem_type > p);

    // BulkObservable
    //
    typedef ::iodef_2_0::BulkObservable BulkObservable_type;
    typedef ::xsd::cxx::tree::optional< BulkObservable_type > BulkObservable_optional;
    typedef ::xsd::cxx::tree::traits< BulkObservable_type, char > BulkObservable_traits;

    const BulkObservable_optional&
    BulkObservable () const;

    BulkObservable_optional&
    BulkObservable ();

    void
    BulkObservable (const BulkObservable_type& x);

    void
    BulkObservable (const BulkObservable_optional& x);

    void
    BulkObservable (::std::auto_ptr< BulkObservable_type > p);

    // AdditionalData
    //
    typedef ::iodef_2_0::ExtensionType AdditionalData_type;
    typedef ::xsd::cxx::tree::optional< AdditionalData_type > AdditionalData_optional;
    typedef ::xsd::cxx::tree::traits< AdditionalData_type, char > AdditionalData_traits;

    const AdditionalData_optional&
    AdditionalData () const;

    AdditionalData_optional&
    AdditionalData ();

    void
    AdditionalData (const AdditionalData_type& x);

    void
    AdditionalData (const AdditionalData_optional& x);

    void
    AdditionalData (::std::auto_ptr< AdditionalData_type > p);

    // restriction
    //
    typedef ::iodef_2_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // ext-restriction
    //
    typedef ::xml_schema::string ext_restriction_type;
    typedef ::xsd::cxx::tree::optional< ext_restriction_type > ext_restriction_optional;
    typedef ::xsd::cxx::tree::traits< ext_restriction_type, char > ext_restriction_traits;

    const ext_restriction_optional&
    ext_restriction () const;

    ext_restriction_optional&
    ext_restriction ();

    void
    ext_restriction (const ext_restriction_type& x);

    void
    ext_restriction (const ext_restriction_optional& x);

    void
    ext_restriction (::std::auto_ptr< ext_restriction_type > p);

    // Constructors.
    //
    Observable ();

    Observable (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    Observable (const Observable& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual Observable*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Observable&
    operator= (const Observable& x);

    virtual 
    ~Observable ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Address_optional Address_;
    DomainData_optional DomainData_;
    EmailData_optional EmailData_;
    ApplicationHeader_optional ApplicationHeader_;
    WindowsRegistryKeysModified_optional WindowsRegistryKeysModified_;
    FileData_optional FileData_;
    CertificateData_optional CertificateData_;
    RegistryHandle_optional RegistryHandle_;
    RecordData_optional RecordData_;
    EventData_optional EventData_;
    Incident_optional Incident_;
    Expectation_sequence Expectation_;
    Reference_sequence Reference_;
    Assessment_optional Assessment_;
    HistoryItem_optional HistoryItem_;
    BulkObservable_optional BulkObservable_;
    AdditionalData_optional AdditionalData_;
    restriction_optional restriction_;
    ext_restriction_optional ext_restriction_;
  };

  class BulkObservable: public ::xml_schema::type
  {
    public:
    // BulkObservableFormat
    //
    typedef ::iodef_2_0::BulkObservableFormat BulkObservableFormat_type;
    typedef ::xsd::cxx::tree::optional< BulkObservableFormat_type > BulkObservableFormat_optional;
    typedef ::xsd::cxx::tree::traits< BulkObservableFormat_type, char > BulkObservableFormat_traits;

    const BulkObservableFormat_optional&
    BulkObservableFormat () const;

    BulkObservableFormat_optional&
    BulkObservableFormat ();

    void
    BulkObservableFormat (const BulkObservableFormat_type& x);

    void
    BulkObservableFormat (const BulkObservableFormat_optional& x);

    void
    BulkObservableFormat (::std::auto_ptr< BulkObservableFormat_type > p);

    // BulkObservableList
    //
    typedef ::xml_schema::string BulkObservableList_type;
    typedef ::xsd::cxx::tree::optional< BulkObservableList_type > BulkObservableList_optional;
    typedef ::xsd::cxx::tree::traits< BulkObservableList_type, char > BulkObservableList_traits;

    const BulkObservableList_optional&
    BulkObservableList () const;

    BulkObservableList_optional&
    BulkObservableList ();

    void
    BulkObservableList (const BulkObservableList_type& x);

    void
    BulkObservableList (const BulkObservableList_optional& x);

    void
    BulkObservableList (::std::auto_ptr< BulkObservableList_type > p);

    // type
    //
    typedef ::iodef_2_0::observable_type_type type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::auto_ptr< type_type > p);

    // ext-type
    //
    typedef ::xml_schema::string ext_type_type;
    typedef ::xsd::cxx::tree::optional< ext_type_type > ext_type_optional;
    typedef ::xsd::cxx::tree::traits< ext_type_type, char > ext_type_traits;

    const ext_type_optional&
    ext_type () const;

    ext_type_optional&
    ext_type ();

    void
    ext_type (const ext_type_type& x);

    void
    ext_type (const ext_type_optional& x);

    void
    ext_type (::std::auto_ptr< ext_type_type > p);

    // Constructors.
    //
    BulkObservable (const type_type&);

    BulkObservable (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    BulkObservable (const BulkObservable& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual BulkObservable*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    BulkObservable&
    operator= (const BulkObservable& x);

    virtual 
    ~BulkObservable ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    BulkObservableFormat_optional BulkObservableFormat_;
    BulkObservableList_optional BulkObservableList_;
    ::xsd::cxx::tree::one< type_type > type_;
    ext_type_optional ext_type_;
  };

  class BulkObservableFormat: public ::xml_schema::type
  {
    public:
    // Hash
    //
    typedef ::iodef_2_0::Hash Hash_type;
    typedef ::xsd::cxx::tree::optional< Hash_type > Hash_optional;
    typedef ::xsd::cxx::tree::traits< Hash_type, char > Hash_traits;

    const Hash_optional&
    Hash () const;

    Hash_optional&
    Hash ();

    void
    Hash (const Hash_type& x);

    void
    Hash (const Hash_optional& x);

    void
    Hash (::std::auto_ptr< Hash_type > p);

    // AdditionalData
    //
    typedef ::iodef_2_0::ExtensionType AdditionalData_type;
    typedef ::xsd::cxx::tree::sequence< AdditionalData_type > AdditionalData_sequence;
    typedef AdditionalData_sequence::iterator AdditionalData_iterator;
    typedef AdditionalData_sequence::const_iterator AdditionalData_const_iterator;
    typedef ::xsd::cxx::tree::traits< AdditionalData_type, char > AdditionalData_traits;

    const AdditionalData_sequence&
    AdditionalData () const;

    AdditionalData_sequence&
    AdditionalData ();

    void
    AdditionalData (const AdditionalData_sequence& s);

    // Constructors.
    //
    BulkObservableFormat ();

    BulkObservableFormat (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    BulkObservableFormat (const BulkObservableFormat& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual BulkObservableFormat*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    BulkObservableFormat&
    operator= (const BulkObservableFormat& x);

    virtual 
    ~BulkObservableFormat ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Hash_optional Hash_;
    AdditionalData_sequence AdditionalData_;
  };

  class IndicatorExpression: public ::xml_schema::type
  {
    public:
    // IndicatorExpression
    //
    typedef ::iodef_2_0::IndicatorExpression IndicatorExpression1_type;
    typedef ::xsd::cxx::tree::optional< IndicatorExpression1_type > IndicatorExpression1_optional;
    typedef ::xsd::cxx::tree::traits< IndicatorExpression1_type, char > IndicatorExpression1_traits;

    const IndicatorExpression1_optional&
    IndicatorExpression1 () const;

    IndicatorExpression1_optional&
    IndicatorExpression1 ();

    void
    IndicatorExpression1 (const IndicatorExpression1_type& x);

    void
    IndicatorExpression1 (const IndicatorExpression1_optional& x);

    void
    IndicatorExpression1 (::std::auto_ptr< IndicatorExpression1_type > p);

    // Observable
    //
    typedef ::iodef_2_0::Observable Observable_type;
    typedef ::xsd::cxx::tree::optional< Observable_type > Observable_optional;
    typedef ::xsd::cxx::tree::traits< Observable_type, char > Observable_traits;

    const Observable_optional&
    Observable () const;

    Observable_optional&
    Observable ();

    void
    Observable (const Observable_type& x);

    void
    Observable (const Observable_optional& x);

    void
    Observable (::std::auto_ptr< Observable_type > p);

    // ObservableReference
    //
    typedef ::iodef_2_0::ObservableReference ObservableReference_type;
    typedef ::xsd::cxx::tree::optional< ObservableReference_type > ObservableReference_optional;
    typedef ::xsd::cxx::tree::traits< ObservableReference_type, char > ObservableReference_traits;

    const ObservableReference_optional&
    ObservableReference () const;

    ObservableReference_optional&
    ObservableReference ();

    void
    ObservableReference (const ObservableReference_type& x);

    void
    ObservableReference (const ObservableReference_optional& x);

    void
    ObservableReference (::std::auto_ptr< ObservableReference_type > p);

    // IndicatorReference
    //
    typedef ::iodef_2_0::IndicatorReference IndicatorReference_type;
    typedef ::xsd::cxx::tree::optional< IndicatorReference_type > IndicatorReference_optional;
    typedef ::xsd::cxx::tree::traits< IndicatorReference_type, char > IndicatorReference_traits;

    const IndicatorReference_optional&
    IndicatorReference () const;

    IndicatorReference_optional&
    IndicatorReference ();

    void
    IndicatorReference (const IndicatorReference_type& x);

    void
    IndicatorReference (const IndicatorReference_optional& x);

    void
    IndicatorReference (::std::auto_ptr< IndicatorReference_type > p);

    // AlternativeIndicatorID
    //
    typedef ::iodef_2_0::AlternativeIndicatorID AlternativeIndicatorID_type;
    typedef ::xsd::cxx::tree::sequence< AlternativeIndicatorID_type > AlternativeIndicatorID_sequence;
    typedef AlternativeIndicatorID_sequence::iterator AlternativeIndicatorID_iterator;
    typedef AlternativeIndicatorID_sequence::const_iterator AlternativeIndicatorID_const_iterator;
    typedef ::xsd::cxx::tree::traits< AlternativeIndicatorID_type, char > AlternativeIndicatorID_traits;

    const AlternativeIndicatorID_sequence&
    AlternativeIndicatorID () const;

    AlternativeIndicatorID_sequence&
    AlternativeIndicatorID ();

    void
    AlternativeIndicatorID (const AlternativeIndicatorID_sequence& s);

    // operator
    //
    typedef ::iodef_2_0::indicatorexpression_operator_type operator_type;
    typedef ::xsd::cxx::tree::traits< operator_type, char > operator_traits;

    const operator_type&
    operator_ () const;

    operator_type&
    operator_ ();

    void
    operator_ (const operator_type& x);

    void
    operator_ (::std::auto_ptr< operator_type > p);

    // Constructors.
    //
    IndicatorExpression (const operator_type&);

    IndicatorExpression (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    IndicatorExpression (const IndicatorExpression& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual IndicatorExpression*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    IndicatorExpression&
    operator= (const IndicatorExpression& x);

    virtual 
    ~IndicatorExpression ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    IndicatorExpression1_optional IndicatorExpression1_;
    Observable_optional Observable_;
    ObservableReference_optional ObservableReference_;
    IndicatorReference_optional IndicatorReference_;
    AlternativeIndicatorID_sequence AlternativeIndicatorID_;
    ::xsd::cxx::tree::one< operator_type > operator__;
  };

  class ObservableReference: public ::xml_schema::type
  {
    public:
    // uid-ref
    //
    typedef ::xml_schema::idref uid_ref_type;
    typedef ::xsd::cxx::tree::traits< uid_ref_type, char > uid_ref_traits;

    const uid_ref_type&
    uid_ref () const;

    uid_ref_type&
    uid_ref ();

    void
    uid_ref (const uid_ref_type& x);

    void
    uid_ref (::std::auto_ptr< uid_ref_type > p);

    // Constructors.
    //
    ObservableReference (const uid_ref_type&);

    ObservableReference (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    ObservableReference (const ObservableReference& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual ObservableReference*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    ObservableReference&
    operator= (const ObservableReference& x);

    virtual 
    ~ObservableReference ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< uid_ref_type > uid_ref_;
  };

  class IndicatorReference: public ::xml_schema::type
  {
    public:
    // uid-ref
    //
    typedef ::xml_schema::idref uid_ref_type;
    typedef ::xsd::cxx::tree::optional< uid_ref_type > uid_ref_optional;
    typedef ::xsd::cxx::tree::traits< uid_ref_type, char > uid_ref_traits;

    const uid_ref_optional&
    uid_ref () const;

    uid_ref_optional&
    uid_ref ();

    void
    uid_ref (const uid_ref_type& x);

    void
    uid_ref (const uid_ref_optional& x);

    void
    uid_ref (::std::auto_ptr< uid_ref_type > p);

    // euid-ref
    //
    typedef ::xml_schema::string euid_ref_type;
    typedef ::xsd::cxx::tree::optional< euid_ref_type > euid_ref_optional;
    typedef ::xsd::cxx::tree::traits< euid_ref_type, char > euid_ref_traits;

    const euid_ref_optional&
    euid_ref () const;

    euid_ref_optional&
    euid_ref ();

    void
    euid_ref (const euid_ref_type& x);

    void
    euid_ref (const euid_ref_optional& x);

    void
    euid_ref (::std::auto_ptr< euid_ref_type > p);

    // version
    //
    typedef ::xml_schema::string version_type;
    typedef ::xsd::cxx::tree::optional< version_type > version_optional;
    typedef ::xsd::cxx::tree::traits< version_type, char > version_traits;

    const version_optional&
    version () const;

    version_optional&
    version ();

    void
    version (const version_type& x);

    void
    version (const version_optional& x);

    void
    version (::std::auto_ptr< version_type > p);

    // Constructors.
    //
    IndicatorReference ();

    IndicatorReference (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    IndicatorReference (const IndicatorReference& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual IndicatorReference*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    IndicatorReference&
    operator= (const IndicatorReference& x);

    virtual 
    ~IndicatorReference ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    uid_ref_optional uid_ref_;
    euid_ref_optional euid_ref_;
    version_optional version_;
  };

  class occurrence: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      actual,
      potential
    };

    occurrence (value v);

    occurrence (const char* v);

    occurrence (const ::std::string& v);

    occurrence (const ::xml_schema::nmtoken& v);

    occurrence (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    occurrence (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    occurrence (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    occurrence (const occurrence& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual occurrence*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    occurrence&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_occurrence_convert ();
    }

    protected:
    value
    _xsd_occurrence_convert () const;

    public:
    static const char* const _xsd_occurrence_literals_[2];
    static const value _xsd_occurrence_indexes_[2];
  };

  class completion: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      failed,
      succeeded
    };

    completion (value v);

    completion (const char* v);

    completion (const ::std::string& v);

    completion (const ::xml_schema::nmtoken& v);

    completion (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    completion (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    completion (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    completion (const completion& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual completion*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    completion&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_completion_convert ();
    }

    protected:
    value
    _xsd_completion_convert () const;

    public:
    static const char* const _xsd_completion_literals_[2];
    static const value _xsd_completion_indexes_[2];
  };

  class record_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      A,
      AAAA,
      AFSDB,
      APL,
      AXFR,
      CAA,
      CERT,
      CNAME,
      DHCID,
      DLV,
      DNAME,
      DNSKEY,
      DS,
      HIP,
      IXFR,
      IPSECKEY,
      LOC,
      MX,
      NAPTR,
      NS,
      NSEC,
      NSEC3,
      NSEC3PARAM,
      OPT,
      PTR,
      RRSIG,
      RP,
      SIG,
      SOA,
      SPF,
      SRV,
      SSHFP,
      TA,
      TKEY,
      TLSA,
      TSIG,
      TXT
    };

    record_type (value v);

    record_type (const char* v);

    record_type (const ::std::string& v);

    record_type (const ::xml_schema::nmtoken& v);

    record_type (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    record_type (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    record_type (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    record_type (const record_type& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual record_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    record_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_record_type_convert ();
    }

    protected:
    value
    _xsd_record_type_convert () const;

    public:
    static const char* const _xsd_record_type_literals_[37];
    static const value _xsd_record_type_indexes_[37];
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace iodef_2_0
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::IODEF_Document >
  IODEF_Document_ (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IODEF_Document >
  IODEF_Document_ (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IODEF_Document >
  IODEF_Document_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::IODEF_Document >
  IODEF_Document_ (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IODEF_Document >
  IODEF_Document_ (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IODEF_Document >
  IODEF_Document_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IODEF_Document >
  IODEF_Document_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IODEF_Document >
  IODEF_Document_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IODEF_Document >
  IODEF_Document_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::IODEF_Document >
  IODEF_Document_ (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IODEF_Document >
  IODEF_Document_ (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IODEF_Document >
  IODEF_Document_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::IODEF_Document >
  IODEF_Document_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IODEF_Document >
  IODEF_Document_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::Incident >
  Incident_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Incident >
  Incident_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Incident >
  Incident_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::Incident >
  Incident_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Incident >
  Incident_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Incident >
  Incident_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Incident >
  Incident_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Incident >
  Incident_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Incident >
  Incident_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::Incident >
  Incident_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Incident >
  Incident_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Incident >
  Incident_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::Incident >
  Incident_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Incident >
  Incident_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::IncidentIDType >
  IncidentID (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IncidentIDType >
  IncidentID (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IncidentIDType >
  IncidentID (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::IncidentIDType >
  IncidentID (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IncidentIDType >
  IncidentID (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IncidentIDType >
  IncidentID (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IncidentIDType >
  IncidentID (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IncidentIDType >
  IncidentID (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IncidentIDType >
  IncidentID (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::IncidentIDType >
  IncidentID (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IncidentIDType >
  IncidentID (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IncidentIDType >
  IncidentID (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::IncidentIDType >
  IncidentID (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IncidentIDType >
  IncidentID (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::AlternativeID >
  AlternativeID_ (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::AlternativeID >
  AlternativeID_ (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::AlternativeID >
  AlternativeID_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::AlternativeID >
  AlternativeID_ (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::AlternativeID >
  AlternativeID_ (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::AlternativeID >
  AlternativeID_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::AlternativeID >
  AlternativeID_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::AlternativeID >
  AlternativeID_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::AlternativeID >
  AlternativeID_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::AlternativeID >
  AlternativeID_ (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::AlternativeID >
  AlternativeID_ (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::AlternativeID >
  AlternativeID_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::AlternativeID >
  AlternativeID_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::AlternativeID >
  AlternativeID_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::RelatedActivity >
  RelatedActivity_ (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RelatedActivity >
  RelatedActivity_ (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RelatedActivity >
  RelatedActivity_ (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::RelatedActivity >
  RelatedActivity_ (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RelatedActivity >
  RelatedActivity_ (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RelatedActivity >
  RelatedActivity_ (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RelatedActivity >
  RelatedActivity_ (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RelatedActivity >
  RelatedActivity_ (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RelatedActivity >
  RelatedActivity_ (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::RelatedActivity >
  RelatedActivity_ (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RelatedActivity >
  RelatedActivity_ (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RelatedActivity >
  RelatedActivity_ (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::RelatedActivity >
  RelatedActivity_ (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RelatedActivity >
  RelatedActivity_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::ThreatActor >
  ThreatActor_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ThreatActor >
  ThreatActor_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ThreatActor >
  ThreatActor_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::ThreatActor >
  ThreatActor_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ThreatActor >
  ThreatActor_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ThreatActor >
  ThreatActor_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ThreatActor >
  ThreatActor_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ThreatActor >
  ThreatActor_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ThreatActor >
  ThreatActor_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::ThreatActor >
  ThreatActor_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ThreatActor >
  ThreatActor_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ThreatActor >
  ThreatActor_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::ThreatActor >
  ThreatActor_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ThreatActor >
  ThreatActor_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ThreatActorID (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ThreatActorID (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ThreatActorID (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ThreatActorID (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ThreatActorID (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ThreatActorID (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ThreatActorID (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ThreatActorID (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ThreatActorID (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ThreatActorID (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ThreatActorID (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ThreatActorID (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ThreatActorID (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ThreatActorID (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::Campaign >
  Campaign_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Campaign >
  Campaign_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Campaign >
  Campaign_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::Campaign >
  Campaign_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Campaign >
  Campaign_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Campaign >
  Campaign_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Campaign >
  Campaign_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Campaign >
  Campaign_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Campaign >
  Campaign_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::Campaign >
  Campaign_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Campaign >
  Campaign_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Campaign >
  Campaign_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::Campaign >
  Campaign_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Campaign >
  Campaign_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  CampaignID (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  CampaignID (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  CampaignID (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  CampaignID (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  CampaignID (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  CampaignID (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  CampaignID (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  CampaignID (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  CampaignID (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  CampaignID (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  CampaignID (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  CampaignID (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  CampaignID (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  CampaignID (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  AdditionalData (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  AdditionalData (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  AdditionalData (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  AdditionalData (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  AdditionalData (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  AdditionalData (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  AdditionalData (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  AdditionalData (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  AdditionalData (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  AdditionalData (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  AdditionalData (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  AdditionalData (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  AdditionalData (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  AdditionalData (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::Contact >
  Contact_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Contact >
  Contact_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Contact >
  Contact_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::Contact >
  Contact_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Contact >
  Contact_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Contact >
  Contact_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Contact >
  Contact_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Contact >
  Contact_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Contact >
  Contact_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::Contact >
  Contact_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Contact >
  Contact_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Contact >
  Contact_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::Contact >
  Contact_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Contact >
  Contact_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactName (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactName (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactName (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactName (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactName (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactName (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactName (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactName (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactName (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactName (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactName (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactName (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactName (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactTitle (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactTitle (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactTitle (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactTitle (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactTitle (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactTitle (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactTitle (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactTitle (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactTitle (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactTitle (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactTitle (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactTitle (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactTitle (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  ContactTitle (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::RegistryHandle >
  RegistryHandle_ (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RegistryHandle >
  RegistryHandle_ (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RegistryHandle >
  RegistryHandle_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::RegistryHandle >
  RegistryHandle_ (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RegistryHandle >
  RegistryHandle_ (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RegistryHandle >
  RegistryHandle_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RegistryHandle >
  RegistryHandle_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RegistryHandle >
  RegistryHandle_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RegistryHandle >
  RegistryHandle_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::RegistryHandle >
  RegistryHandle_ (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RegistryHandle >
  RegistryHandle_ (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RegistryHandle >
  RegistryHandle_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::RegistryHandle >
  RegistryHandle_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RegistryHandle >
  RegistryHandle_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::PostalAddress >
  PostalAddress_ (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::PostalAddress >
  PostalAddress_ (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::PostalAddress >
  PostalAddress_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::PostalAddress >
  PostalAddress_ (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::PostalAddress >
  PostalAddress_ (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::PostalAddress >
  PostalAddress_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::PostalAddress >
  PostalAddress_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::PostalAddress >
  PostalAddress_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::PostalAddress >
  PostalAddress_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::PostalAddress >
  PostalAddress_ (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::PostalAddress >
  PostalAddress_ (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::PostalAddress >
  PostalAddress_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::PostalAddress >
  PostalAddress_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::PostalAddress >
  PostalAddress_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Email (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Email (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Email (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Email (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Email (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Email (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Email (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Email (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Email (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Email (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Email (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Email (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Email (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Email (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Telephone (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Telephone (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Telephone (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Telephone (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Telephone (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Telephone (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Telephone (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Telephone (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Telephone (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Telephone (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Telephone (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Telephone (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Telephone (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Telephone (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Fax (const ::std::string& uri,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Fax (const ::std::string& uri,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Fax (const ::std::string& uri,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Fax (::std::istream& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Fax (::std::istream& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Fax (::std::istream& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Fax (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Fax (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Fax (::std::istream& is,
       const ::std::string& id,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Fax (::xercesc::InputSource& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Fax (::xercesc::InputSource& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Fax (::xercesc::InputSource& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Fax (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ContactMeansType >
  Fax (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  RecoveryTime (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  RecoveryTime (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  RecoveryTime (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  RecoveryTime (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  RecoveryTime (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  RecoveryTime (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  RecoveryTime (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  RecoveryTime (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  RecoveryTime (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  RecoveryTime (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  RecoveryTime (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  RecoveryTime (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  RecoveryTime (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  RecoveryTime (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  GenerationTime (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  GenerationTime (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  GenerationTime (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  GenerationTime (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  GenerationTime (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  GenerationTime (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  GenerationTime (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  GenerationTime (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  GenerationTime (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  GenerationTime (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  GenerationTime (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  GenerationTime (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  GenerationTime (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  GenerationTime (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::TimezoneType >
  Timezone (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::TimezoneType >
  Timezone (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::TimezoneType >
  Timezone (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::TimezoneType >
  Timezone (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::TimezoneType >
  Timezone (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::TimezoneType >
  Timezone (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::TimezoneType >
  Timezone (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::TimezoneType >
  Timezone (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::TimezoneType >
  Timezone (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::TimezoneType >
  Timezone (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::TimezoneType >
  Timezone (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::TimezoneType >
  Timezone (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::TimezoneType >
  Timezone (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::TimezoneType >
  Timezone (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::History >
  History_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::History >
  History_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::History >
  History_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::History >
  History_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::History >
  History_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::History >
  History_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::History >
  History_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::History >
  History_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::History >
  History_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::History >
  History_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::History >
  History_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::History >
  History_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::History >
  History_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::History >
  History_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::HistoryItem >
  HistoryItem_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::HistoryItem >
  HistoryItem_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::HistoryItem >
  HistoryItem_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::HistoryItem >
  HistoryItem_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::HistoryItem >
  HistoryItem_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::HistoryItem >
  HistoryItem_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::HistoryItem >
  HistoryItem_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::HistoryItem >
  HistoryItem_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::HistoryItem >
  HistoryItem_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::HistoryItem >
  HistoryItem_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::HistoryItem >
  HistoryItem_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::HistoryItem >
  HistoryItem_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::HistoryItem >
  HistoryItem_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::HistoryItem >
  HistoryItem_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  DefinedCOA (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  DefinedCOA (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  DefinedCOA (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  DefinedCOA (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  DefinedCOA (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  DefinedCOA (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  DefinedCOA (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  DefinedCOA (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  DefinedCOA (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  DefinedCOA (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  DefinedCOA (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  DefinedCOA (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  DefinedCOA (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  DefinedCOA (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::Expectation >
  Expectation_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Expectation >
  Expectation_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Expectation >
  Expectation_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::Expectation >
  Expectation_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Expectation >
  Expectation_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Expectation >
  Expectation_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Expectation >
  Expectation_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Expectation >
  Expectation_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Expectation >
  Expectation_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::Expectation >
  Expectation_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Expectation >
  Expectation_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Expectation >
  Expectation_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::Expectation >
  Expectation_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Expectation >
  Expectation_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::Discovery >
  Discovery_ (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Discovery >
  Discovery_ (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Discovery >
  Discovery_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::Discovery >
  Discovery_ (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Discovery >
  Discovery_ (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Discovery >
  Discovery_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Discovery >
  Discovery_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Discovery >
  Discovery_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Discovery >
  Discovery_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::Discovery >
  Discovery_ (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Discovery >
  Discovery_ (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Discovery >
  Discovery_ (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::Discovery >
  Discovery_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Discovery >
  Discovery_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::DetectionPattern >
  DetectionPattern_ (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DetectionPattern >
  DetectionPattern_ (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DetectionPattern >
  DetectionPattern_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::DetectionPattern >
  DetectionPattern_ (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DetectionPattern >
  DetectionPattern_ (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DetectionPattern >
  DetectionPattern_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DetectionPattern >
  DetectionPattern_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DetectionPattern >
  DetectionPattern_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DetectionPattern >
  DetectionPattern_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::DetectionPattern >
  DetectionPattern_ (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DetectionPattern >
  DetectionPattern_ (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DetectionPattern >
  DetectionPattern_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::DetectionPattern >
  DetectionPattern_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DetectionPattern >
  DetectionPattern_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::Method >
  Method_ (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Method >
  Method_ (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Method >
  Method_ (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::Method >
  Method_ (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Method >
  Method_ (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Method >
  Method_ (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Method >
  Method_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Method >
  Method_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Method >
  Method_ (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::Method >
  Method_ (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Method >
  Method_ (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Method >
  Method_ (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::Method >
  Method_ (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Method >
  Method_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::Reference >
  Reference_ (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Reference >
  Reference_ (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Reference >
  Reference_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::Reference >
  Reference_ (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Reference >
  Reference_ (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Reference >
  Reference_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Reference >
  Reference_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Reference >
  Reference_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Reference >
  Reference_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::Reference >
  Reference_ (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Reference >
  Reference_ (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Reference >
  Reference_ (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::Reference >
  Reference_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Reference >
  Reference_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::Assessment >
  Assessment_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Assessment >
  Assessment_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Assessment >
  Assessment_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::Assessment >
  Assessment_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Assessment >
  Assessment_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Assessment >
  Assessment_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Assessment >
  Assessment_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Assessment >
  Assessment_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Assessment >
  Assessment_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::Assessment >
  Assessment_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Assessment >
  Assessment_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Assessment >
  Assessment_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::Assessment >
  Assessment_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Assessment >
  Assessment_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  IncidentCategory (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  IncidentCategory (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  IncidentCategory (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  IncidentCategory (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  IncidentCategory (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  IncidentCategory (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  IncidentCategory (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  IncidentCategory (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  IncidentCategory (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  IncidentCategory (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  IncidentCategory (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  IncidentCategory (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  IncidentCategory (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  IncidentCategory (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  BusinessImpact (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  BusinessImpact (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  BusinessImpact (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  BusinessImpact (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  BusinessImpact (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  BusinessImpact (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  BusinessImpact (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  BusinessImpact (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  BusinessImpact (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  BusinessImpact (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  BusinessImpact (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  BusinessImpact (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  BusinessImpact (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  BusinessImpact (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  IntendedImpact (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  IntendedImpact (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  IntendedImpact (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  IntendedImpact (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  IntendedImpact (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  IntendedImpact (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  IntendedImpact (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  IntendedImpact (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  IntendedImpact (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  IntendedImpact (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  IntendedImpact (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  IntendedImpact (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  IntendedImpact (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BusinessImpactType >
  IntendedImpact (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  MitigatingFactor (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  MitigatingFactor (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  MitigatingFactor (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  MitigatingFactor (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  MitigatingFactor (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  MitigatingFactor (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  MitigatingFactor (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  MitigatingFactor (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  MitigatingFactor (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  MitigatingFactor (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  MitigatingFactor (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  MitigatingFactor (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  MitigatingFactor (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  MitigatingFactor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::SystemImpact >
  SystemImpact_ (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SystemImpact >
  SystemImpact_ (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SystemImpact >
  SystemImpact_ (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::SystemImpact >
  SystemImpact_ (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SystemImpact >
  SystemImpact_ (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SystemImpact >
  SystemImpact_ (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SystemImpact >
  SystemImpact_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SystemImpact >
  SystemImpact_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SystemImpact >
  SystemImpact_ (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::SystemImpact >
  SystemImpact_ (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SystemImpact >
  SystemImpact_ (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SystemImpact >
  SystemImpact_ (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::SystemImpact >
  SystemImpact_ (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SystemImpact >
  SystemImpact_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::TimeImpact >
  TimeImpact_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::TimeImpact >
  TimeImpact_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::TimeImpact >
  TimeImpact_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::TimeImpact >
  TimeImpact_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::TimeImpact >
  TimeImpact_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::TimeImpact >
  TimeImpact_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::TimeImpact >
  TimeImpact_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::TimeImpact >
  TimeImpact_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::TimeImpact >
  TimeImpact_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::TimeImpact >
  TimeImpact_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::TimeImpact >
  TimeImpact_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::TimeImpact >
  TimeImpact_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::TimeImpact >
  TimeImpact_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::TimeImpact >
  TimeImpact_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::MonetaryImpact >
  MonetaryImpact_ (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MonetaryImpact >
  MonetaryImpact_ (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MonetaryImpact >
  MonetaryImpact_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::MonetaryImpact >
  MonetaryImpact_ (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MonetaryImpact >
  MonetaryImpact_ (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MonetaryImpact >
  MonetaryImpact_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MonetaryImpact >
  MonetaryImpact_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MonetaryImpact >
  MonetaryImpact_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MonetaryImpact >
  MonetaryImpact_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::MonetaryImpact >
  MonetaryImpact_ (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MonetaryImpact >
  MonetaryImpact_ (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MonetaryImpact >
  MonetaryImpact_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::MonetaryImpact >
  MonetaryImpact_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MonetaryImpact >
  MonetaryImpact_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::Confidence >
  Confidence_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Confidence >
  Confidence_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Confidence >
  Confidence_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::Confidence >
  Confidence_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Confidence >
  Confidence_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Confidence >
  Confidence_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Confidence >
  Confidence_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Confidence >
  Confidence_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Confidence >
  Confidence_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::Confidence >
  Confidence_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Confidence >
  Confidence_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Confidence >
  Confidence_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::Confidence >
  Confidence_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Confidence >
  Confidence_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::EventData >
  EventData_ (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::EventData >
  EventData_ (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::EventData >
  EventData_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::EventData >
  EventData_ (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::EventData >
  EventData_ (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::EventData >
  EventData_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::EventData >
  EventData_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::EventData >
  EventData_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::EventData >
  EventData_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::EventData >
  EventData_ (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::EventData >
  EventData_ (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::EventData >
  EventData_ (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::EventData >
  EventData_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::EventData >
  EventData_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::Flow >
  Flow_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Flow >
  Flow_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Flow >
  Flow_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::Flow >
  Flow_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Flow >
  Flow_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Flow >
  Flow_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Flow >
  Flow_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Flow >
  Flow_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Flow >
  Flow_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::Flow >
  Flow_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Flow >
  Flow_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Flow >
  Flow_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::Flow >
  Flow_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Flow >
  Flow_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::System >
  System_ (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::System >
  System_ (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::System >
  System_ (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::System >
  System_ (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::System >
  System_ (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::System >
  System_ (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::System >
  System_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::System >
  System_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::System >
  System_ (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::System >
  System_ (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::System >
  System_ (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::System >
  System_ (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::System >
  System_ (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::System >
  System_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::Node >
  Node_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Node >
  Node_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Node >
  Node_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::Node >
  Node_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Node >
  Node_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Node >
  Node_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Node >
  Node_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Node >
  Node_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Node >
  Node_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::Node >
  Node_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Node >
  Node_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Node >
  Node_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::Node >
  Node_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Node >
  Node_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::Address >
  Address_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Address >
  Address_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Address >
  Address_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::Address >
  Address_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Address >
  Address_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Address >
  Address_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Address >
  Address_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Address >
  Address_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Address >
  Address_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::Address >
  Address_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Address >
  Address_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Address >
  Address_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::Address >
  Address_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Address >
  Address_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Location (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Location (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Location (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Location (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Location (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Location (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Location (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Location (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Location (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Location (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Location (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Location (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Location (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Location (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::NodeRole >
  NodeRole_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::NodeRole >
  NodeRole_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::NodeRole >
  NodeRole_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::NodeRole >
  NodeRole_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::NodeRole >
  NodeRole_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::NodeRole >
  NodeRole_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::NodeRole >
  NodeRole_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::NodeRole >
  NodeRole_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::NodeRole >
  NodeRole_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::NodeRole >
  NodeRole_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::NodeRole >
  NodeRole_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::NodeRole >
  NodeRole_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::NodeRole >
  NodeRole_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::NodeRole >
  NodeRole_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::Service >
  Service_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Service >
  Service_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Service >
  Service_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::Service >
  Service_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Service >
  Service_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Service >
  Service_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Service >
  Service_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Service >
  Service_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Service >
  Service_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::Service >
  Service_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Service >
  Service_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Service >
  Service_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::Service >
  Service_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Service >
  Service_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::integer >
  Port (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  Port (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  Port (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::integer >
  Port (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  Port (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  Port (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  Port (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  Port (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  Port (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::integer >
  Port (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  Port (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  Port (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::integer >
  Port (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  Port (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::PortlistType >
  Portlist (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::PortlistType >
  Portlist (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::PortlistType >
  Portlist (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::PortlistType >
  Portlist (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::PortlistType >
  Portlist (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::PortlistType >
  Portlist (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::PortlistType >
  Portlist (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::PortlistType >
  Portlist (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::PortlistType >
  Portlist (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::PortlistType >
  Portlist (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::PortlistType >
  Portlist (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::PortlistType >
  Portlist (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::PortlistType >
  Portlist (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::PortlistType >
  Portlist (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoType (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoType (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoType (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoType (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoType (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoType (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoType (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoType (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoType (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoType (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoType (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoType (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoType (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoType (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoCode (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoCode (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoCode (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoCode (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoCode (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoCode (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoCode (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoCode (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoCode (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoCode (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoCode (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoCode (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoCode (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoCode (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoField (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoField (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoField (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoField (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoField (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoField (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoField (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoField (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoField (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoField (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoField (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoField (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoField (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  ProtoField (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  ApplicationHeader (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  ApplicationHeader (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  ApplicationHeader (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  ApplicationHeader (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  ApplicationHeader (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  ApplicationHeader (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  ApplicationHeader (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  ApplicationHeader (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  ApplicationHeader (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  ApplicationHeader (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  ApplicationHeader (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  ApplicationHeader (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  ApplicationHeader (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  ApplicationHeader (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::ServiceName >
  ServiceName_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ServiceName >
  ServiceName_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ServiceName >
  ServiceName_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::ServiceName >
  ServiceName_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ServiceName >
  ServiceName_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ServiceName >
  ServiceName_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ServiceName >
  ServiceName_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ServiceName >
  ServiceName_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ServiceName >
  ServiceName_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::ServiceName >
  ServiceName_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ServiceName >
  ServiceName_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ServiceName >
  ServiceName_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::ServiceName >
  ServiceName_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ServiceName >
  ServiceName_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  IANAService (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  IANAService (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  IANAService (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  IANAService (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  IANAService (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  IANAService (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  IANAService (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  IANAService (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  IANAService (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  IANAService (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  IANAService (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  IANAService (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  IANAService (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  IANAService (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::Counter >
  Counter_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Counter >
  Counter_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Counter >
  Counter_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::Counter >
  Counter_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Counter >
  Counter_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Counter >
  Counter_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Counter >
  Counter_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Counter >
  Counter_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Counter >
  Counter_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::Counter >
  Counter_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Counter >
  Counter_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Counter >
  Counter_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::Counter >
  Counter_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Counter >
  Counter_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::EmailData >
  EmailData_ (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::EmailData >
  EmailData_ (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::EmailData >
  EmailData_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::EmailData >
  EmailData_ (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::EmailData >
  EmailData_ (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::EmailData >
  EmailData_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::EmailData >
  EmailData_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::EmailData >
  EmailData_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::EmailData >
  EmailData_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::EmailData >
  EmailData_ (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::EmailData >
  EmailData_ (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::EmailData >
  EmailData_ (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::EmailData >
  EmailData_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::EmailData >
  EmailData_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailFrom (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailFrom (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailFrom (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailFrom (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailFrom (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailFrom (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailFrom (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailFrom (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailFrom (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailFrom (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailFrom (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailFrom (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailFrom (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailFrom (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailSubject (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailSubject (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailSubject (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailSubject (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailSubject (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailSubject (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailSubject (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailSubject (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailSubject (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailSubject (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailSubject (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailSubject (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailSubject (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailSubject (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailX_Mailer (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailX_Mailer (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailX_Mailer (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailX_Mailer (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailX_Mailer (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailX_Mailer (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailX_Mailer (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailX_Mailer (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailX_Mailer (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailX_Mailer (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailX_Mailer (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailX_Mailer (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailX_Mailer (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  EmailX_Mailer (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  EmailHeaderField (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  EmailHeaderField (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  EmailHeaderField (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  EmailHeaderField (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  EmailHeaderField (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  EmailHeaderField (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  EmailHeaderField (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  EmailHeaderField (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  EmailHeaderField (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  EmailHeaderField (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  EmailHeaderField (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  EmailHeaderField (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  EmailHeaderField (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ApplicationHeaderType >
  EmailHeaderField (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::DomainData >
  DomainData_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DomainData >
  DomainData_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DomainData >
  DomainData_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::DomainData >
  DomainData_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DomainData >
  DomainData_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DomainData >
  DomainData_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DomainData >
  DomainData_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DomainData >
  DomainData_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DomainData >
  DomainData_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::DomainData >
  DomainData_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DomainData >
  DomainData_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DomainData >
  DomainData_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::DomainData >
  DomainData_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DomainData >
  DomainData_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Name (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Name (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Name (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Name (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Name (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Name (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Name (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Name (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Name (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Name (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Name (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Name (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Name (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Name (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  DateDomainWasChecked (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateDomainWasChecked (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateDomainWasChecked (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  DateDomainWasChecked (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateDomainWasChecked (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateDomainWasChecked (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateDomainWasChecked (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateDomainWasChecked (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateDomainWasChecked (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  DateDomainWasChecked (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateDomainWasChecked (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateDomainWasChecked (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  DateDomainWasChecked (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateDomainWasChecked (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  RegistrationDate (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  RegistrationDate (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  RegistrationDate (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  RegistrationDate (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  RegistrationDate (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  RegistrationDate (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  RegistrationDate (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  RegistrationDate (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  RegistrationDate (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  RegistrationDate (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  RegistrationDate (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  RegistrationDate (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  RegistrationDate (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  RegistrationDate (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  ExpirationDate (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ExpirationDate (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ExpirationDate (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  ExpirationDate (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ExpirationDate (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ExpirationDate (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ExpirationDate (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ExpirationDate (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ExpirationDate (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  ExpirationDate (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ExpirationDate (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ExpirationDate (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  ExpirationDate (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ExpirationDate (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::RelatedDNS >
  RelatedDNS_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RelatedDNS >
  RelatedDNS_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RelatedDNS >
  RelatedDNS_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::RelatedDNS >
  RelatedDNS_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RelatedDNS >
  RelatedDNS_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RelatedDNS >
  RelatedDNS_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RelatedDNS >
  RelatedDNS_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RelatedDNS >
  RelatedDNS_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RelatedDNS >
  RelatedDNS_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::RelatedDNS >
  RelatedDNS_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RelatedDNS >
  RelatedDNS_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RelatedDNS >
  RelatedDNS_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::RelatedDNS >
  RelatedDNS_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RelatedDNS >
  RelatedDNS_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::Nameservers >
  Nameservers_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Nameservers >
  Nameservers_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Nameservers >
  Nameservers_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::Nameservers >
  Nameservers_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Nameservers >
  Nameservers_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Nameservers >
  Nameservers_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Nameservers >
  Nameservers_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Nameservers >
  Nameservers_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Nameservers >
  Nameservers_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::Nameservers >
  Nameservers_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Nameservers >
  Nameservers_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Nameservers >
  Nameservers_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::Nameservers >
  Nameservers_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Nameservers >
  Nameservers_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Server (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Server (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Server (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Server (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Server (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Server (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Server (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Server (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Server (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Server (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Server (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Server (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Server (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Server (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::DomainContacts >
  DomainContacts_ (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DomainContacts >
  DomainContacts_ (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DomainContacts >
  DomainContacts_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::DomainContacts >
  DomainContacts_ (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DomainContacts >
  DomainContacts_ (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DomainContacts >
  DomainContacts_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DomainContacts >
  DomainContacts_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DomainContacts >
  DomainContacts_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DomainContacts >
  DomainContacts_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::DomainContacts >
  DomainContacts_ (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DomainContacts >
  DomainContacts_ (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DomainContacts >
  DomainContacts_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::DomainContacts >
  DomainContacts_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::DomainContacts >
  DomainContacts_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  SameDomainContact (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  SameDomainContact (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  SameDomainContact (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  SameDomainContact (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  SameDomainContact (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  SameDomainContact (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  SameDomainContact (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  SameDomainContact (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  SameDomainContact (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  SameDomainContact (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  SameDomainContact (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  SameDomainContact (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  SameDomainContact (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  SameDomainContact (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::Record >
  Record_ (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Record >
  Record_ (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Record >
  Record_ (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::Record >
  Record_ (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Record >
  Record_ (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Record >
  Record_ (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Record >
  Record_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Record >
  Record_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Record >
  Record_ (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::Record >
  Record_ (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Record >
  Record_ (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Record >
  Record_ (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::Record >
  Record_ (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Record >
  Record_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::RecordData >
  RecordData_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RecordData >
  RecordData_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RecordData >
  RecordData_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::RecordData >
  RecordData_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RecordData >
  RecordData_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RecordData >
  RecordData_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RecordData >
  RecordData_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RecordData >
  RecordData_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RecordData >
  RecordData_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::RecordData >
  RecordData_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RecordData >
  RecordData_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RecordData >
  RecordData_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::RecordData >
  RecordData_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RecordData >
  RecordData_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::RecordPattern >
  RecordPattern_ (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RecordPattern >
  RecordPattern_ (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RecordPattern >
  RecordPattern_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::RecordPattern >
  RecordPattern_ (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RecordPattern >
  RecordPattern_ (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RecordPattern >
  RecordPattern_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RecordPattern >
  RecordPattern_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RecordPattern >
  RecordPattern_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RecordPattern >
  RecordPattern_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::RecordPattern >
  RecordPattern_ (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RecordPattern >
  RecordPattern_ (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RecordPattern >
  RecordPattern_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::RecordPattern >
  RecordPattern_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::RecordPattern >
  RecordPattern_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  RecordItem (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  RecordItem (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  RecordItem (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  RecordItem (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  RecordItem (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  RecordItem (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  RecordItem (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  RecordItem (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  RecordItem (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  RecordItem (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  RecordItem (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  RecordItem (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  RecordItem (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  RecordItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::WindowsRegistryKeysModified >
  WindowsRegistryKeysModified_ (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::WindowsRegistryKeysModified >
  WindowsRegistryKeysModified_ (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::WindowsRegistryKeysModified >
  WindowsRegistryKeysModified_ (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::WindowsRegistryKeysModified >
  WindowsRegistryKeysModified_ (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::WindowsRegistryKeysModified >
  WindowsRegistryKeysModified_ (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::WindowsRegistryKeysModified >
  WindowsRegistryKeysModified_ (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::WindowsRegistryKeysModified >
  WindowsRegistryKeysModified_ (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::WindowsRegistryKeysModified >
  WindowsRegistryKeysModified_ (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::WindowsRegistryKeysModified >
  WindowsRegistryKeysModified_ (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::WindowsRegistryKeysModified >
  WindowsRegistryKeysModified_ (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::WindowsRegistryKeysModified >
  WindowsRegistryKeysModified_ (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::WindowsRegistryKeysModified >
  WindowsRegistryKeysModified_ (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::WindowsRegistryKeysModified >
  WindowsRegistryKeysModified_ (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::WindowsRegistryKeysModified >
  WindowsRegistryKeysModified_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::Key >
  Key_ (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Key >
  Key_ (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Key >
  Key_ (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::Key >
  Key_ (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Key >
  Key_ (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Key >
  Key_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Key >
  Key_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Key >
  Key_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Key >
  Key_ (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::Key >
  Key_ (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Key >
  Key_ (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Key >
  Key_ (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::Key >
  Key_ (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Key >
  Key_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Value (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Value (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Value (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Value (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Value (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Value (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Value (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Value (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Value (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Value (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Value (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Value (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  Value (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  Value (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::FileData >
  FileData_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::FileData >
  FileData_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::FileData >
  FileData_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::FileData >
  FileData_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::FileData >
  FileData_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::FileData >
  FileData_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::FileData >
  FileData_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::FileData >
  FileData_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::FileData >
  FileData_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::FileData >
  FileData_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::FileData >
  FileData_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::FileData >
  FileData_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::FileData >
  FileData_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::FileData >
  FileData_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::File >
  File_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::File >
  File_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::File >
  File_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::File >
  File_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::File >
  File_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::File >
  File_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::File >
  File_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::File >
  File_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::File >
  File_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::File >
  File_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::File >
  File_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::File >
  File_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::File >
  File_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::File >
  File_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  FileName (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  FileName (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  FileName (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  FileName (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::integer >
  FileSize (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  FileSize (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  FileSize (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::integer >
  FileSize (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  FileSize (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  FileSize (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  FileSize (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  FileSize (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  FileSize (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::integer >
  FileSize (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  FileSize (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  FileSize (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::integer >
  FileSize (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  FileSize (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::integer >
  FileType (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  FileType (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  FileType (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::integer >
  FileType (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  FileType (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  FileType (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  FileType (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  FileType (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  FileType (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::integer >
  FileType (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  FileType (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  FileType (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::integer >
  FileType (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::integer >
  FileType (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  FileProperties (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  FileProperties (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  FileProperties (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  FileProperties (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  FileProperties (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  FileProperties (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  FileProperties (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  FileProperties (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  FileProperties (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  FileProperties (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  FileProperties (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  FileProperties (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  FileProperties (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ExtensionType >
  FileProperties (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::HashData >
  HashData_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::HashData >
  HashData_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::HashData >
  HashData_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::HashData >
  HashData_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::HashData >
  HashData_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::HashData >
  HashData_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::HashData >
  HashData_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::HashData >
  HashData_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::HashData >
  HashData_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::HashData >
  HashData_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::HashData >
  HashData_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::HashData >
  HashData_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::HashData >
  HashData_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::HashData >
  HashData_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  HashTarget (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  HashTarget (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  HashTarget (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  HashTarget (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  HashTarget (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  HashTarget (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  HashTarget (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  HashTarget (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  HashTarget (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  HashTarget (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  HashTarget (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  HashTarget (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  HashTarget (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  HashTarget (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::Hash >
  Hash_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Hash >
  Hash_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Hash >
  Hash_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::Hash >
  Hash_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Hash >
  Hash_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Hash >
  Hash_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Hash >
  Hash_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Hash >
  Hash_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Hash >
  Hash_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::Hash >
  Hash_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Hash >
  Hash_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Hash >
  Hash_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::Hash >
  Hash_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Hash >
  Hash_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::FuzzyHash >
  FuzzyHash_ (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::FuzzyHash >
  FuzzyHash_ (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::FuzzyHash >
  FuzzyHash_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::FuzzyHash >
  FuzzyHash_ (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::FuzzyHash >
  FuzzyHash_ (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::FuzzyHash >
  FuzzyHash_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::FuzzyHash >
  FuzzyHash_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::FuzzyHash >
  FuzzyHash_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::FuzzyHash >
  FuzzyHash_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::FuzzyHash >
  FuzzyHash_ (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::FuzzyHash >
  FuzzyHash_ (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::FuzzyHash >
  FuzzyHash_ (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::FuzzyHash >
  FuzzyHash_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::FuzzyHash >
  FuzzyHash_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::SignatureData >
  SignatureData_ (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SignatureData >
  SignatureData_ (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SignatureData >
  SignatureData_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::SignatureData >
  SignatureData_ (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SignatureData >
  SignatureData_ (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SignatureData >
  SignatureData_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SignatureData >
  SignatureData_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SignatureData >
  SignatureData_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SignatureData >
  SignatureData_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::SignatureData >
  SignatureData_ (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SignatureData >
  SignatureData_ (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SignatureData >
  SignatureData_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::SignatureData >
  SignatureData_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SignatureData >
  SignatureData_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::CertificateData >
  CertificateData_ (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::CertificateData >
  CertificateData_ (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::CertificateData >
  CertificateData_ (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::CertificateData >
  CertificateData_ (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::CertificateData >
  CertificateData_ (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::CertificateData >
  CertificateData_ (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::CertificateData >
  CertificateData_ (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::CertificateData >
  CertificateData_ (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::CertificateData >
  CertificateData_ (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::CertificateData >
  CertificateData_ (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::CertificateData >
  CertificateData_ (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::CertificateData >
  CertificateData_ (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::CertificateData >
  CertificateData_ (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::CertificateData >
  CertificateData_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::Certificate >
  Certificate_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Certificate >
  Certificate_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Certificate >
  Certificate_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::Certificate >
  Certificate_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Certificate >
  Certificate_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Certificate >
  Certificate_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Certificate >
  Certificate_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Certificate >
  Certificate_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Certificate >
  Certificate_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::Certificate >
  Certificate_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Certificate >
  Certificate_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Certificate >
  Certificate_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::Certificate >
  Certificate_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Certificate >
  Certificate_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::SoftwareReference >
  SoftwareReference_ (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareReference >
  SoftwareReference_ (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareReference >
  SoftwareReference_ (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::SoftwareReference >
  SoftwareReference_ (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareReference >
  SoftwareReference_ (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareReference >
  SoftwareReference_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareReference >
  SoftwareReference_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareReference >
  SoftwareReference_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareReference >
  SoftwareReference_ (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::SoftwareReference >
  SoftwareReference_ (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareReference >
  SoftwareReference_ (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareReference >
  SoftwareReference_ (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::SoftwareReference >
  SoftwareReference_ (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareReference >
  SoftwareReference_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  Application (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  Application (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  Application (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  Application (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  Application (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  Application (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  Application (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  Application (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  Application (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  Application (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  Application (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  Application (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  Application (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  Application (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  OperatingSystem (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  OperatingSystem (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  OperatingSystem (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  OperatingSystem (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  OperatingSystem (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  OperatingSystem (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  OperatingSystem (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  OperatingSystem (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  OperatingSystem (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  OperatingSystem (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  OperatingSystem (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  OperatingSystem (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  OperatingSystem (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::SoftwareType >
  OperatingSystem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::IndicatorData >
  IndicatorData_ (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorData >
  IndicatorData_ (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorData >
  IndicatorData_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::IndicatorData >
  IndicatorData_ (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorData >
  IndicatorData_ (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorData >
  IndicatorData_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorData >
  IndicatorData_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorData >
  IndicatorData_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorData >
  IndicatorData_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::IndicatorData >
  IndicatorData_ (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorData >
  IndicatorData_ (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorData >
  IndicatorData_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::IndicatorData >
  IndicatorData_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorData >
  IndicatorData_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::Indicator >
  Indicator_ (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Indicator >
  Indicator_ (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Indicator >
  Indicator_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::Indicator >
  Indicator_ (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Indicator >
  Indicator_ (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Indicator >
  Indicator_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Indicator >
  Indicator_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Indicator >
  Indicator_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Indicator >
  Indicator_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::Indicator >
  Indicator_ (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Indicator >
  Indicator_ (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Indicator >
  Indicator_ (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::Indicator >
  Indicator_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Indicator >
  Indicator_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::IndicatorID >
  IndicatorID_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorID >
  IndicatorID_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorID >
  IndicatorID_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::IndicatorID >
  IndicatorID_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorID >
  IndicatorID_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorID >
  IndicatorID_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorID >
  IndicatorID_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorID >
  IndicatorID_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorID >
  IndicatorID_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::IndicatorID >
  IndicatorID_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorID >
  IndicatorID_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorID >
  IndicatorID_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::IndicatorID >
  IndicatorID_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorID >
  IndicatorID_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::AlternativeIndicatorID >
  AlternativeIndicatorID_ (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::AlternativeIndicatorID >
  AlternativeIndicatorID_ (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::AlternativeIndicatorID >
  AlternativeIndicatorID_ (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::AlternativeIndicatorID >
  AlternativeIndicatorID_ (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::AlternativeIndicatorID >
  AlternativeIndicatorID_ (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::AlternativeIndicatorID >
  AlternativeIndicatorID_ (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::AlternativeIndicatorID >
  AlternativeIndicatorID_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::AlternativeIndicatorID >
  AlternativeIndicatorID_ (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::AlternativeIndicatorID >
  AlternativeIndicatorID_ (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::AlternativeIndicatorID >
  AlternativeIndicatorID_ (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::AlternativeIndicatorID >
  AlternativeIndicatorID_ (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::AlternativeIndicatorID >
  AlternativeIndicatorID_ (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::AlternativeIndicatorID >
  AlternativeIndicatorID_ (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::AlternativeIndicatorID >
  AlternativeIndicatorID_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::Observable >
  Observable_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Observable >
  Observable_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Observable >
  Observable_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::Observable >
  Observable_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Observable >
  Observable_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Observable >
  Observable_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Observable >
  Observable_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Observable >
  Observable_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Observable >
  Observable_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::Observable >
  Observable_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Observable >
  Observable_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Observable >
  Observable_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::Observable >
  Observable_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::Observable >
  Observable_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::BulkObservable >
  BulkObservable_ (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BulkObservable >
  BulkObservable_ (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BulkObservable >
  BulkObservable_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::BulkObservable >
  BulkObservable_ (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BulkObservable >
  BulkObservable_ (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BulkObservable >
  BulkObservable_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BulkObservable >
  BulkObservable_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BulkObservable >
  BulkObservable_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BulkObservable >
  BulkObservable_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::BulkObservable >
  BulkObservable_ (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BulkObservable >
  BulkObservable_ (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BulkObservable >
  BulkObservable_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::BulkObservable >
  BulkObservable_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BulkObservable >
  BulkObservable_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::BulkObservableFormat >
  BulkObservableFormat_ (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BulkObservableFormat >
  BulkObservableFormat_ (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BulkObservableFormat >
  BulkObservableFormat_ (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::BulkObservableFormat >
  BulkObservableFormat_ (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BulkObservableFormat >
  BulkObservableFormat_ (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BulkObservableFormat >
  BulkObservableFormat_ (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BulkObservableFormat >
  BulkObservableFormat_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BulkObservableFormat >
  BulkObservableFormat_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BulkObservableFormat >
  BulkObservableFormat_ (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::BulkObservableFormat >
  BulkObservableFormat_ (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BulkObservableFormat >
  BulkObservableFormat_ (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BulkObservableFormat >
  BulkObservableFormat_ (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::BulkObservableFormat >
  BulkObservableFormat_ (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::BulkObservableFormat >
  BulkObservableFormat_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::IndicatorExpression >
  IndicatorExpression_ (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorExpression >
  IndicatorExpression_ (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorExpression >
  IndicatorExpression_ (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::IndicatorExpression >
  IndicatorExpression_ (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorExpression >
  IndicatorExpression_ (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorExpression >
  IndicatorExpression_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorExpression >
  IndicatorExpression_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorExpression >
  IndicatorExpression_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorExpression >
  IndicatorExpression_ (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::IndicatorExpression >
  IndicatorExpression_ (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorExpression >
  IndicatorExpression_ (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorExpression >
  IndicatorExpression_ (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::IndicatorExpression >
  IndicatorExpression_ (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorExpression >
  IndicatorExpression_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::ObservableReference >
  ObservableReference_ (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ObservableReference >
  ObservableReference_ (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ObservableReference >
  ObservableReference_ (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::ObservableReference >
  ObservableReference_ (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ObservableReference >
  ObservableReference_ (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ObservableReference >
  ObservableReference_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ObservableReference >
  ObservableReference_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ObservableReference >
  ObservableReference_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ObservableReference >
  ObservableReference_ (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::ObservableReference >
  ObservableReference_ (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ObservableReference >
  ObservableReference_ (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ObservableReference >
  ObservableReference_ (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::ObservableReference >
  ObservableReference_ (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::ObservableReference >
  ObservableReference_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::IndicatorReference >
  IndicatorReference_ (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorReference >
  IndicatorReference_ (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorReference >
  IndicatorReference_ (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::IndicatorReference >
  IndicatorReference_ (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorReference >
  IndicatorReference_ (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorReference >
  IndicatorReference_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorReference >
  IndicatorReference_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorReference >
  IndicatorReference_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorReference >
  IndicatorReference_ (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::IndicatorReference >
  IndicatorReference_ (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorReference >
  IndicatorReference_ (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorReference >
  IndicatorReference_ (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::IndicatorReference >
  IndicatorReference_ (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::IndicatorReference >
  IndicatorReference_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Description (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Description (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Description (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Description (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Description (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Description (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Description (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Description (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Description (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Description (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Description (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Description (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Description (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_2_0::MLStringType >
  Description (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  URL (const ::std::string& uri,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URL (const ::std::string& uri,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URL (const ::std::string& uri,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  URL (::std::istream& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URL (::std::istream& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URL (::std::istream& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URL (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URL (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URL (::std::istream& is,
       const ::std::string& id,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  URL (::xercesc::InputSource& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URL (::xercesc::InputSource& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URL (::xercesc::InputSource& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  URL (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URL (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___XSD_IODEF_BIS14_HXX
