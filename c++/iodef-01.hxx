// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___XSD_IODEF_01_HXX
#define CXX___XSD_IODEF_01_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace iodef_1_0
{
  class IncidentIDType;
  class ContactMeansType;
  class TimezoneType;
  class PortlistType;
  class SoftwareType;
  class PositiveFloatType;
  class MLStringType;
  class ExtensionType;
  class restriction_type;
  class severity_type;
  class duration_type;
  class action_type;
  class dtype_type;
  class IODEF_Document;
  class Incident;
  class AlternativeID;
  class RelatedActivity;
  class Contact;
  class RegistryHandle;
  class PostalAddress;
  class History;
  class HistoryItem;
  class Expectation;
  class Method;
  class Reference;
  class Assessment;
  class Impact;
  class TimeImpact;
  class MonetaryImpact;
  class Confidence;
  class EventData;
  class Flow;
  class System;
  class Node;
  class Address;
  class NodeRole;
  class Service;
  class Counter;
  class Record;
  class RecordData;
  class RecordPattern;
  class purpose;
  class role;
  class type;
  class registry;
  class occurrence;
  class completion;
  class type1;
  class metric;
  class rating;
  class category;
  class spoofed;
  class category1;
  class category2;
  class type2;
  class type3;
  class offsetunit;
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace iodef_1_0
{
  class IncidentIDType: public ::xml_schema::string
  {
    public:
    // name
    // 
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // instance
    // 
    typedef ::xml_schema::string instance_type;
    typedef ::xsd::cxx::tree::optional< instance_type > instance_optional;
    typedef ::xsd::cxx::tree::traits< instance_type, char > instance_traits;

    const instance_optional&
    instance () const;

    instance_optional&
    instance ();

    void
    instance (const instance_type& x);

    void
    instance (const instance_optional& x);

    void
    instance (::std::auto_ptr< instance_type > p);

    // restriction
    // 
    typedef ::iodef_1_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_type&
    restriction () const;

    restriction_type&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    static const restriction_type&
    restriction_default_value ();

    // Constructors.
    //
    IncidentIDType (const name_type&);

    IncidentIDType (const char*,
                    const name_type&);

    IncidentIDType (const ::std::string&,
                    const name_type&);

    IncidentIDType (const ::xml_schema::string&,
                    const name_type&);

    IncidentIDType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    IncidentIDType (const IncidentIDType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual IncidentIDType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~IncidentIDType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< name_type > name_;
    instance_optional instance_;
    ::xsd::cxx::tree::one< restriction_type > restriction_;
    static const restriction_type restriction_default_value_;
  };

  class ContactMeansType: public ::xml_schema::string
  {
    public:
    // meaning
    // 
    typedef ::xml_schema::string meaning_type;
    typedef ::xsd::cxx::tree::optional< meaning_type > meaning_optional;
    typedef ::xsd::cxx::tree::traits< meaning_type, char > meaning_traits;

    const meaning_optional&
    meaning () const;

    meaning_optional&
    meaning ();

    void
    meaning (const meaning_type& x);

    void
    meaning (const meaning_optional& x);

    void
    meaning (::std::auto_ptr< meaning_type > p);

    // Constructors.
    //
    ContactMeansType ();

    ContactMeansType (const char*);

    ContactMeansType (const ::std::string&);

    ContactMeansType (const ::xml_schema::string&);

    ContactMeansType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    ContactMeansType (const ContactMeansType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual ContactMeansType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~ContactMeansType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    meaning_optional meaning_;
  };

  class TimezoneType: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    TimezoneType ();

    TimezoneType (const char*);

    TimezoneType (const ::std::string&);

    TimezoneType (const ::xml_schema::string&);

    TimezoneType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    TimezoneType (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    TimezoneType (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    TimezoneType (const TimezoneType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual TimezoneType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~TimezoneType ();
  };

  class PortlistType: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    PortlistType ();

    PortlistType (const char*);

    PortlistType (const ::std::string&);

    PortlistType (const ::xml_schema::string&);

    PortlistType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    PortlistType (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    PortlistType (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    PortlistType (const PortlistType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual PortlistType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~PortlistType ();
  };

  class SoftwareType: public ::xml_schema::type
  {
    public:
    // URL
    // 
    typedef ::xml_schema::uri URL_type;
    typedef ::xsd::cxx::tree::optional< URL_type > URL_optional;
    typedef ::xsd::cxx::tree::traits< URL_type, char > URL_traits;

    const URL_optional&
    URL () const;

    URL_optional&
    URL ();

    void
    URL (const URL_type& x);

    void
    URL (const URL_optional& x);

    void
    URL (::std::auto_ptr< URL_type > p);

    // swid
    // 
    typedef ::xml_schema::string swid_type;
    typedef ::xsd::cxx::tree::traits< swid_type, char > swid_traits;

    const swid_type&
    swid () const;

    swid_type&
    swid ();

    void
    swid (const swid_type& x);

    void
    swid (::std::auto_ptr< swid_type > p);

    static const swid_type&
    swid_default_value ();

    // configid
    // 
    typedef ::xml_schema::string configid_type;
    typedef ::xsd::cxx::tree::traits< configid_type, char > configid_traits;

    const configid_type&
    configid () const;

    configid_type&
    configid ();

    void
    configid (const configid_type& x);

    void
    configid (::std::auto_ptr< configid_type > p);

    static const configid_type&
    configid_default_value ();

    // vendor
    // 
    typedef ::xml_schema::string vendor_type;
    typedef ::xsd::cxx::tree::optional< vendor_type > vendor_optional;
    typedef ::xsd::cxx::tree::traits< vendor_type, char > vendor_traits;

    const vendor_optional&
    vendor () const;

    vendor_optional&
    vendor ();

    void
    vendor (const vendor_type& x);

    void
    vendor (const vendor_optional& x);

    void
    vendor (::std::auto_ptr< vendor_type > p);

    // family
    // 
    typedef ::xml_schema::string family_type;
    typedef ::xsd::cxx::tree::optional< family_type > family_optional;
    typedef ::xsd::cxx::tree::traits< family_type, char > family_traits;

    const family_optional&
    family () const;

    family_optional&
    family ();

    void
    family (const family_type& x);

    void
    family (const family_optional& x);

    void
    family (::std::auto_ptr< family_type > p);

    // name
    // 
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::optional< name_type > name_optional;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_optional&
    name () const;

    name_optional&
    name ();

    void
    name (const name_type& x);

    void
    name (const name_optional& x);

    void
    name (::std::auto_ptr< name_type > p);

    // version
    // 
    typedef ::xml_schema::string version_type;
    typedef ::xsd::cxx::tree::optional< version_type > version_optional;
    typedef ::xsd::cxx::tree::traits< version_type, char > version_traits;

    const version_optional&
    version () const;

    version_optional&
    version ();

    void
    version (const version_type& x);

    void
    version (const version_optional& x);

    void
    version (::std::auto_ptr< version_type > p);

    // patch
    // 
    typedef ::xml_schema::string patch_type;
    typedef ::xsd::cxx::tree::optional< patch_type > patch_optional;
    typedef ::xsd::cxx::tree::traits< patch_type, char > patch_traits;

    const patch_optional&
    patch () const;

    patch_optional&
    patch ();

    void
    patch (const patch_type& x);

    void
    patch (const patch_optional& x);

    void
    patch (::std::auto_ptr< patch_type > p);

    // Constructors.
    //
    SoftwareType ();

    SoftwareType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    SoftwareType (const SoftwareType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual SoftwareType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~SoftwareType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    URL_optional URL_;
    ::xsd::cxx::tree::one< swid_type > swid_;
    static const swid_type swid_default_value_;
    ::xsd::cxx::tree::one< configid_type > configid_;
    static const configid_type configid_default_value_;
    vendor_optional vendor_;
    family_optional family_;
    name_optional name_;
    version_optional version_;
    patch_optional patch_;
  };

  class PositiveFloatType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    PositiveFloatType (const ::xml_schema::float_&);

    PositiveFloatType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    PositiveFloatType (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    PositiveFloatType (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    PositiveFloatType (const PositiveFloatType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual PositiveFloatType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~PositiveFloatType ();
  };

  class MLStringType: public ::xml_schema::string
  {
    public:
    // lang
    // 
    typedef ::xml_schema::language lang_type;
    typedef ::xsd::cxx::tree::optional< lang_type > lang_optional;
    typedef ::xsd::cxx::tree::traits< lang_type, char > lang_traits;

    const lang_optional&
    lang () const;

    lang_optional&
    lang ();

    void
    lang (const lang_type& x);

    void
    lang (const lang_optional& x);

    void
    lang (::std::auto_ptr< lang_type > p);

    // Constructors.
    //
    MLStringType ();

    MLStringType (const char*);

    MLStringType (const ::std::string&);

    MLStringType (const ::xml_schema::string&);

    MLStringType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    MLStringType (const MLStringType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual MLStringType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~MLStringType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    lang_optional lang_;
  };

  class ExtensionType: public ::xml_schema::type
  {
    public:
    // dtype
    // 
    typedef ::iodef_1_0::dtype_type dtype_type;
    typedef ::xsd::cxx::tree::traits< dtype_type, char > dtype_traits;

    const dtype_type&
    dtype () const;

    dtype_type&
    dtype ();

    void
    dtype (const dtype_type& x);

    void
    dtype (::std::auto_ptr< dtype_type > p);

    // ext-dtype
    // 
    typedef ::xml_schema::string ext_dtype_type;
    typedef ::xsd::cxx::tree::optional< ext_dtype_type > ext_dtype_optional;
    typedef ::xsd::cxx::tree::traits< ext_dtype_type, char > ext_dtype_traits;

    const ext_dtype_optional&
    ext_dtype () const;

    ext_dtype_optional&
    ext_dtype ();

    void
    ext_dtype (const ext_dtype_type& x);

    void
    ext_dtype (const ext_dtype_optional& x);

    void
    ext_dtype (::std::auto_ptr< ext_dtype_type > p);

    // meaning
    // 
    typedef ::xml_schema::string meaning_type;
    typedef ::xsd::cxx::tree::optional< meaning_type > meaning_optional;
    typedef ::xsd::cxx::tree::traits< meaning_type, char > meaning_traits;

    const meaning_optional&
    meaning () const;

    meaning_optional&
    meaning ();

    void
    meaning (const meaning_type& x);

    void
    meaning (const meaning_optional& x);

    void
    meaning (::std::auto_ptr< meaning_type > p);

    // formatid
    // 
    typedef ::xml_schema::string formatid_type;
    typedef ::xsd::cxx::tree::optional< formatid_type > formatid_optional;
    typedef ::xsd::cxx::tree::traits< formatid_type, char > formatid_traits;

    const formatid_optional&
    formatid () const;

    formatid_optional&
    formatid ();

    void
    formatid (const formatid_type& x);

    void
    formatid (const formatid_optional& x);

    void
    formatid (::std::auto_ptr< formatid_type > p);

    // restriction
    // 
    typedef ::iodef_1_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // Constructors.
    //
    ExtensionType (const dtype_type&);

    ExtensionType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    ExtensionType (const ExtensionType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual ExtensionType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~ExtensionType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< dtype_type > dtype_;
    ext_dtype_optional ext_dtype_;
    meaning_optional meaning_;
    formatid_optional formatid_;
    restriction_optional restriction_;
  };

  class restriction_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      default_,
      public_,
      need_to_know,
      private_
    };

    restriction_type (value v);

    restriction_type (const char* v);

    restriction_type (const ::std::string& v);

    restriction_type (const ::xml_schema::nmtoken& v);

    restriction_type (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    restriction_type (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    restriction_type (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    restriction_type (const restriction_type& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual restriction_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    restriction_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_restriction_type_convert ();
    }

    protected:
    value
    _xsd_restriction_type_convert () const;

    public:
    static const char* const _xsd_restriction_type_literals_[4];
    static const value _xsd_restriction_type_indexes_[4];
  };

  class severity_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      low,
      medium,
      high
    };

    severity_type (value v);

    severity_type (const char* v);

    severity_type (const ::std::string& v);

    severity_type (const ::xml_schema::nmtoken& v);

    severity_type (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    severity_type (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    severity_type (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    severity_type (const severity_type& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual severity_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    severity_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_severity_type_convert ();
    }

    protected:
    value
    _xsd_severity_type_convert () const;

    public:
    static const char* const _xsd_severity_type_literals_[3];
    static const value _xsd_severity_type_indexes_[3];
  };

  class duration_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      second,
      minute,
      hour,
      day,
      month,
      quarter,
      year,
      ext_value
    };

    duration_type (value v);

    duration_type (const char* v);

    duration_type (const ::std::string& v);

    duration_type (const ::xml_schema::nmtoken& v);

    duration_type (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    duration_type (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    duration_type (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    duration_type (const duration_type& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual duration_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    duration_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_duration_type_convert ();
    }

    protected:
    value
    _xsd_duration_type_convert () const;

    public:
    static const char* const _xsd_duration_type_literals_[8];
    static const value _xsd_duration_type_indexes_[8];
  };

  class action_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      nothing,
      contact_source_site,
      contact_target_site,
      contact_sender,
      investigate,
      block_host,
      block_network,
      block_port,
      rate_limit_host,
      rate_limit_network,
      rate_limit_port,
      remediate_other,
      status_triage,
      status_new_info,
      other,
      ext_value
    };

    action_type (value v);

    action_type (const char* v);

    action_type (const ::std::string& v);

    action_type (const ::xml_schema::nmtoken& v);

    action_type (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    action_type (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    action_type (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    action_type (const action_type& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual action_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    action_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_action_type_convert ();
    }

    protected:
    value
    _xsd_action_type_convert () const;

    public:
    static const char* const _xsd_action_type_literals_[16];
    static const value _xsd_action_type_indexes_[16];
  };

  class dtype_type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      boolean,
      byte,
      character,
      date_time,
      integer,
      ntpstamp,
      portlist,
      real,
      string,
      file,
      path,
      frame,
      packet,
      ipv4_packet,
      ipv6_packet,
      url,
      csv,
      winreg,
      xml,
      ext_value
    };

    dtype_type (value v);

    dtype_type (const char* v);

    dtype_type (const ::std::string& v);

    dtype_type (const ::xml_schema::nmtoken& v);

    dtype_type (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    dtype_type (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    dtype_type (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    dtype_type (const dtype_type& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual dtype_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    dtype_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_dtype_type_convert ();
    }

    protected:
    value
    _xsd_dtype_type_convert () const;

    public:
    static const char* const _xsd_dtype_type_literals_[20];
    static const value _xsd_dtype_type_indexes_[20];
  };

  class IODEF_Document: public ::xml_schema::type
  {
    public:
    // Incident
    // 
    typedef ::iodef_1_0::Incident Incident_type;
    typedef ::xsd::cxx::tree::sequence< Incident_type > Incident_sequence;
    typedef Incident_sequence::iterator Incident_iterator;
    typedef Incident_sequence::const_iterator Incident_const_iterator;
    typedef ::xsd::cxx::tree::traits< Incident_type, char > Incident_traits;

    const Incident_sequence&
    Incident () const;

    Incident_sequence&
    Incident ();

    void
    Incident (const Incident_sequence& s);

    // version
    // 
    typedef ::xml_schema::string version_type;
    typedef ::xsd::cxx::tree::traits< version_type, char > version_traits;

    const version_type&
    version () const;

    static const version_type&
    version_default_value ();

    // lang
    // 
    typedef ::xml_schema::language lang_type;
    typedef ::xsd::cxx::tree::traits< lang_type, char > lang_traits;

    const lang_type&
    lang () const;

    lang_type&
    lang ();

    void
    lang (const lang_type& x);

    void
    lang (::std::auto_ptr< lang_type > p);

    // formatid
    // 
    typedef ::xml_schema::string formatid_type;
    typedef ::xsd::cxx::tree::optional< formatid_type > formatid_optional;
    typedef ::xsd::cxx::tree::traits< formatid_type, char > formatid_traits;

    const formatid_optional&
    formatid () const;

    formatid_optional&
    formatid ();

    void
    formatid (const formatid_type& x);

    void
    formatid (const formatid_optional& x);

    void
    formatid (::std::auto_ptr< formatid_type > p);

    // Constructors.
    //
    IODEF_Document (const lang_type&);

    IODEF_Document (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    IODEF_Document (const IODEF_Document& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual IODEF_Document*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~IODEF_Document ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Incident_sequence Incident_;
    ::xsd::cxx::tree::one< version_type > version_;
    static const version_type version_default_value_;
    ::xsd::cxx::tree::one< lang_type > lang_;
    formatid_optional formatid_;
  };

  class Incident: public ::xml_schema::type
  {
    public:
    // IncidentID
    // 
    typedef ::iodef_1_0::IncidentIDType IncidentID_type;
    typedef ::xsd::cxx::tree::traits< IncidentID_type, char > IncidentID_traits;

    const IncidentID_type&
    IncidentID () const;

    IncidentID_type&
    IncidentID ();

    void
    IncidentID (const IncidentID_type& x);

    void
    IncidentID (::std::auto_ptr< IncidentID_type > p);

    // AlternativeID
    // 
    typedef ::iodef_1_0::AlternativeID AlternativeID_type;
    typedef ::xsd::cxx::tree::optional< AlternativeID_type > AlternativeID_optional;
    typedef ::xsd::cxx::tree::traits< AlternativeID_type, char > AlternativeID_traits;

    const AlternativeID_optional&
    AlternativeID () const;

    AlternativeID_optional&
    AlternativeID ();

    void
    AlternativeID (const AlternativeID_type& x);

    void
    AlternativeID (const AlternativeID_optional& x);

    void
    AlternativeID (::std::auto_ptr< AlternativeID_type > p);

    // RelatedActivity
    // 
    typedef ::iodef_1_0::RelatedActivity RelatedActivity_type;
    typedef ::xsd::cxx::tree::optional< RelatedActivity_type > RelatedActivity_optional;
    typedef ::xsd::cxx::tree::traits< RelatedActivity_type, char > RelatedActivity_traits;

    const RelatedActivity_optional&
    RelatedActivity () const;

    RelatedActivity_optional&
    RelatedActivity ();

    void
    RelatedActivity (const RelatedActivity_type& x);

    void
    RelatedActivity (const RelatedActivity_optional& x);

    void
    RelatedActivity (::std::auto_ptr< RelatedActivity_type > p);

    // DetectTime
    // 
    typedef ::xml_schema::date_time DetectTime_type;
    typedef ::xsd::cxx::tree::optional< DetectTime_type > DetectTime_optional;
    typedef ::xsd::cxx::tree::traits< DetectTime_type, char > DetectTime_traits;

    const DetectTime_optional&
    DetectTime () const;

    DetectTime_optional&
    DetectTime ();

    void
    DetectTime (const DetectTime_type& x);

    void
    DetectTime (const DetectTime_optional& x);

    void
    DetectTime (::std::auto_ptr< DetectTime_type > p);

    // StartTime
    // 
    typedef ::xml_schema::date_time StartTime_type;
    typedef ::xsd::cxx::tree::optional< StartTime_type > StartTime_optional;
    typedef ::xsd::cxx::tree::traits< StartTime_type, char > StartTime_traits;

    const StartTime_optional&
    StartTime () const;

    StartTime_optional&
    StartTime ();

    void
    StartTime (const StartTime_type& x);

    void
    StartTime (const StartTime_optional& x);

    void
    StartTime (::std::auto_ptr< StartTime_type > p);

    // EndTime
    // 
    typedef ::xml_schema::date_time EndTime_type;
    typedef ::xsd::cxx::tree::optional< EndTime_type > EndTime_optional;
    typedef ::xsd::cxx::tree::traits< EndTime_type, char > EndTime_traits;

    const EndTime_optional&
    EndTime () const;

    EndTime_optional&
    EndTime ();

    void
    EndTime (const EndTime_type& x);

    void
    EndTime (const EndTime_optional& x);

    void
    EndTime (::std::auto_ptr< EndTime_type > p);

    // ReportTime
    // 
    typedef ::xml_schema::date_time ReportTime_type;
    typedef ::xsd::cxx::tree::traits< ReportTime_type, char > ReportTime_traits;

    const ReportTime_type&
    ReportTime () const;

    ReportTime_type&
    ReportTime ();

    void
    ReportTime (const ReportTime_type& x);

    void
    ReportTime (::std::auto_ptr< ReportTime_type > p);

    // Description
    // 
    typedef ::iodef_1_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // Assessment
    // 
    typedef ::iodef_1_0::Assessment Assessment_type;
    typedef ::xsd::cxx::tree::sequence< Assessment_type > Assessment_sequence;
    typedef Assessment_sequence::iterator Assessment_iterator;
    typedef Assessment_sequence::const_iterator Assessment_const_iterator;
    typedef ::xsd::cxx::tree::traits< Assessment_type, char > Assessment_traits;

    const Assessment_sequence&
    Assessment () const;

    Assessment_sequence&
    Assessment ();

    void
    Assessment (const Assessment_sequence& s);

    // Method
    // 
    typedef ::iodef_1_0::Method Method_type;
    typedef ::xsd::cxx::tree::sequence< Method_type > Method_sequence;
    typedef Method_sequence::iterator Method_iterator;
    typedef Method_sequence::const_iterator Method_const_iterator;
    typedef ::xsd::cxx::tree::traits< Method_type, char > Method_traits;

    const Method_sequence&
    Method () const;

    Method_sequence&
    Method ();

    void
    Method (const Method_sequence& s);

    // Contact
    // 
    typedef ::iodef_1_0::Contact Contact_type;
    typedef ::xsd::cxx::tree::sequence< Contact_type > Contact_sequence;
    typedef Contact_sequence::iterator Contact_iterator;
    typedef Contact_sequence::const_iterator Contact_const_iterator;
    typedef ::xsd::cxx::tree::traits< Contact_type, char > Contact_traits;

    const Contact_sequence&
    Contact () const;

    Contact_sequence&
    Contact ();

    void
    Contact (const Contact_sequence& s);

    // EventData
    // 
    typedef ::iodef_1_0::EventData EventData_type;
    typedef ::xsd::cxx::tree::sequence< EventData_type > EventData_sequence;
    typedef EventData_sequence::iterator EventData_iterator;
    typedef EventData_sequence::const_iterator EventData_const_iterator;
    typedef ::xsd::cxx::tree::traits< EventData_type, char > EventData_traits;

    const EventData_sequence&
    EventData () const;

    EventData_sequence&
    EventData ();

    void
    EventData (const EventData_sequence& s);

    // History
    // 
    typedef ::iodef_1_0::History History_type;
    typedef ::xsd::cxx::tree::optional< History_type > History_optional;
    typedef ::xsd::cxx::tree::traits< History_type, char > History_traits;

    const History_optional&
    History () const;

    History_optional&
    History ();

    void
    History (const History_type& x);

    void
    History (const History_optional& x);

    void
    History (::std::auto_ptr< History_type > p);

    // AdditionalData
    // 
    typedef ::iodef_1_0::ExtensionType AdditionalData_type;
    typedef ::xsd::cxx::tree::sequence< AdditionalData_type > AdditionalData_sequence;
    typedef AdditionalData_sequence::iterator AdditionalData_iterator;
    typedef AdditionalData_sequence::const_iterator AdditionalData_const_iterator;
    typedef ::xsd::cxx::tree::traits< AdditionalData_type, char > AdditionalData_traits;

    const AdditionalData_sequence&
    AdditionalData () const;

    AdditionalData_sequence&
    AdditionalData ();

    void
    AdditionalData (const AdditionalData_sequence& s);

    // purpose
    // 
    typedef ::iodef_1_0::purpose purpose_type;
    typedef ::xsd::cxx::tree::traits< purpose_type, char > purpose_traits;

    const purpose_type&
    purpose () const;

    purpose_type&
    purpose ();

    void
    purpose (const purpose_type& x);

    void
    purpose (::std::auto_ptr< purpose_type > p);

    // ext-purpose
    // 
    typedef ::xml_schema::string ext_purpose_type;
    typedef ::xsd::cxx::tree::optional< ext_purpose_type > ext_purpose_optional;
    typedef ::xsd::cxx::tree::traits< ext_purpose_type, char > ext_purpose_traits;

    const ext_purpose_optional&
    ext_purpose () const;

    ext_purpose_optional&
    ext_purpose ();

    void
    ext_purpose (const ext_purpose_type& x);

    void
    ext_purpose (const ext_purpose_optional& x);

    void
    ext_purpose (::std::auto_ptr< ext_purpose_type > p);

    // lang
    // 
    typedef ::xml_schema::language lang_type;
    typedef ::xsd::cxx::tree::optional< lang_type > lang_optional;
    typedef ::xsd::cxx::tree::traits< lang_type, char > lang_traits;

    const lang_optional&
    lang () const;

    lang_optional&
    lang ();

    void
    lang (const lang_type& x);

    void
    lang (const lang_optional& x);

    void
    lang (::std::auto_ptr< lang_type > p);

    // restriction
    // 
    typedef ::iodef_1_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_type&
    restriction () const;

    restriction_type&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    static const restriction_type&
    restriction_default_value ();

    // Constructors.
    //
    Incident (const IncidentID_type&,
              const ReportTime_type&,
              const purpose_type&);

    Incident (::std::auto_ptr< IncidentID_type >&,
              const ReportTime_type&,
              const purpose_type&);

    Incident (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    Incident (const Incident& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual Incident*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Incident ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< IncidentID_type > IncidentID_;
    AlternativeID_optional AlternativeID_;
    RelatedActivity_optional RelatedActivity_;
    DetectTime_optional DetectTime_;
    StartTime_optional StartTime_;
    EndTime_optional EndTime_;
    ::xsd::cxx::tree::one< ReportTime_type > ReportTime_;
    Description_sequence Description_;
    Assessment_sequence Assessment_;
    Method_sequence Method_;
    Contact_sequence Contact_;
    EventData_sequence EventData_;
    History_optional History_;
    AdditionalData_sequence AdditionalData_;
    ::xsd::cxx::tree::one< purpose_type > purpose_;
    ext_purpose_optional ext_purpose_;
    lang_optional lang_;
    ::xsd::cxx::tree::one< restriction_type > restriction_;
    static const restriction_type restriction_default_value_;
  };

  class AlternativeID: public ::xml_schema::type
  {
    public:
    // IncidentID
    // 
    typedef ::iodef_1_0::IncidentIDType IncidentID_type;
    typedef ::xsd::cxx::tree::sequence< IncidentID_type > IncidentID_sequence;
    typedef IncidentID_sequence::iterator IncidentID_iterator;
    typedef IncidentID_sequence::const_iterator IncidentID_const_iterator;
    typedef ::xsd::cxx::tree::traits< IncidentID_type, char > IncidentID_traits;

    const IncidentID_sequence&
    IncidentID () const;

    IncidentID_sequence&
    IncidentID ();

    void
    IncidentID (const IncidentID_sequence& s);

    // restriction
    // 
    typedef ::iodef_1_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // Constructors.
    //
    AlternativeID ();

    AlternativeID (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    AlternativeID (const AlternativeID& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual AlternativeID*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~AlternativeID ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    IncidentID_sequence IncidentID_;
    restriction_optional restriction_;
  };

  class RelatedActivity: public ::xml_schema::type
  {
    public:
    // IncidentID
    // 
    typedef ::iodef_1_0::IncidentIDType IncidentID_type;
    typedef ::xsd::cxx::tree::sequence< IncidentID_type > IncidentID_sequence;
    typedef IncidentID_sequence::iterator IncidentID_iterator;
    typedef IncidentID_sequence::const_iterator IncidentID_const_iterator;
    typedef ::xsd::cxx::tree::traits< IncidentID_type, char > IncidentID_traits;

    const IncidentID_sequence&
    IncidentID () const;

    IncidentID_sequence&
    IncidentID ();

    void
    IncidentID (const IncidentID_sequence& s);

    // URL
    // 
    typedef ::xml_schema::uri URL_type;
    typedef ::xsd::cxx::tree::sequence< URL_type > URL_sequence;
    typedef URL_sequence::iterator URL_iterator;
    typedef URL_sequence::const_iterator URL_const_iterator;
    typedef ::xsd::cxx::tree::traits< URL_type, char > URL_traits;

    const URL_sequence&
    URL () const;

    URL_sequence&
    URL ();

    void
    URL (const URL_sequence& s);

    // restriction
    // 
    typedef ::iodef_1_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // Constructors.
    //
    RelatedActivity ();

    RelatedActivity (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    RelatedActivity (const RelatedActivity& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual RelatedActivity*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~RelatedActivity ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    IncidentID_sequence IncidentID_;
    URL_sequence URL_;
    restriction_optional restriction_;
  };

  class Contact: public ::xml_schema::type
  {
    public:
    // ContactName
    // 
    typedef ::iodef_1_0::MLStringType ContactName_type;
    typedef ::xsd::cxx::tree::optional< ContactName_type > ContactName_optional;
    typedef ::xsd::cxx::tree::traits< ContactName_type, char > ContactName_traits;

    const ContactName_optional&
    ContactName () const;

    ContactName_optional&
    ContactName ();

    void
    ContactName (const ContactName_type& x);

    void
    ContactName (const ContactName_optional& x);

    void
    ContactName (::std::auto_ptr< ContactName_type > p);

    // Description
    // 
    typedef ::iodef_1_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // RegistryHandle
    // 
    typedef ::iodef_1_0::RegistryHandle RegistryHandle_type;
    typedef ::xsd::cxx::tree::sequence< RegistryHandle_type > RegistryHandle_sequence;
    typedef RegistryHandle_sequence::iterator RegistryHandle_iterator;
    typedef RegistryHandle_sequence::const_iterator RegistryHandle_const_iterator;
    typedef ::xsd::cxx::tree::traits< RegistryHandle_type, char > RegistryHandle_traits;

    const RegistryHandle_sequence&
    RegistryHandle () const;

    RegistryHandle_sequence&
    RegistryHandle ();

    void
    RegistryHandle (const RegistryHandle_sequence& s);

    // PostalAddress
    // 
    typedef ::iodef_1_0::PostalAddress PostalAddress_type;
    typedef ::xsd::cxx::tree::optional< PostalAddress_type > PostalAddress_optional;
    typedef ::xsd::cxx::tree::traits< PostalAddress_type, char > PostalAddress_traits;

    const PostalAddress_optional&
    PostalAddress () const;

    PostalAddress_optional&
    PostalAddress ();

    void
    PostalAddress (const PostalAddress_type& x);

    void
    PostalAddress (const PostalAddress_optional& x);

    void
    PostalAddress (::std::auto_ptr< PostalAddress_type > p);

    // Email
    // 
    typedef ::iodef_1_0::ContactMeansType Email_type;
    typedef ::xsd::cxx::tree::sequence< Email_type > Email_sequence;
    typedef Email_sequence::iterator Email_iterator;
    typedef Email_sequence::const_iterator Email_const_iterator;
    typedef ::xsd::cxx::tree::traits< Email_type, char > Email_traits;

    const Email_sequence&
    Email () const;

    Email_sequence&
    Email ();

    void
    Email (const Email_sequence& s);

    // Telephone
    // 
    typedef ::iodef_1_0::ContactMeansType Telephone_type;
    typedef ::xsd::cxx::tree::sequence< Telephone_type > Telephone_sequence;
    typedef Telephone_sequence::iterator Telephone_iterator;
    typedef Telephone_sequence::const_iterator Telephone_const_iterator;
    typedef ::xsd::cxx::tree::traits< Telephone_type, char > Telephone_traits;

    const Telephone_sequence&
    Telephone () const;

    Telephone_sequence&
    Telephone ();

    void
    Telephone (const Telephone_sequence& s);

    // Fax
    // 
    typedef ::iodef_1_0::ContactMeansType Fax_type;
    typedef ::xsd::cxx::tree::optional< Fax_type > Fax_optional;
    typedef ::xsd::cxx::tree::traits< Fax_type, char > Fax_traits;

    const Fax_optional&
    Fax () const;

    Fax_optional&
    Fax ();

    void
    Fax (const Fax_type& x);

    void
    Fax (const Fax_optional& x);

    void
    Fax (::std::auto_ptr< Fax_type > p);

    // Timezone
    // 
    typedef ::iodef_1_0::TimezoneType Timezone_type;
    typedef ::xsd::cxx::tree::optional< Timezone_type > Timezone_optional;
    typedef ::xsd::cxx::tree::traits< Timezone_type, char > Timezone_traits;

    const Timezone_optional&
    Timezone () const;

    Timezone_optional&
    Timezone ();

    void
    Timezone (const Timezone_type& x);

    void
    Timezone (const Timezone_optional& x);

    void
    Timezone (::std::auto_ptr< Timezone_type > p);

    // Contact
    // 
    typedef ::iodef_1_0::Contact Contact1_type;
    typedef ::xsd::cxx::tree::sequence< Contact1_type > Contact1_sequence;
    typedef Contact1_sequence::iterator Contact1_iterator;
    typedef Contact1_sequence::const_iterator Contact1_const_iterator;
    typedef ::xsd::cxx::tree::traits< Contact1_type, char > Contact1_traits;

    const Contact1_sequence&
    Contact1 () const;

    Contact1_sequence&
    Contact1 ();

    void
    Contact1 (const Contact1_sequence& s);

    // AdditionalData
    // 
    typedef ::iodef_1_0::ExtensionType AdditionalData_type;
    typedef ::xsd::cxx::tree::sequence< AdditionalData_type > AdditionalData_sequence;
    typedef AdditionalData_sequence::iterator AdditionalData_iterator;
    typedef AdditionalData_sequence::const_iterator AdditionalData_const_iterator;
    typedef ::xsd::cxx::tree::traits< AdditionalData_type, char > AdditionalData_traits;

    const AdditionalData_sequence&
    AdditionalData () const;

    AdditionalData_sequence&
    AdditionalData ();

    void
    AdditionalData (const AdditionalData_sequence& s);

    // role
    // 
    typedef ::iodef_1_0::role role_type;
    typedef ::xsd::cxx::tree::traits< role_type, char > role_traits;

    const role_type&
    role () const;

    role_type&
    role ();

    void
    role (const role_type& x);

    void
    role (::std::auto_ptr< role_type > p);

    // ext-role
    // 
    typedef ::xml_schema::string ext_role_type;
    typedef ::xsd::cxx::tree::optional< ext_role_type > ext_role_optional;
    typedef ::xsd::cxx::tree::traits< ext_role_type, char > ext_role_traits;

    const ext_role_optional&
    ext_role () const;

    ext_role_optional&
    ext_role ();

    void
    ext_role (const ext_role_type& x);

    void
    ext_role (const ext_role_optional& x);

    void
    ext_role (::std::auto_ptr< ext_role_type > p);

    // type
    // 
    typedef ::iodef_1_0::type type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::auto_ptr< type_type > p);

    // ext-type
    // 
    typedef ::xml_schema::string ext_type_type;
    typedef ::xsd::cxx::tree::optional< ext_type_type > ext_type_optional;
    typedef ::xsd::cxx::tree::traits< ext_type_type, char > ext_type_traits;

    const ext_type_optional&
    ext_type () const;

    ext_type_optional&
    ext_type ();

    void
    ext_type (const ext_type_type& x);

    void
    ext_type (const ext_type_optional& x);

    void
    ext_type (::std::auto_ptr< ext_type_type > p);

    // restriction
    // 
    typedef ::iodef_1_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // Constructors.
    //
    Contact (const role_type&,
             const type_type&);

    Contact (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Contact (const Contact& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Contact*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Contact ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ContactName_optional ContactName_;
    Description_sequence Description_;
    RegistryHandle_sequence RegistryHandle_;
    PostalAddress_optional PostalAddress_;
    Email_sequence Email_;
    Telephone_sequence Telephone_;
    Fax_optional Fax_;
    Timezone_optional Timezone_;
    Contact1_sequence Contact1_;
    AdditionalData_sequence AdditionalData_;
    ::xsd::cxx::tree::one< role_type > role_;
    ext_role_optional ext_role_;
    ::xsd::cxx::tree::one< type_type > type_;
    ext_type_optional ext_type_;
    restriction_optional restriction_;
  };

  class RegistryHandle: public ::xml_schema::string
  {
    public:
    // registry
    // 
    typedef ::iodef_1_0::registry registry_type;
    typedef ::xsd::cxx::tree::optional< registry_type > registry_optional;
    typedef ::xsd::cxx::tree::traits< registry_type, char > registry_traits;

    const registry_optional&
    registry () const;

    registry_optional&
    registry ();

    void
    registry (const registry_type& x);

    void
    registry (const registry_optional& x);

    void
    registry (::std::auto_ptr< registry_type > p);

    // ext-registry
    // 
    typedef ::xml_schema::string ext_registry_type;
    typedef ::xsd::cxx::tree::optional< ext_registry_type > ext_registry_optional;
    typedef ::xsd::cxx::tree::traits< ext_registry_type, char > ext_registry_traits;

    const ext_registry_optional&
    ext_registry () const;

    ext_registry_optional&
    ext_registry ();

    void
    ext_registry (const ext_registry_type& x);

    void
    ext_registry (const ext_registry_optional& x);

    void
    ext_registry (::std::auto_ptr< ext_registry_type > p);

    // Constructors.
    //
    RegistryHandle ();

    RegistryHandle (const char*);

    RegistryHandle (const ::std::string&);

    RegistryHandle (const ::xml_schema::string&);

    RegistryHandle (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    RegistryHandle (const RegistryHandle& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual RegistryHandle*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~RegistryHandle ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    registry_optional registry_;
    ext_registry_optional ext_registry_;
  };

  class PostalAddress: public ::iodef_1_0::MLStringType
  {
    public:
    // meaning
    // 
    typedef ::xml_schema::string meaning_type;
    typedef ::xsd::cxx::tree::optional< meaning_type > meaning_optional;
    typedef ::xsd::cxx::tree::traits< meaning_type, char > meaning_traits;

    const meaning_optional&
    meaning () const;

    meaning_optional&
    meaning ();

    void
    meaning (const meaning_type& x);

    void
    meaning (const meaning_optional& x);

    void
    meaning (::std::auto_ptr< meaning_type > p);

    // Constructors.
    //
    PostalAddress ();

    PostalAddress (const char*);

    PostalAddress (const ::std::string&);

    PostalAddress (const ::xml_schema::string&);

    PostalAddress (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    PostalAddress (const PostalAddress& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual PostalAddress*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~PostalAddress ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    meaning_optional meaning_;
  };

  class History: public ::xml_schema::type
  {
    public:
    // HistoryItem
    // 
    typedef ::iodef_1_0::HistoryItem HistoryItem_type;
    typedef ::xsd::cxx::tree::sequence< HistoryItem_type > HistoryItem_sequence;
    typedef HistoryItem_sequence::iterator HistoryItem_iterator;
    typedef HistoryItem_sequence::const_iterator HistoryItem_const_iterator;
    typedef ::xsd::cxx::tree::traits< HistoryItem_type, char > HistoryItem_traits;

    const HistoryItem_sequence&
    HistoryItem () const;

    HistoryItem_sequence&
    HistoryItem ();

    void
    HistoryItem (const HistoryItem_sequence& s);

    // restriction
    // 
    typedef ::iodef_1_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_type&
    restriction () const;

    restriction_type&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    static const restriction_type&
    restriction_default_value ();

    // Constructors.
    //
    History ();

    History (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    History (const History& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual History*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~History ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    HistoryItem_sequence HistoryItem_;
    ::xsd::cxx::tree::one< restriction_type > restriction_;
    static const restriction_type restriction_default_value_;
  };

  class HistoryItem: public ::xml_schema::type
  {
    public:
    // DateTime
    // 
    typedef ::xml_schema::date_time DateTime_type;
    typedef ::xsd::cxx::tree::traits< DateTime_type, char > DateTime_traits;

    const DateTime_type&
    DateTime () const;

    DateTime_type&
    DateTime ();

    void
    DateTime (const DateTime_type& x);

    void
    DateTime (::std::auto_ptr< DateTime_type > p);

    // IncidentID
    // 
    typedef ::iodef_1_0::IncidentIDType IncidentID_type;
    typedef ::xsd::cxx::tree::optional< IncidentID_type > IncidentID_optional;
    typedef ::xsd::cxx::tree::traits< IncidentID_type, char > IncidentID_traits;

    const IncidentID_optional&
    IncidentID () const;

    IncidentID_optional&
    IncidentID ();

    void
    IncidentID (const IncidentID_type& x);

    void
    IncidentID (const IncidentID_optional& x);

    void
    IncidentID (::std::auto_ptr< IncidentID_type > p);

    // Contact
    // 
    typedef ::iodef_1_0::Contact Contact_type;
    typedef ::xsd::cxx::tree::optional< Contact_type > Contact_optional;
    typedef ::xsd::cxx::tree::traits< Contact_type, char > Contact_traits;

    const Contact_optional&
    Contact () const;

    Contact_optional&
    Contact ();

    void
    Contact (const Contact_type& x);

    void
    Contact (const Contact_optional& x);

    void
    Contact (::std::auto_ptr< Contact_type > p);

    // Description
    // 
    typedef ::iodef_1_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // AdditionalData
    // 
    typedef ::iodef_1_0::ExtensionType AdditionalData_type;
    typedef ::xsd::cxx::tree::sequence< AdditionalData_type > AdditionalData_sequence;
    typedef AdditionalData_sequence::iterator AdditionalData_iterator;
    typedef AdditionalData_sequence::const_iterator AdditionalData_const_iterator;
    typedef ::xsd::cxx::tree::traits< AdditionalData_type, char > AdditionalData_traits;

    const AdditionalData_sequence&
    AdditionalData () const;

    AdditionalData_sequence&
    AdditionalData ();

    void
    AdditionalData (const AdditionalData_sequence& s);

    // restriction
    // 
    typedef ::iodef_1_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // action
    // 
    typedef ::iodef_1_0::action_type action_type;
    typedef ::xsd::cxx::tree::traits< action_type, char > action_traits;

    const action_type&
    action () const;

    action_type&
    action ();

    void
    action (const action_type& x);

    void
    action (::std::auto_ptr< action_type > p);

    // ext-action
    // 
    typedef ::xml_schema::string ext_action_type;
    typedef ::xsd::cxx::tree::optional< ext_action_type > ext_action_optional;
    typedef ::xsd::cxx::tree::traits< ext_action_type, char > ext_action_traits;

    const ext_action_optional&
    ext_action () const;

    ext_action_optional&
    ext_action ();

    void
    ext_action (const ext_action_type& x);

    void
    ext_action (const ext_action_optional& x);

    void
    ext_action (::std::auto_ptr< ext_action_type > p);

    // Constructors.
    //
    HistoryItem (const DateTime_type&,
                 const action_type&);

    HistoryItem (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    HistoryItem (const HistoryItem& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual HistoryItem*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~HistoryItem ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< DateTime_type > DateTime_;
    IncidentID_optional IncidentID_;
    Contact_optional Contact_;
    Description_sequence Description_;
    AdditionalData_sequence AdditionalData_;
    restriction_optional restriction_;
    ::xsd::cxx::tree::one< action_type > action_;
    ext_action_optional ext_action_;
  };

  class Expectation: public ::xml_schema::type
  {
    public:
    // Description
    // 
    typedef ::iodef_1_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // StartTime
    // 
    typedef ::xml_schema::date_time StartTime_type;
    typedef ::xsd::cxx::tree::optional< StartTime_type > StartTime_optional;
    typedef ::xsd::cxx::tree::traits< StartTime_type, char > StartTime_traits;

    const StartTime_optional&
    StartTime () const;

    StartTime_optional&
    StartTime ();

    void
    StartTime (const StartTime_type& x);

    void
    StartTime (const StartTime_optional& x);

    void
    StartTime (::std::auto_ptr< StartTime_type > p);

    // EndTime
    // 
    typedef ::xml_schema::date_time EndTime_type;
    typedef ::xsd::cxx::tree::optional< EndTime_type > EndTime_optional;
    typedef ::xsd::cxx::tree::traits< EndTime_type, char > EndTime_traits;

    const EndTime_optional&
    EndTime () const;

    EndTime_optional&
    EndTime ();

    void
    EndTime (const EndTime_type& x);

    void
    EndTime (const EndTime_optional& x);

    void
    EndTime (::std::auto_ptr< EndTime_type > p);

    // Contact
    // 
    typedef ::iodef_1_0::Contact Contact_type;
    typedef ::xsd::cxx::tree::optional< Contact_type > Contact_optional;
    typedef ::xsd::cxx::tree::traits< Contact_type, char > Contact_traits;

    const Contact_optional&
    Contact () const;

    Contact_optional&
    Contact ();

    void
    Contact (const Contact_type& x);

    void
    Contact (const Contact_optional& x);

    void
    Contact (::std::auto_ptr< Contact_type > p);

    // restriction
    // 
    typedef ::iodef_1_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_type&
    restriction () const;

    restriction_type&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    static const restriction_type&
    restriction_default_value ();

    // severity
    // 
    typedef ::iodef_1_0::severity_type severity_type;
    typedef ::xsd::cxx::tree::optional< severity_type > severity_optional;
    typedef ::xsd::cxx::tree::traits< severity_type, char > severity_traits;

    const severity_optional&
    severity () const;

    severity_optional&
    severity ();

    void
    severity (const severity_type& x);

    void
    severity (const severity_optional& x);

    void
    severity (::std::auto_ptr< severity_type > p);

    // action
    // 
    typedef ::iodef_1_0::action_type action_type;
    typedef ::xsd::cxx::tree::traits< action_type, char > action_traits;

    const action_type&
    action () const;

    action_type&
    action ();

    void
    action (const action_type& x);

    void
    action (::std::auto_ptr< action_type > p);

    static const action_type&
    action_default_value ();

    // ext-action
    // 
    typedef ::xml_schema::string ext_action_type;
    typedef ::xsd::cxx::tree::optional< ext_action_type > ext_action_optional;
    typedef ::xsd::cxx::tree::traits< ext_action_type, char > ext_action_traits;

    const ext_action_optional&
    ext_action () const;

    ext_action_optional&
    ext_action ();

    void
    ext_action (const ext_action_type& x);

    void
    ext_action (const ext_action_optional& x);

    void
    ext_action (::std::auto_ptr< ext_action_type > p);

    // Constructors.
    //
    Expectation ();

    Expectation (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    Expectation (const Expectation& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual Expectation*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Expectation ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Description_sequence Description_;
    StartTime_optional StartTime_;
    EndTime_optional EndTime_;
    Contact_optional Contact_;
    ::xsd::cxx::tree::one< restriction_type > restriction_;
    static const restriction_type restriction_default_value_;
    severity_optional severity_;
    ::xsd::cxx::tree::one< action_type > action_;
    static const action_type action_default_value_;
    ext_action_optional ext_action_;
  };

  class Method: public ::xml_schema::type
  {
    public:
    // Reference
    // 
    typedef ::iodef_1_0::Reference Reference_type;
    typedef ::xsd::cxx::tree::sequence< Reference_type > Reference_sequence;
    typedef Reference_sequence::iterator Reference_iterator;
    typedef Reference_sequence::const_iterator Reference_const_iterator;
    typedef ::xsd::cxx::tree::traits< Reference_type, char > Reference_traits;

    const Reference_sequence&
    Reference () const;

    Reference_sequence&
    Reference ();

    void
    Reference (const Reference_sequence& s);

    // Description
    // 
    typedef ::iodef_1_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // AdditionalData
    // 
    typedef ::iodef_1_0::ExtensionType AdditionalData_type;
    typedef ::xsd::cxx::tree::sequence< AdditionalData_type > AdditionalData_sequence;
    typedef AdditionalData_sequence::iterator AdditionalData_iterator;
    typedef AdditionalData_sequence::const_iterator AdditionalData_const_iterator;
    typedef ::xsd::cxx::tree::traits< AdditionalData_type, char > AdditionalData_traits;

    const AdditionalData_sequence&
    AdditionalData () const;

    AdditionalData_sequence&
    AdditionalData ();

    void
    AdditionalData (const AdditionalData_sequence& s);

    // restriction
    // 
    typedef ::iodef_1_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // Constructors.
    //
    Method ();

    Method (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Method (const Method& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual Method*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Method ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Reference_sequence Reference_;
    Description_sequence Description_;
    AdditionalData_sequence AdditionalData_;
    restriction_optional restriction_;
  };

  class Reference: public ::xml_schema::type
  {
    public:
    // ReferenceName
    // 
    typedef ::iodef_1_0::MLStringType ReferenceName_type;
    typedef ::xsd::cxx::tree::traits< ReferenceName_type, char > ReferenceName_traits;

    const ReferenceName_type&
    ReferenceName () const;

    ReferenceName_type&
    ReferenceName ();

    void
    ReferenceName (const ReferenceName_type& x);

    void
    ReferenceName (::std::auto_ptr< ReferenceName_type > p);

    // URL
    // 
    typedef ::xml_schema::uri URL_type;
    typedef ::xsd::cxx::tree::sequence< URL_type > URL_sequence;
    typedef URL_sequence::iterator URL_iterator;
    typedef URL_sequence::const_iterator URL_const_iterator;
    typedef ::xsd::cxx::tree::traits< URL_type, char > URL_traits;

    const URL_sequence&
    URL () const;

    URL_sequence&
    URL ();

    void
    URL (const URL_sequence& s);

    // Description
    // 
    typedef ::iodef_1_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // Constructors.
    //
    Reference (const ReferenceName_type&);

    Reference (::std::auto_ptr< ReferenceName_type >&);

    Reference (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    Reference (const Reference& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual Reference*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Reference ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< ReferenceName_type > ReferenceName_;
    URL_sequence URL_;
    Description_sequence Description_;
  };

  class Assessment: public ::xml_schema::type
  {
    public:
    // Impact
    // 
    typedef ::iodef_1_0::Impact Impact_type;
    typedef ::xsd::cxx::tree::sequence< Impact_type > Impact_sequence;
    typedef Impact_sequence::iterator Impact_iterator;
    typedef Impact_sequence::const_iterator Impact_const_iterator;
    typedef ::xsd::cxx::tree::traits< Impact_type, char > Impact_traits;

    const Impact_sequence&
    Impact () const;

    Impact_sequence&
    Impact ();

    void
    Impact (const Impact_sequence& s);

    // TimeImpact
    // 
    typedef ::iodef_1_0::TimeImpact TimeImpact_type;
    typedef ::xsd::cxx::tree::sequence< TimeImpact_type > TimeImpact_sequence;
    typedef TimeImpact_sequence::iterator TimeImpact_iterator;
    typedef TimeImpact_sequence::const_iterator TimeImpact_const_iterator;
    typedef ::xsd::cxx::tree::traits< TimeImpact_type, char > TimeImpact_traits;

    const TimeImpact_sequence&
    TimeImpact () const;

    TimeImpact_sequence&
    TimeImpact ();

    void
    TimeImpact (const TimeImpact_sequence& s);

    // MonetaryImpact
    // 
    typedef ::iodef_1_0::MonetaryImpact MonetaryImpact_type;
    typedef ::xsd::cxx::tree::sequence< MonetaryImpact_type > MonetaryImpact_sequence;
    typedef MonetaryImpact_sequence::iterator MonetaryImpact_iterator;
    typedef MonetaryImpact_sequence::const_iterator MonetaryImpact_const_iterator;
    typedef ::xsd::cxx::tree::traits< MonetaryImpact_type, char > MonetaryImpact_traits;

    const MonetaryImpact_sequence&
    MonetaryImpact () const;

    MonetaryImpact_sequence&
    MonetaryImpact ();

    void
    MonetaryImpact (const MonetaryImpact_sequence& s);

    // Counter
    // 
    typedef ::iodef_1_0::Counter Counter_type;
    typedef ::xsd::cxx::tree::sequence< Counter_type > Counter_sequence;
    typedef Counter_sequence::iterator Counter_iterator;
    typedef Counter_sequence::const_iterator Counter_const_iterator;
    typedef ::xsd::cxx::tree::traits< Counter_type, char > Counter_traits;

    const Counter_sequence&
    Counter () const;

    Counter_sequence&
    Counter ();

    void
    Counter (const Counter_sequence& s);

    // Confidence
    // 
    typedef ::iodef_1_0::Confidence Confidence_type;
    typedef ::xsd::cxx::tree::optional< Confidence_type > Confidence_optional;
    typedef ::xsd::cxx::tree::traits< Confidence_type, char > Confidence_traits;

    const Confidence_optional&
    Confidence () const;

    Confidence_optional&
    Confidence ();

    void
    Confidence (const Confidence_type& x);

    void
    Confidence (const Confidence_optional& x);

    void
    Confidence (::std::auto_ptr< Confidence_type > p);

    // AdditionalData
    // 
    typedef ::iodef_1_0::ExtensionType AdditionalData_type;
    typedef ::xsd::cxx::tree::sequence< AdditionalData_type > AdditionalData_sequence;
    typedef AdditionalData_sequence::iterator AdditionalData_iterator;
    typedef AdditionalData_sequence::const_iterator AdditionalData_const_iterator;
    typedef ::xsd::cxx::tree::traits< AdditionalData_type, char > AdditionalData_traits;

    const AdditionalData_sequence&
    AdditionalData () const;

    AdditionalData_sequence&
    AdditionalData ();

    void
    AdditionalData (const AdditionalData_sequence& s);

    // occurrence
    // 
    typedef ::iodef_1_0::occurrence occurrence_type;
    typedef ::xsd::cxx::tree::optional< occurrence_type > occurrence_optional;
    typedef ::xsd::cxx::tree::traits< occurrence_type, char > occurrence_traits;

    const occurrence_optional&
    occurrence () const;

    occurrence_optional&
    occurrence ();

    void
    occurrence (const occurrence_type& x);

    void
    occurrence (const occurrence_optional& x);

    void
    occurrence (::std::auto_ptr< occurrence_type > p);

    // restriction
    // 
    typedef ::iodef_1_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // Constructors.
    //
    Assessment ();

    Assessment (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    Assessment (const Assessment& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual Assessment*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Assessment ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Impact_sequence Impact_;
    TimeImpact_sequence TimeImpact_;
    MonetaryImpact_sequence MonetaryImpact_;
    Counter_sequence Counter_;
    Confidence_optional Confidence_;
    AdditionalData_sequence AdditionalData_;
    occurrence_optional occurrence_;
    restriction_optional restriction_;
  };

  class Impact: public ::iodef_1_0::MLStringType
  {
    public:
    // severity
    // 
    typedef ::iodef_1_0::severity_type severity_type;
    typedef ::xsd::cxx::tree::optional< severity_type > severity_optional;
    typedef ::xsd::cxx::tree::traits< severity_type, char > severity_traits;

    const severity_optional&
    severity () const;

    severity_optional&
    severity ();

    void
    severity (const severity_type& x);

    void
    severity (const severity_optional& x);

    void
    severity (::std::auto_ptr< severity_type > p);

    // completion
    // 
    typedef ::iodef_1_0::completion completion_type;
    typedef ::xsd::cxx::tree::optional< completion_type > completion_optional;
    typedef ::xsd::cxx::tree::traits< completion_type, char > completion_traits;

    const completion_optional&
    completion () const;

    completion_optional&
    completion ();

    void
    completion (const completion_type& x);

    void
    completion (const completion_optional& x);

    void
    completion (::std::auto_ptr< completion_type > p);

    // type
    // 
    typedef ::iodef_1_0::type1 type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::auto_ptr< type_type > p);

    static const type_type&
    type_default_value ();

    // ext-type
    // 
    typedef ::xml_schema::string ext_type_type;
    typedef ::xsd::cxx::tree::optional< ext_type_type > ext_type_optional;
    typedef ::xsd::cxx::tree::traits< ext_type_type, char > ext_type_traits;

    const ext_type_optional&
    ext_type () const;

    ext_type_optional&
    ext_type ();

    void
    ext_type (const ext_type_type& x);

    void
    ext_type (const ext_type_optional& x);

    void
    ext_type (::std::auto_ptr< ext_type_type > p);

    // Constructors.
    //
    Impact ();

    Impact (const char*);

    Impact (const ::std::string&);

    Impact (const ::xml_schema::string&);

    Impact (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Impact (const Impact& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual Impact*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Impact ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    severity_optional severity_;
    completion_optional completion_;
    ::xsd::cxx::tree::one< type_type > type_;
    static const type_type type_default_value_;
    ext_type_optional ext_type_;
  };

  class TimeImpact: public ::iodef_1_0::PositiveFloatType
  {
    public:
    // severity
    // 
    typedef ::iodef_1_0::severity_type severity_type;
    typedef ::xsd::cxx::tree::optional< severity_type > severity_optional;
    typedef ::xsd::cxx::tree::traits< severity_type, char > severity_traits;

    const severity_optional&
    severity () const;

    severity_optional&
    severity ();

    void
    severity (const severity_type& x);

    void
    severity (const severity_optional& x);

    void
    severity (::std::auto_ptr< severity_type > p);

    // metric
    // 
    typedef ::iodef_1_0::metric metric_type;
    typedef ::xsd::cxx::tree::traits< metric_type, char > metric_traits;

    const metric_type&
    metric () const;

    metric_type&
    metric ();

    void
    metric (const metric_type& x);

    void
    metric (::std::auto_ptr< metric_type > p);

    // ext-metric
    // 
    typedef ::xml_schema::string ext_metric_type;
    typedef ::xsd::cxx::tree::optional< ext_metric_type > ext_metric_optional;
    typedef ::xsd::cxx::tree::traits< ext_metric_type, char > ext_metric_traits;

    const ext_metric_optional&
    ext_metric () const;

    ext_metric_optional&
    ext_metric ();

    void
    ext_metric (const ext_metric_type& x);

    void
    ext_metric (const ext_metric_optional& x);

    void
    ext_metric (::std::auto_ptr< ext_metric_type > p);

    // duration
    // 
    typedef ::iodef_1_0::duration_type duration_type;
    typedef ::xsd::cxx::tree::optional< duration_type > duration_optional;
    typedef ::xsd::cxx::tree::traits< duration_type, char > duration_traits;

    const duration_optional&
    duration () const;

    duration_optional&
    duration ();

    void
    duration (const duration_type& x);

    void
    duration (const duration_optional& x);

    void
    duration (::std::auto_ptr< duration_type > p);

    // ext-duration
    // 
    typedef ::xml_schema::string ext_duration_type;
    typedef ::xsd::cxx::tree::optional< ext_duration_type > ext_duration_optional;
    typedef ::xsd::cxx::tree::traits< ext_duration_type, char > ext_duration_traits;

    const ext_duration_optional&
    ext_duration () const;

    ext_duration_optional&
    ext_duration ();

    void
    ext_duration (const ext_duration_type& x);

    void
    ext_duration (const ext_duration_optional& x);

    void
    ext_duration (::std::auto_ptr< ext_duration_type > p);

    // Constructors.
    //
    TimeImpact (const ::xml_schema::float_&,
                const metric_type&);

    TimeImpact (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    TimeImpact (const TimeImpact& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual TimeImpact*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~TimeImpact ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    severity_optional severity_;
    ::xsd::cxx::tree::one< metric_type > metric_;
    ext_metric_optional ext_metric_;
    duration_optional duration_;
    ext_duration_optional ext_duration_;
  };

  class MonetaryImpact: public ::iodef_1_0::PositiveFloatType
  {
    public:
    // severity
    // 
    typedef ::iodef_1_0::severity_type severity_type;
    typedef ::xsd::cxx::tree::optional< severity_type > severity_optional;
    typedef ::xsd::cxx::tree::traits< severity_type, char > severity_traits;

    const severity_optional&
    severity () const;

    severity_optional&
    severity ();

    void
    severity (const severity_type& x);

    void
    severity (const severity_optional& x);

    void
    severity (::std::auto_ptr< severity_type > p);

    // currency
    // 
    typedef ::xml_schema::string currency_type;
    typedef ::xsd::cxx::tree::optional< currency_type > currency_optional;
    typedef ::xsd::cxx::tree::traits< currency_type, char > currency_traits;

    const currency_optional&
    currency () const;

    currency_optional&
    currency ();

    void
    currency (const currency_type& x);

    void
    currency (const currency_optional& x);

    void
    currency (::std::auto_ptr< currency_type > p);

    // Constructors.
    //
    MonetaryImpact (const ::xml_schema::float_&);

    MonetaryImpact (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    MonetaryImpact (const MonetaryImpact& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual MonetaryImpact*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~MonetaryImpact ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    severity_optional severity_;
    currency_optional currency_;
  };

  class Confidence: public ::xml_schema::type
  {
    public:
    // rating
    // 
    typedef ::iodef_1_0::rating rating_type;
    typedef ::xsd::cxx::tree::traits< rating_type, char > rating_traits;

    const rating_type&
    rating () const;

    rating_type&
    rating ();

    void
    rating (const rating_type& x);

    void
    rating (::std::auto_ptr< rating_type > p);

    // Constructors.
    //
    Confidence (const rating_type&);

    Confidence (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    Confidence (const Confidence& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual Confidence*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Confidence ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< rating_type > rating_;
  };

  class EventData: public ::xml_schema::type
  {
    public:
    // Description
    // 
    typedef ::iodef_1_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // DetectTime
    // 
    typedef ::xml_schema::date_time DetectTime_type;
    typedef ::xsd::cxx::tree::optional< DetectTime_type > DetectTime_optional;
    typedef ::xsd::cxx::tree::traits< DetectTime_type, char > DetectTime_traits;

    const DetectTime_optional&
    DetectTime () const;

    DetectTime_optional&
    DetectTime ();

    void
    DetectTime (const DetectTime_type& x);

    void
    DetectTime (const DetectTime_optional& x);

    void
    DetectTime (::std::auto_ptr< DetectTime_type > p);

    // StartTime
    // 
    typedef ::xml_schema::date_time StartTime_type;
    typedef ::xsd::cxx::tree::optional< StartTime_type > StartTime_optional;
    typedef ::xsd::cxx::tree::traits< StartTime_type, char > StartTime_traits;

    const StartTime_optional&
    StartTime () const;

    StartTime_optional&
    StartTime ();

    void
    StartTime (const StartTime_type& x);

    void
    StartTime (const StartTime_optional& x);

    void
    StartTime (::std::auto_ptr< StartTime_type > p);

    // EndTime
    // 
    typedef ::xml_schema::date_time EndTime_type;
    typedef ::xsd::cxx::tree::optional< EndTime_type > EndTime_optional;
    typedef ::xsd::cxx::tree::traits< EndTime_type, char > EndTime_traits;

    const EndTime_optional&
    EndTime () const;

    EndTime_optional&
    EndTime ();

    void
    EndTime (const EndTime_type& x);

    void
    EndTime (const EndTime_optional& x);

    void
    EndTime (::std::auto_ptr< EndTime_type > p);

    // Contact
    // 
    typedef ::iodef_1_0::Contact Contact_type;
    typedef ::xsd::cxx::tree::sequence< Contact_type > Contact_sequence;
    typedef Contact_sequence::iterator Contact_iterator;
    typedef Contact_sequence::const_iterator Contact_const_iterator;
    typedef ::xsd::cxx::tree::traits< Contact_type, char > Contact_traits;

    const Contact_sequence&
    Contact () const;

    Contact_sequence&
    Contact ();

    void
    Contact (const Contact_sequence& s);

    // Assessment
    // 
    typedef ::iodef_1_0::Assessment Assessment_type;
    typedef ::xsd::cxx::tree::optional< Assessment_type > Assessment_optional;
    typedef ::xsd::cxx::tree::traits< Assessment_type, char > Assessment_traits;

    const Assessment_optional&
    Assessment () const;

    Assessment_optional&
    Assessment ();

    void
    Assessment (const Assessment_type& x);

    void
    Assessment (const Assessment_optional& x);

    void
    Assessment (::std::auto_ptr< Assessment_type > p);

    // Method
    // 
    typedef ::iodef_1_0::Method Method_type;
    typedef ::xsd::cxx::tree::sequence< Method_type > Method_sequence;
    typedef Method_sequence::iterator Method_iterator;
    typedef Method_sequence::const_iterator Method_const_iterator;
    typedef ::xsd::cxx::tree::traits< Method_type, char > Method_traits;

    const Method_sequence&
    Method () const;

    Method_sequence&
    Method ();

    void
    Method (const Method_sequence& s);

    // Flow
    // 
    typedef ::iodef_1_0::Flow Flow_type;
    typedef ::xsd::cxx::tree::sequence< Flow_type > Flow_sequence;
    typedef Flow_sequence::iterator Flow_iterator;
    typedef Flow_sequence::const_iterator Flow_const_iterator;
    typedef ::xsd::cxx::tree::traits< Flow_type, char > Flow_traits;

    const Flow_sequence&
    Flow () const;

    Flow_sequence&
    Flow ();

    void
    Flow (const Flow_sequence& s);

    // Expectation
    // 
    typedef ::iodef_1_0::Expectation Expectation_type;
    typedef ::xsd::cxx::tree::sequence< Expectation_type > Expectation_sequence;
    typedef Expectation_sequence::iterator Expectation_iterator;
    typedef Expectation_sequence::const_iterator Expectation_const_iterator;
    typedef ::xsd::cxx::tree::traits< Expectation_type, char > Expectation_traits;

    const Expectation_sequence&
    Expectation () const;

    Expectation_sequence&
    Expectation ();

    void
    Expectation (const Expectation_sequence& s);

    // Record
    // 
    typedef ::iodef_1_0::Record Record_type;
    typedef ::xsd::cxx::tree::optional< Record_type > Record_optional;
    typedef ::xsd::cxx::tree::traits< Record_type, char > Record_traits;

    const Record_optional&
    Record () const;

    Record_optional&
    Record ();

    void
    Record (const Record_type& x);

    void
    Record (const Record_optional& x);

    void
    Record (::std::auto_ptr< Record_type > p);

    // EventData
    // 
    typedef ::iodef_1_0::EventData EventData1_type;
    typedef ::xsd::cxx::tree::sequence< EventData1_type > EventData1_sequence;
    typedef EventData1_sequence::iterator EventData1_iterator;
    typedef EventData1_sequence::const_iterator EventData1_const_iterator;
    typedef ::xsd::cxx::tree::traits< EventData1_type, char > EventData1_traits;

    const EventData1_sequence&
    EventData1 () const;

    EventData1_sequence&
    EventData1 ();

    void
    EventData1 (const EventData1_sequence& s);

    // AdditionalData
    // 
    typedef ::iodef_1_0::ExtensionType AdditionalData_type;
    typedef ::xsd::cxx::tree::sequence< AdditionalData_type > AdditionalData_sequence;
    typedef AdditionalData_sequence::iterator AdditionalData_iterator;
    typedef AdditionalData_sequence::const_iterator AdditionalData_const_iterator;
    typedef ::xsd::cxx::tree::traits< AdditionalData_type, char > AdditionalData_traits;

    const AdditionalData_sequence&
    AdditionalData () const;

    AdditionalData_sequence&
    AdditionalData ();

    void
    AdditionalData (const AdditionalData_sequence& s);

    // restriction
    // 
    typedef ::iodef_1_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_type&
    restriction () const;

    restriction_type&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    static const restriction_type&
    restriction_default_value ();

    // Constructors.
    //
    EventData ();

    EventData (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    EventData (const EventData& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual EventData*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~EventData ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Description_sequence Description_;
    DetectTime_optional DetectTime_;
    StartTime_optional StartTime_;
    EndTime_optional EndTime_;
    Contact_sequence Contact_;
    Assessment_optional Assessment_;
    Method_sequence Method_;
    Flow_sequence Flow_;
    Expectation_sequence Expectation_;
    Record_optional Record_;
    EventData1_sequence EventData1_;
    AdditionalData_sequence AdditionalData_;
    ::xsd::cxx::tree::one< restriction_type > restriction_;
    static const restriction_type restriction_default_value_;
  };

  class Flow: public ::xml_schema::type
  {
    public:
    // System
    // 
    typedef ::iodef_1_0::System System_type;
    typedef ::xsd::cxx::tree::sequence< System_type > System_sequence;
    typedef System_sequence::iterator System_iterator;
    typedef System_sequence::const_iterator System_const_iterator;
    typedef ::xsd::cxx::tree::traits< System_type, char > System_traits;

    const System_sequence&
    System () const;

    System_sequence&
    System ();

    void
    System (const System_sequence& s);

    // Constructors.
    //
    Flow ();

    Flow (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    Flow (const Flow& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual Flow*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Flow ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    System_sequence System_;
  };

  class System: public ::xml_schema::type
  {
    public:
    // Node
    // 
    typedef ::iodef_1_0::Node Node_type;
    typedef ::xsd::cxx::tree::traits< Node_type, char > Node_traits;

    const Node_type&
    Node () const;

    Node_type&
    Node ();

    void
    Node (const Node_type& x);

    void
    Node (::std::auto_ptr< Node_type > p);

    // Service
    // 
    typedef ::iodef_1_0::Service Service_type;
    typedef ::xsd::cxx::tree::sequence< Service_type > Service_sequence;
    typedef Service_sequence::iterator Service_iterator;
    typedef Service_sequence::const_iterator Service_const_iterator;
    typedef ::xsd::cxx::tree::traits< Service_type, char > Service_traits;

    const Service_sequence&
    Service () const;

    Service_sequence&
    Service ();

    void
    Service (const Service_sequence& s);

    // OperatingSystem
    // 
    typedef ::iodef_1_0::SoftwareType OperatingSystem_type;
    typedef ::xsd::cxx::tree::sequence< OperatingSystem_type > OperatingSystem_sequence;
    typedef OperatingSystem_sequence::iterator OperatingSystem_iterator;
    typedef OperatingSystem_sequence::const_iterator OperatingSystem_const_iterator;
    typedef ::xsd::cxx::tree::traits< OperatingSystem_type, char > OperatingSystem_traits;

    const OperatingSystem_sequence&
    OperatingSystem () const;

    OperatingSystem_sequence&
    OperatingSystem ();

    void
    OperatingSystem (const OperatingSystem_sequence& s);

    // Counter
    // 
    typedef ::iodef_1_0::Counter Counter_type;
    typedef ::xsd::cxx::tree::sequence< Counter_type > Counter_sequence;
    typedef Counter_sequence::iterator Counter_iterator;
    typedef Counter_sequence::const_iterator Counter_const_iterator;
    typedef ::xsd::cxx::tree::traits< Counter_type, char > Counter_traits;

    const Counter_sequence&
    Counter () const;

    Counter_sequence&
    Counter ();

    void
    Counter (const Counter_sequence& s);

    // Description
    // 
    typedef ::iodef_1_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // AdditionalData
    // 
    typedef ::iodef_1_0::ExtensionType AdditionalData_type;
    typedef ::xsd::cxx::tree::sequence< AdditionalData_type > AdditionalData_sequence;
    typedef AdditionalData_sequence::iterator AdditionalData_iterator;
    typedef AdditionalData_sequence::const_iterator AdditionalData_const_iterator;
    typedef ::xsd::cxx::tree::traits< AdditionalData_type, char > AdditionalData_traits;

    const AdditionalData_sequence&
    AdditionalData () const;

    AdditionalData_sequence&
    AdditionalData ();

    void
    AdditionalData (const AdditionalData_sequence& s);

    // restriction
    // 
    typedef ::iodef_1_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // interface
    // 
    typedef ::xml_schema::string interface_type;
    typedef ::xsd::cxx::tree::optional< interface_type > interface_optional;
    typedef ::xsd::cxx::tree::traits< interface_type, char > interface_traits;

    const interface_optional&
    interface () const;

    interface_optional&
    interface ();

    void
    interface (const interface_type& x);

    void
    interface (const interface_optional& x);

    void
    interface (::std::auto_ptr< interface_type > p);

    // category
    // 
    typedef ::iodef_1_0::category category_type;
    typedef ::xsd::cxx::tree::optional< category_type > category_optional;
    typedef ::xsd::cxx::tree::traits< category_type, char > category_traits;

    const category_optional&
    category () const;

    category_optional&
    category ();

    void
    category (const category_type& x);

    void
    category (const category_optional& x);

    void
    category (::std::auto_ptr< category_type > p);

    // ext-category
    // 
    typedef ::xml_schema::string ext_category_type;
    typedef ::xsd::cxx::tree::optional< ext_category_type > ext_category_optional;
    typedef ::xsd::cxx::tree::traits< ext_category_type, char > ext_category_traits;

    const ext_category_optional&
    ext_category () const;

    ext_category_optional&
    ext_category ();

    void
    ext_category (const ext_category_type& x);

    void
    ext_category (const ext_category_optional& x);

    void
    ext_category (::std::auto_ptr< ext_category_type > p);

    // spoofed
    // 
    typedef ::iodef_1_0::spoofed spoofed_type;
    typedef ::xsd::cxx::tree::traits< spoofed_type, char > spoofed_traits;

    const spoofed_type&
    spoofed () const;

    spoofed_type&
    spoofed ();

    void
    spoofed (const spoofed_type& x);

    void
    spoofed (::std::auto_ptr< spoofed_type > p);

    static const spoofed_type&
    spoofed_default_value ();

    // Constructors.
    //
    System (const Node_type&);

    System (::std::auto_ptr< Node_type >&);

    System (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    System (const System& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual System*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~System ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Node_type > Node_;
    Service_sequence Service_;
    OperatingSystem_sequence OperatingSystem_;
    Counter_sequence Counter_;
    Description_sequence Description_;
    AdditionalData_sequence AdditionalData_;
    restriction_optional restriction_;
    interface_optional interface_;
    category_optional category_;
    ext_category_optional ext_category_;
    ::xsd::cxx::tree::one< spoofed_type > spoofed_;
    static const spoofed_type spoofed_default_value_;
  };

  class Node: public ::xml_schema::type
  {
    public:
    // NodeName
    // 
    typedef ::iodef_1_0::MLStringType NodeName_type;
    typedef ::xsd::cxx::tree::sequence< NodeName_type > NodeName_sequence;
    typedef NodeName_sequence::iterator NodeName_iterator;
    typedef NodeName_sequence::const_iterator NodeName_const_iterator;
    typedef ::xsd::cxx::tree::traits< NodeName_type, char > NodeName_traits;

    const NodeName_sequence&
    NodeName () const;

    NodeName_sequence&
    NodeName ();

    void
    NodeName (const NodeName_sequence& s);

    // Address
    // 
    typedef ::iodef_1_0::Address Address_type;
    typedef ::xsd::cxx::tree::sequence< Address_type > Address_sequence;
    typedef Address_sequence::iterator Address_iterator;
    typedef Address_sequence::const_iterator Address_const_iterator;
    typedef ::xsd::cxx::tree::traits< Address_type, char > Address_traits;

    const Address_sequence&
    Address () const;

    Address_sequence&
    Address ();

    void
    Address (const Address_sequence& s);

    // Location
    // 
    typedef ::iodef_1_0::MLStringType Location_type;
    typedef ::xsd::cxx::tree::optional< Location_type > Location_optional;
    typedef ::xsd::cxx::tree::traits< Location_type, char > Location_traits;

    const Location_optional&
    Location () const;

    Location_optional&
    Location ();

    void
    Location (const Location_type& x);

    void
    Location (const Location_optional& x);

    void
    Location (::std::auto_ptr< Location_type > p);

    // DateTime
    // 
    typedef ::xml_schema::date_time DateTime_type;
    typedef ::xsd::cxx::tree::optional< DateTime_type > DateTime_optional;
    typedef ::xsd::cxx::tree::traits< DateTime_type, char > DateTime_traits;

    const DateTime_optional&
    DateTime () const;

    DateTime_optional&
    DateTime ();

    void
    DateTime (const DateTime_type& x);

    void
    DateTime (const DateTime_optional& x);

    void
    DateTime (::std::auto_ptr< DateTime_type > p);

    // NodeRole
    // 
    typedef ::iodef_1_0::NodeRole NodeRole_type;
    typedef ::xsd::cxx::tree::sequence< NodeRole_type > NodeRole_sequence;
    typedef NodeRole_sequence::iterator NodeRole_iterator;
    typedef NodeRole_sequence::const_iterator NodeRole_const_iterator;
    typedef ::xsd::cxx::tree::traits< NodeRole_type, char > NodeRole_traits;

    const NodeRole_sequence&
    NodeRole () const;

    NodeRole_sequence&
    NodeRole ();

    void
    NodeRole (const NodeRole_sequence& s);

    // Counter
    // 
    typedef ::iodef_1_0::Counter Counter_type;
    typedef ::xsd::cxx::tree::sequence< Counter_type > Counter_sequence;
    typedef Counter_sequence::iterator Counter_iterator;
    typedef Counter_sequence::const_iterator Counter_const_iterator;
    typedef ::xsd::cxx::tree::traits< Counter_type, char > Counter_traits;

    const Counter_sequence&
    Counter () const;

    Counter_sequence&
    Counter ();

    void
    Counter (const Counter_sequence& s);

    // Constructors.
    //
    Node ();

    Node (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    Node (const Node& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual Node*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Node ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    NodeName_sequence NodeName_;
    Address_sequence Address_;
    Location_optional Location_;
    DateTime_optional DateTime_;
    NodeRole_sequence NodeRole_;
    Counter_sequence Counter_;
  };

  class Address: public ::xml_schema::string
  {
    public:
    // category
    // 
    typedef ::iodef_1_0::category1 category_type;
    typedef ::xsd::cxx::tree::traits< category_type, char > category_traits;

    const category_type&
    category () const;

    category_type&
    category ();

    void
    category (const category_type& x);

    void
    category (::std::auto_ptr< category_type > p);

    static const category_type&
    category_default_value ();

    // ext-category
    // 
    typedef ::xml_schema::string ext_category_type;
    typedef ::xsd::cxx::tree::optional< ext_category_type > ext_category_optional;
    typedef ::xsd::cxx::tree::traits< ext_category_type, char > ext_category_traits;

    const ext_category_optional&
    ext_category () const;

    ext_category_optional&
    ext_category ();

    void
    ext_category (const ext_category_type& x);

    void
    ext_category (const ext_category_optional& x);

    void
    ext_category (::std::auto_ptr< ext_category_type > p);

    // vlan-name
    // 
    typedef ::xml_schema::string vlan_name_type;
    typedef ::xsd::cxx::tree::optional< vlan_name_type > vlan_name_optional;
    typedef ::xsd::cxx::tree::traits< vlan_name_type, char > vlan_name_traits;

    const vlan_name_optional&
    vlan_name () const;

    vlan_name_optional&
    vlan_name ();

    void
    vlan_name (const vlan_name_type& x);

    void
    vlan_name (const vlan_name_optional& x);

    void
    vlan_name (::std::auto_ptr< vlan_name_type > p);

    // vlan-num
    // 
    typedef ::xml_schema::integer vlan_num_type;
    typedef ::xsd::cxx::tree::optional< vlan_num_type > vlan_num_optional;
    typedef ::xsd::cxx::tree::traits< vlan_num_type, char > vlan_num_traits;

    const vlan_num_optional&
    vlan_num () const;

    vlan_num_optional&
    vlan_num ();

    void
    vlan_num (const vlan_num_type& x);

    void
    vlan_num (const vlan_num_optional& x);

    // Constructors.
    //
    Address ();

    Address (const char*);

    Address (const ::std::string&);

    Address (const ::xml_schema::string&);

    Address (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Address (const Address& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Address*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Address ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< category_type > category_;
    static const category_type category_default_value_;
    ext_category_optional ext_category_;
    vlan_name_optional vlan_name_;
    vlan_num_optional vlan_num_;
  };

  class NodeRole: public ::iodef_1_0::MLStringType
  {
    public:
    // category
    // 
    typedef ::iodef_1_0::category2 category_type;
    typedef ::xsd::cxx::tree::traits< category_type, char > category_traits;

    const category_type&
    category () const;

    category_type&
    category ();

    void
    category (const category_type& x);

    void
    category (::std::auto_ptr< category_type > p);

    // ext-category
    // 
    typedef ::xml_schema::string ext_category_type;
    typedef ::xsd::cxx::tree::optional< ext_category_type > ext_category_optional;
    typedef ::xsd::cxx::tree::traits< ext_category_type, char > ext_category_traits;

    const ext_category_optional&
    ext_category () const;

    ext_category_optional&
    ext_category ();

    void
    ext_category (const ext_category_type& x);

    void
    ext_category (const ext_category_optional& x);

    void
    ext_category (::std::auto_ptr< ext_category_type > p);

    // Constructors.
    //
    NodeRole (const category_type&);

    NodeRole (const char*,
              const category_type&);

    NodeRole (const ::std::string&,
              const category_type&);

    NodeRole (const ::xml_schema::string&,
              const category_type&);

    NodeRole (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    NodeRole (const NodeRole& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual NodeRole*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~NodeRole ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< category_type > category_;
    ext_category_optional ext_category_;
  };

  class Service: public ::xml_schema::type
  {
    public:
    // Port
    // 
    typedef ::xml_schema::integer Port_type;
    typedef ::xsd::cxx::tree::optional< Port_type > Port_optional;
    typedef ::xsd::cxx::tree::traits< Port_type, char > Port_traits;

    const Port_optional&
    Port () const;

    Port_optional&
    Port ();

    void
    Port (const Port_type& x);

    void
    Port (const Port_optional& x);

    // Portlist
    // 
    typedef ::iodef_1_0::PortlistType Portlist_type;
    typedef ::xsd::cxx::tree::optional< Portlist_type > Portlist_optional;
    typedef ::xsd::cxx::tree::traits< Portlist_type, char > Portlist_traits;

    const Portlist_optional&
    Portlist () const;

    Portlist_optional&
    Portlist ();

    void
    Portlist (const Portlist_type& x);

    void
    Portlist (const Portlist_optional& x);

    void
    Portlist (::std::auto_ptr< Portlist_type > p);

    // ProtoType
    // 
    typedef ::xml_schema::integer ProtoType_type;
    typedef ::xsd::cxx::tree::optional< ProtoType_type > ProtoType_optional;
    typedef ::xsd::cxx::tree::traits< ProtoType_type, char > ProtoType_traits;

    const ProtoType_optional&
    ProtoType () const;

    ProtoType_optional&
    ProtoType ();

    void
    ProtoType (const ProtoType_type& x);

    void
    ProtoType (const ProtoType_optional& x);

    // ProtoCode
    // 
    typedef ::xml_schema::integer ProtoCode_type;
    typedef ::xsd::cxx::tree::optional< ProtoCode_type > ProtoCode_optional;
    typedef ::xsd::cxx::tree::traits< ProtoCode_type, char > ProtoCode_traits;

    const ProtoCode_optional&
    ProtoCode () const;

    ProtoCode_optional&
    ProtoCode ();

    void
    ProtoCode (const ProtoCode_type& x);

    void
    ProtoCode (const ProtoCode_optional& x);

    // ProtoField
    // 
    typedef ::xml_schema::integer ProtoField_type;
    typedef ::xsd::cxx::tree::optional< ProtoField_type > ProtoField_optional;
    typedef ::xsd::cxx::tree::traits< ProtoField_type, char > ProtoField_traits;

    const ProtoField_optional&
    ProtoField () const;

    ProtoField_optional&
    ProtoField ();

    void
    ProtoField (const ProtoField_type& x);

    void
    ProtoField (const ProtoField_optional& x);

    // Application
    // 
    typedef ::iodef_1_0::SoftwareType Application_type;
    typedef ::xsd::cxx::tree::optional< Application_type > Application_optional;
    typedef ::xsd::cxx::tree::traits< Application_type, char > Application_traits;

    const Application_optional&
    Application () const;

    Application_optional&
    Application ();

    void
    Application (const Application_type& x);

    void
    Application (const Application_optional& x);

    void
    Application (::std::auto_ptr< Application_type > p);

    // ip_protocol
    // 
    typedef ::xml_schema::integer ip_protocol_type;
    typedef ::xsd::cxx::tree::traits< ip_protocol_type, char > ip_protocol_traits;

    const ip_protocol_type&
    ip_protocol () const;

    ip_protocol_type&
    ip_protocol ();

    void
    ip_protocol (const ip_protocol_type& x);

    // Constructors.
    //
    Service (const ip_protocol_type&);

    Service (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Service (const Service& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Service*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Service ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Port_optional Port_;
    Portlist_optional Portlist_;
    ProtoType_optional ProtoType_;
    ProtoCode_optional ProtoCode_;
    ProtoField_optional ProtoField_;
    Application_optional Application_;
    ::xsd::cxx::tree::one< ip_protocol_type > ip_protocol_;
  };

  class Counter: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >
  {
    public:
    // type
    // 
    typedef ::iodef_1_0::type2 type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::auto_ptr< type_type > p);

    // ext-type
    // 
    typedef ::xml_schema::string ext_type_type;
    typedef ::xsd::cxx::tree::optional< ext_type_type > ext_type_optional;
    typedef ::xsd::cxx::tree::traits< ext_type_type, char > ext_type_traits;

    const ext_type_optional&
    ext_type () const;

    ext_type_optional&
    ext_type ();

    void
    ext_type (const ext_type_type& x);

    void
    ext_type (const ext_type_optional& x);

    void
    ext_type (::std::auto_ptr< ext_type_type > p);

    // meaning
    // 
    typedef ::xml_schema::string meaning_type;
    typedef ::xsd::cxx::tree::optional< meaning_type > meaning_optional;
    typedef ::xsd::cxx::tree::traits< meaning_type, char > meaning_traits;

    const meaning_optional&
    meaning () const;

    meaning_optional&
    meaning ();

    void
    meaning (const meaning_type& x);

    void
    meaning (const meaning_optional& x);

    void
    meaning (::std::auto_ptr< meaning_type > p);

    // duration
    // 
    typedef ::iodef_1_0::duration_type duration_type;
    typedef ::xsd::cxx::tree::optional< duration_type > duration_optional;
    typedef ::xsd::cxx::tree::traits< duration_type, char > duration_traits;

    const duration_optional&
    duration () const;

    duration_optional&
    duration ();

    void
    duration (const duration_type& x);

    void
    duration (const duration_optional& x);

    void
    duration (::std::auto_ptr< duration_type > p);

    // ext-duration
    // 
    typedef ::xml_schema::string ext_duration_type;
    typedef ::xsd::cxx::tree::optional< ext_duration_type > ext_duration_optional;
    typedef ::xsd::cxx::tree::traits< ext_duration_type, char > ext_duration_traits;

    const ext_duration_optional&
    ext_duration () const;

    ext_duration_optional&
    ext_duration ();

    void
    ext_duration (const ext_duration_type& x);

    void
    ext_duration (const ext_duration_optional& x);

    void
    ext_duration (::std::auto_ptr< ext_duration_type > p);

    // Constructors.
    //
    Counter (const ::xml_schema::double_&,
             const type_type&);

    Counter (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Counter (const Counter& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Counter*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Counter ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    ext_type_optional ext_type_;
    meaning_optional meaning_;
    duration_optional duration_;
    ext_duration_optional ext_duration_;
  };

  class Record: public ::xml_schema::type
  {
    public:
    // RecordData
    // 
    typedef ::iodef_1_0::RecordData RecordData_type;
    typedef ::xsd::cxx::tree::sequence< RecordData_type > RecordData_sequence;
    typedef RecordData_sequence::iterator RecordData_iterator;
    typedef RecordData_sequence::const_iterator RecordData_const_iterator;
    typedef ::xsd::cxx::tree::traits< RecordData_type, char > RecordData_traits;

    const RecordData_sequence&
    RecordData () const;

    RecordData_sequence&
    RecordData ();

    void
    RecordData (const RecordData_sequence& s);

    // restriction
    // 
    typedef ::iodef_1_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // Constructors.
    //
    Record ();

    Record (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Record (const Record& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual Record*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Record ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    RecordData_sequence RecordData_;
    restriction_optional restriction_;
  };

  class RecordData: public ::xml_schema::type
  {
    public:
    // DateTime
    // 
    typedef ::xml_schema::date_time DateTime_type;
    typedef ::xsd::cxx::tree::optional< DateTime_type > DateTime_optional;
    typedef ::xsd::cxx::tree::traits< DateTime_type, char > DateTime_traits;

    const DateTime_optional&
    DateTime () const;

    DateTime_optional&
    DateTime ();

    void
    DateTime (const DateTime_type& x);

    void
    DateTime (const DateTime_optional& x);

    void
    DateTime (::std::auto_ptr< DateTime_type > p);

    // Description
    // 
    typedef ::iodef_1_0::MLStringType Description_type;
    typedef ::xsd::cxx::tree::sequence< Description_type > Description_sequence;
    typedef Description_sequence::iterator Description_iterator;
    typedef Description_sequence::const_iterator Description_const_iterator;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_sequence&
    Description () const;

    Description_sequence&
    Description ();

    void
    Description (const Description_sequence& s);

    // Application
    // 
    typedef ::iodef_1_0::SoftwareType Application_type;
    typedef ::xsd::cxx::tree::optional< Application_type > Application_optional;
    typedef ::xsd::cxx::tree::traits< Application_type, char > Application_traits;

    const Application_optional&
    Application () const;

    Application_optional&
    Application ();

    void
    Application (const Application_type& x);

    void
    Application (const Application_optional& x);

    void
    Application (::std::auto_ptr< Application_type > p);

    // RecordPattern
    // 
    typedef ::iodef_1_0::RecordPattern RecordPattern_type;
    typedef ::xsd::cxx::tree::sequence< RecordPattern_type > RecordPattern_sequence;
    typedef RecordPattern_sequence::iterator RecordPattern_iterator;
    typedef RecordPattern_sequence::const_iterator RecordPattern_const_iterator;
    typedef ::xsd::cxx::tree::traits< RecordPattern_type, char > RecordPattern_traits;

    const RecordPattern_sequence&
    RecordPattern () const;

    RecordPattern_sequence&
    RecordPattern ();

    void
    RecordPattern (const RecordPattern_sequence& s);

    // RecordItem
    // 
    typedef ::iodef_1_0::ExtensionType RecordItem_type;
    typedef ::xsd::cxx::tree::sequence< RecordItem_type > RecordItem_sequence;
    typedef RecordItem_sequence::iterator RecordItem_iterator;
    typedef RecordItem_sequence::const_iterator RecordItem_const_iterator;
    typedef ::xsd::cxx::tree::traits< RecordItem_type, char > RecordItem_traits;

    const RecordItem_sequence&
    RecordItem () const;

    RecordItem_sequence&
    RecordItem ();

    void
    RecordItem (const RecordItem_sequence& s);

    // AdditionalData
    // 
    typedef ::iodef_1_0::ExtensionType AdditionalData_type;
    typedef ::xsd::cxx::tree::sequence< AdditionalData_type > AdditionalData_sequence;
    typedef AdditionalData_sequence::iterator AdditionalData_iterator;
    typedef AdditionalData_sequence::const_iterator AdditionalData_const_iterator;
    typedef ::xsd::cxx::tree::traits< AdditionalData_type, char > AdditionalData_traits;

    const AdditionalData_sequence&
    AdditionalData () const;

    AdditionalData_sequence&
    AdditionalData ();

    void
    AdditionalData (const AdditionalData_sequence& s);

    // restriction
    // 
    typedef ::iodef_1_0::restriction_type restriction_type;
    typedef ::xsd::cxx::tree::optional< restriction_type > restriction_optional;
    typedef ::xsd::cxx::tree::traits< restriction_type, char > restriction_traits;

    const restriction_optional&
    restriction () const;

    restriction_optional&
    restriction ();

    void
    restriction (const restriction_type& x);

    void
    restriction (const restriction_optional& x);

    void
    restriction (::std::auto_ptr< restriction_type > p);

    // Constructors.
    //
    RecordData ();

    RecordData (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    RecordData (const RecordData& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual RecordData*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~RecordData ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    DateTime_optional DateTime_;
    Description_sequence Description_;
    Application_optional Application_;
    RecordPattern_sequence RecordPattern_;
    RecordItem_sequence RecordItem_;
    AdditionalData_sequence AdditionalData_;
    restriction_optional restriction_;
  };

  class RecordPattern: public ::xml_schema::string
  {
    public:
    // type
    // 
    typedef ::iodef_1_0::type3 type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::auto_ptr< type_type > p);

    // ext-type
    // 
    typedef ::xml_schema::string ext_type_type;
    typedef ::xsd::cxx::tree::optional< ext_type_type > ext_type_optional;
    typedef ::xsd::cxx::tree::traits< ext_type_type, char > ext_type_traits;

    const ext_type_optional&
    ext_type () const;

    ext_type_optional&
    ext_type ();

    void
    ext_type (const ext_type_type& x);

    void
    ext_type (const ext_type_optional& x);

    void
    ext_type (::std::auto_ptr< ext_type_type > p);

    // offset
    // 
    typedef ::xml_schema::integer offset_type;
    typedef ::xsd::cxx::tree::optional< offset_type > offset_optional;
    typedef ::xsd::cxx::tree::traits< offset_type, char > offset_traits;

    const offset_optional&
    offset () const;

    offset_optional&
    offset ();

    void
    offset (const offset_type& x);

    void
    offset (const offset_optional& x);

    // offsetunit
    // 
    typedef ::iodef_1_0::offsetunit offsetunit_type;
    typedef ::xsd::cxx::tree::traits< offsetunit_type, char > offsetunit_traits;

    const offsetunit_type&
    offsetunit () const;

    offsetunit_type&
    offsetunit ();

    void
    offsetunit (const offsetunit_type& x);

    void
    offsetunit (::std::auto_ptr< offsetunit_type > p);

    static const offsetunit_type&
    offsetunit_default_value ();

    // ext-offsetunit
    // 
    typedef ::xml_schema::string ext_offsetunit_type;
    typedef ::xsd::cxx::tree::optional< ext_offsetunit_type > ext_offsetunit_optional;
    typedef ::xsd::cxx::tree::traits< ext_offsetunit_type, char > ext_offsetunit_traits;

    const ext_offsetunit_optional&
    ext_offsetunit () const;

    ext_offsetunit_optional&
    ext_offsetunit ();

    void
    ext_offsetunit (const ext_offsetunit_type& x);

    void
    ext_offsetunit (const ext_offsetunit_optional& x);

    void
    ext_offsetunit (::std::auto_ptr< ext_offsetunit_type > p);

    // instance
    // 
    typedef ::xml_schema::integer instance_type;
    typedef ::xsd::cxx::tree::optional< instance_type > instance_optional;
    typedef ::xsd::cxx::tree::traits< instance_type, char > instance_traits;

    const instance_optional&
    instance () const;

    instance_optional&
    instance ();

    void
    instance (const instance_type& x);

    void
    instance (const instance_optional& x);

    // Constructors.
    //
    RecordPattern (const type_type&);

    RecordPattern (const char*,
                   const type_type&);

    RecordPattern (const ::std::string&,
                   const type_type&);

    RecordPattern (const ::xml_schema::string&,
                   const type_type&);

    RecordPattern (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    RecordPattern (const RecordPattern& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual RecordPattern*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~RecordPattern ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    ext_type_optional ext_type_;
    offset_optional offset_;
    ::xsd::cxx::tree::one< offsetunit_type > offsetunit_;
    static const offsetunit_type offsetunit_default_value_;
    ext_offsetunit_optional ext_offsetunit_;
    instance_optional instance_;
  };

  class purpose: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      traceback,
      mitigation,
      reporting,
      other,
      ext_value
    };

    purpose (value v);

    purpose (const char* v);

    purpose (const ::std::string& v);

    purpose (const ::xml_schema::nmtoken& v);

    purpose (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    purpose (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    purpose (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    purpose (const purpose& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual purpose*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    purpose&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_purpose_convert ();
    }

    protected:
    value
    _xsd_purpose_convert () const;

    public:
    static const char* const _xsd_purpose_literals_[5];
    static const value _xsd_purpose_indexes_[5];
  };

  class role: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      creator,
      admin,
      tech,
      irt,
      cc,
      ext_value
    };

    role (value v);

    role (const char* v);

    role (const ::std::string& v);

    role (const ::xml_schema::nmtoken& v);

    role (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    role (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    role (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    role (const role& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual role*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    role&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_role_convert ();
    }

    protected:
    value
    _xsd_role_convert () const;

    public:
    static const char* const _xsd_role_literals_[6];
    static const value _xsd_role_indexes_[6];
  };

  class type: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      person,
      organization,
      ext_value
    };

    type (value v);

    type (const char* v);

    type (const ::std::string& v);

    type (const ::xml_schema::nmtoken& v);

    type (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    type (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    type (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    type (const type& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_type_convert ();
    }

    protected:
    value
    _xsd_type_convert () const;

    public:
    static const char* const _xsd_type_literals_[3];
    static const value _xsd_type_indexes_[3];
  };

  class registry: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      internic,
      apnic,
      arin,
      lacnic,
      ripe,
      afrinic,
      local,
      ext_value
    };

    registry (value v);

    registry (const char* v);

    registry (const ::std::string& v);

    registry (const ::xml_schema::nmtoken& v);

    registry (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    registry (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    registry (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    registry (const registry& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual registry*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    registry&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_registry_convert ();
    }

    protected:
    value
    _xsd_registry_convert () const;

    public:
    static const char* const _xsd_registry_literals_[8];
    static const value _xsd_registry_indexes_[8];
  };

  class occurrence: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      actual,
      potential
    };

    occurrence (value v);

    occurrence (const char* v);

    occurrence (const ::std::string& v);

    occurrence (const ::xml_schema::nmtoken& v);

    occurrence (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    occurrence (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    occurrence (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    occurrence (const occurrence& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual occurrence*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    occurrence&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_occurrence_convert ();
    }

    protected:
    value
    _xsd_occurrence_convert () const;

    public:
    static const char* const _xsd_occurrence_literals_[2];
    static const value _xsd_occurrence_indexes_[2];
  };

  class completion: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      failed,
      succeeded
    };

    completion (value v);

    completion (const char* v);

    completion (const ::std::string& v);

    completion (const ::xml_schema::nmtoken& v);

    completion (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    completion (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    completion (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    completion (const completion& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual completion*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    completion&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_completion_convert ();
    }

    protected:
    value
    _xsd_completion_convert () const;

    public:
    static const char* const _xsd_completion_literals_[2];
    static const value _xsd_completion_indexes_[2];
  };

  class type1: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      admin,
      dos,
      extortion,
      file,
      info_leak,
      misconfiguration,
      recon,
      policy,
      social_engineering,
      user,
      unknown,
      ext_value
    };

    type1 (value v);

    type1 (const char* v);

    type1 (const ::std::string& v);

    type1 (const ::xml_schema::nmtoken& v);

    type1 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type1 (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type1 (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type1 (const type1& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual type1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    type1&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_type1_convert ();
    }

    protected:
    value
    _xsd_type1_convert () const;

    public:
    static const char* const _xsd_type1_literals_[12];
    static const value _xsd_type1_indexes_[12];
  };

  class metric: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      labor,
      elapsed,
      downtime,
      ext_value
    };

    metric (value v);

    metric (const char* v);

    metric (const ::std::string& v);

    metric (const ::xml_schema::nmtoken& v);

    metric (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    metric (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    metric (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    metric (const metric& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual metric*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    metric&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_metric_convert ();
    }

    protected:
    value
    _xsd_metric_convert () const;

    public:
    static const char* const _xsd_metric_literals_[4];
    static const value _xsd_metric_indexes_[4];
  };

  class rating: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      low,
      medium,
      high,
      numeric,
      unknown
    };

    rating (value v);

    rating (const char* v);

    rating (const ::std::string& v);

    rating (const ::xml_schema::nmtoken& v);

    rating (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    rating (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    rating (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    rating (const rating& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual rating*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    rating&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_rating_convert ();
    }

    protected:
    value
    _xsd_rating_convert () const;

    public:
    static const char* const _xsd_rating_literals_[5];
    static const value _xsd_rating_indexes_[5];
  };

  class category: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      source,
      target,
      intermediate,
      sensor,
      infrastructure,
      ext_value
    };

    category (value v);

    category (const char* v);

    category (const ::std::string& v);

    category (const ::xml_schema::nmtoken& v);

    category (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    category (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    category (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    category (const category& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual category*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    category&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_category_convert ();
    }

    protected:
    value
    _xsd_category_convert () const;

    public:
    static const char* const _xsd_category_literals_[6];
    static const value _xsd_category_indexes_[6];
  };

  class spoofed: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      unknown,
      yes,
      no
    };

    spoofed (value v);

    spoofed (const char* v);

    spoofed (const ::std::string& v);

    spoofed (const ::xml_schema::nmtoken& v);

    spoofed (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    spoofed (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    spoofed (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    spoofed (const spoofed& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual spoofed*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    spoofed&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_spoofed_convert ();
    }

    protected:
    value
    _xsd_spoofed_convert () const;

    public:
    static const char* const _xsd_spoofed_literals_[3];
    static const value _xsd_spoofed_indexes_[3];
  };

  class category1: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      asn,
      atm,
      e_mail,
      mac,
      ipv4_addr,
      ipv4_net,
      ipv4_net_mask,
      ipv6_addr,
      ipv6_net,
      ipv6_net_mask,
      ext_value
    };

    category1 (value v);

    category1 (const char* v);

    category1 (const ::std::string& v);

    category1 (const ::xml_schema::nmtoken& v);

    category1 (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    category1 (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    category1 (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    category1 (const category1& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual category1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    category1&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_category1_convert ();
    }

    protected:
    value
    _xsd_category1_convert () const;

    public:
    static const char* const _xsd_category1_literals_[11];
    static const value _xsd_category1_indexes_[11];
  };

  class category2: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      client,
      server_internal,
      server_public,
      www,
      mail,
      messaging,
      streaming,
      voice,
      file,
      ftp,
      p2p,
      name,
      directory,
      credential,
      print,
      application,
      database,
      infra,
      log,
      ext_value
    };

    category2 (value v);

    category2 (const char* v);

    category2 (const ::std::string& v);

    category2 (const ::xml_schema::nmtoken& v);

    category2 (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    category2 (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    category2 (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    category2 (const category2& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual category2*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    category2&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_category2_convert ();
    }

    protected:
    value
    _xsd_category2_convert () const;

    public:
    static const char* const _xsd_category2_literals_[20];
    static const value _xsd_category2_indexes_[20];
  };

  class type2: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      byte,
      packet,
      flow,
      session,
      event,
      alert,
      message,
      host,
      site,
      organization,
      ext_value
    };

    type2 (value v);

    type2 (const char* v);

    type2 (const ::std::string& v);

    type2 (const ::xml_schema::nmtoken& v);

    type2 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type2 (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type2 (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type2 (const type2& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual type2*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    type2&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_type2_convert ();
    }

    protected:
    value
    _xsd_type2_convert () const;

    public:
    static const char* const _xsd_type2_literals_[11];
    static const value _xsd_type2_indexes_[11];
  };

  class type3: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      regex,
      binary,
      xpath,
      ext_value
    };

    type3 (value v);

    type3 (const char* v);

    type3 (const ::std::string& v);

    type3 (const ::xml_schema::nmtoken& v);

    type3 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type3 (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type3 (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    type3 (const type3& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual type3*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    type3&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_type3_convert ();
    }

    protected:
    value
    _xsd_type3_convert () const;

    public:
    static const char* const _xsd_type3_literals_[4];
    static const value _xsd_type3_indexes_[4];
  };

  class offsetunit: public ::xml_schema::nmtoken
  {
    public:
    enum value
    {
      line,
      byte,
      ext_value
    };

    offsetunit (value v);

    offsetunit (const char* v);

    offsetunit (const ::std::string& v);

    offsetunit (const ::xml_schema::nmtoken& v);

    offsetunit (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    offsetunit (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    offsetunit (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    offsetunit (const offsetunit& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual offsetunit*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    offsetunit&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_offsetunit_convert ();
    }

    protected:
    value
    _xsd_offsetunit_convert () const;

    public:
    static const char* const _xsd_offsetunit_literals_[3];
    static const value _xsd_offsetunit_indexes_[3];
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace iodef_1_0
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::IODEF_Document >
  IODEF_Document_ (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::IODEF_Document >
  IODEF_Document_ (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::IODEF_Document >
  IODEF_Document_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::IODEF_Document >
  IODEF_Document_ (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::IODEF_Document >
  IODEF_Document_ (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::IODEF_Document >
  IODEF_Document_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::IODEF_Document >
  IODEF_Document_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::IODEF_Document >
  IODEF_Document_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::IODEF_Document >
  IODEF_Document_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::IODEF_Document >
  IODEF_Document_ (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::IODEF_Document >
  IODEF_Document_ (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::IODEF_Document >
  IODEF_Document_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::IODEF_Document >
  IODEF_Document_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::IODEF_Document >
  IODEF_Document_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::Incident >
  Incident_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Incident >
  Incident_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Incident >
  Incident_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::Incident >
  Incident_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Incident >
  Incident_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Incident >
  Incident_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Incident >
  Incident_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Incident >
  Incident_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Incident >
  Incident_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::Incident >
  Incident_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Incident >
  Incident_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Incident >
  Incident_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::Incident >
  Incident_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Incident >
  Incident_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::IncidentIDType >
  IncidentID (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::IncidentIDType >
  IncidentID (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::IncidentIDType >
  IncidentID (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::IncidentIDType >
  IncidentID (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::IncidentIDType >
  IncidentID (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::IncidentIDType >
  IncidentID (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::IncidentIDType >
  IncidentID (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::IncidentIDType >
  IncidentID (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::IncidentIDType >
  IncidentID (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::IncidentIDType >
  IncidentID (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::IncidentIDType >
  IncidentID (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::IncidentIDType >
  IncidentID (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::IncidentIDType >
  IncidentID (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::IncidentIDType >
  IncidentID (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::AlternativeID >
  AlternativeID_ (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::AlternativeID >
  AlternativeID_ (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::AlternativeID >
  AlternativeID_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::AlternativeID >
  AlternativeID_ (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::AlternativeID >
  AlternativeID_ (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::AlternativeID >
  AlternativeID_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::AlternativeID >
  AlternativeID_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::AlternativeID >
  AlternativeID_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::AlternativeID >
  AlternativeID_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::AlternativeID >
  AlternativeID_ (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::AlternativeID >
  AlternativeID_ (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::AlternativeID >
  AlternativeID_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::AlternativeID >
  AlternativeID_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::AlternativeID >
  AlternativeID_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::RelatedActivity >
  RelatedActivity_ (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RelatedActivity >
  RelatedActivity_ (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RelatedActivity >
  RelatedActivity_ (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::RelatedActivity >
  RelatedActivity_ (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RelatedActivity >
  RelatedActivity_ (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RelatedActivity >
  RelatedActivity_ (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RelatedActivity >
  RelatedActivity_ (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RelatedActivity >
  RelatedActivity_ (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RelatedActivity >
  RelatedActivity_ (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::RelatedActivity >
  RelatedActivity_ (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RelatedActivity >
  RelatedActivity_ (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RelatedActivity >
  RelatedActivity_ (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::RelatedActivity >
  RelatedActivity_ (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RelatedActivity >
  RelatedActivity_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  AdditionalData (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  AdditionalData (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  AdditionalData (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  AdditionalData (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  AdditionalData (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  AdditionalData (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  AdditionalData (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  AdditionalData (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  AdditionalData (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  AdditionalData (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  AdditionalData (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  AdditionalData (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  AdditionalData (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  AdditionalData (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::Contact >
  Contact_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Contact >
  Contact_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Contact >
  Contact_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::Contact >
  Contact_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Contact >
  Contact_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Contact >
  Contact_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Contact >
  Contact_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Contact >
  Contact_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Contact >
  Contact_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::Contact >
  Contact_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Contact >
  Contact_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Contact >
  Contact_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::Contact >
  Contact_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Contact >
  Contact_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  ContactName (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  ContactName (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  ContactName (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  ContactName (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  ContactName (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  ContactName (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  ContactName (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  ContactName (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  ContactName (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  ContactName (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  ContactName (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  ContactName (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  ContactName (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  ContactName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::RegistryHandle >
  RegistryHandle_ (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RegistryHandle >
  RegistryHandle_ (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RegistryHandle >
  RegistryHandle_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::RegistryHandle >
  RegistryHandle_ (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RegistryHandle >
  RegistryHandle_ (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RegistryHandle >
  RegistryHandle_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RegistryHandle >
  RegistryHandle_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RegistryHandle >
  RegistryHandle_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RegistryHandle >
  RegistryHandle_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::RegistryHandle >
  RegistryHandle_ (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RegistryHandle >
  RegistryHandle_ (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RegistryHandle >
  RegistryHandle_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::RegistryHandle >
  RegistryHandle_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RegistryHandle >
  RegistryHandle_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::PostalAddress >
  PostalAddress_ (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::PostalAddress >
  PostalAddress_ (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::PostalAddress >
  PostalAddress_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::PostalAddress >
  PostalAddress_ (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::PostalAddress >
  PostalAddress_ (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::PostalAddress >
  PostalAddress_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::PostalAddress >
  PostalAddress_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::PostalAddress >
  PostalAddress_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::PostalAddress >
  PostalAddress_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::PostalAddress >
  PostalAddress_ (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::PostalAddress >
  PostalAddress_ (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::PostalAddress >
  PostalAddress_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::PostalAddress >
  PostalAddress_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::PostalAddress >
  PostalAddress_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Email (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Email (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Email (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Email (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Email (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Email (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Email (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Email (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Email (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Email (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Email (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Email (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Email (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Email (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Telephone (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Telephone (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Telephone (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Telephone (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Telephone (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Telephone (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Telephone (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Telephone (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Telephone (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Telephone (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Telephone (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Telephone (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Telephone (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Telephone (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Fax (const ::std::string& uri,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Fax (const ::std::string& uri,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Fax (const ::std::string& uri,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Fax (::std::istream& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Fax (::std::istream& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Fax (::std::istream& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Fax (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Fax (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Fax (::std::istream& is,
       const ::std::string& id,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Fax (::xercesc::InputSource& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Fax (::xercesc::InputSource& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Fax (::xercesc::InputSource& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Fax (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ContactMeansType >
  Fax (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DateTime (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  ReportTime (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  DetectTime (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  StartTime (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::date_time >
  EndTime (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::TimezoneType >
  Timezone (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::TimezoneType >
  Timezone (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::TimezoneType >
  Timezone (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::TimezoneType >
  Timezone (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::TimezoneType >
  Timezone (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::TimezoneType >
  Timezone (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::TimezoneType >
  Timezone (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::TimezoneType >
  Timezone (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::TimezoneType >
  Timezone (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::TimezoneType >
  Timezone (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::TimezoneType >
  Timezone (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::TimezoneType >
  Timezone (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::TimezoneType >
  Timezone (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::TimezoneType >
  Timezone (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::History >
  History_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::History >
  History_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::History >
  History_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::History >
  History_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::History >
  History_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::History >
  History_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::History >
  History_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::History >
  History_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::History >
  History_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::History >
  History_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::History >
  History_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::History >
  History_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::History >
  History_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::History >
  History_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::HistoryItem >
  HistoryItem_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::HistoryItem >
  HistoryItem_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::HistoryItem >
  HistoryItem_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::HistoryItem >
  HistoryItem_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::HistoryItem >
  HistoryItem_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::HistoryItem >
  HistoryItem_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::HistoryItem >
  HistoryItem_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::HistoryItem >
  HistoryItem_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::HistoryItem >
  HistoryItem_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::HistoryItem >
  HistoryItem_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::HistoryItem >
  HistoryItem_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::HistoryItem >
  HistoryItem_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::HistoryItem >
  HistoryItem_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::HistoryItem >
  HistoryItem_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::Expectation >
  Expectation_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Expectation >
  Expectation_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Expectation >
  Expectation_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::Expectation >
  Expectation_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Expectation >
  Expectation_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Expectation >
  Expectation_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Expectation >
  Expectation_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Expectation >
  Expectation_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Expectation >
  Expectation_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::Expectation >
  Expectation_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Expectation >
  Expectation_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Expectation >
  Expectation_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::Expectation >
  Expectation_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Expectation >
  Expectation_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::Method >
  Method_ (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Method >
  Method_ (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Method >
  Method_ (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::Method >
  Method_ (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Method >
  Method_ (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Method >
  Method_ (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Method >
  Method_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Method >
  Method_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Method >
  Method_ (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::Method >
  Method_ (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Method >
  Method_ (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Method >
  Method_ (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::Method >
  Method_ (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Method >
  Method_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::Reference >
  Reference_ (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Reference >
  Reference_ (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Reference >
  Reference_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::Reference >
  Reference_ (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Reference >
  Reference_ (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Reference >
  Reference_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Reference >
  Reference_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Reference >
  Reference_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Reference >
  Reference_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::Reference >
  Reference_ (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Reference >
  Reference_ (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Reference >
  Reference_ (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::Reference >
  Reference_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Reference >
  Reference_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::Assessment >
  Assessment_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Assessment >
  Assessment_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Assessment >
  Assessment_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::Assessment >
  Assessment_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Assessment >
  Assessment_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Assessment >
  Assessment_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Assessment >
  Assessment_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Assessment >
  Assessment_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Assessment >
  Assessment_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::Assessment >
  Assessment_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Assessment >
  Assessment_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Assessment >
  Assessment_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::Assessment >
  Assessment_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Assessment >
  Assessment_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::Impact >
  Impact_ (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Impact >
  Impact_ (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Impact >
  Impact_ (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::Impact >
  Impact_ (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Impact >
  Impact_ (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Impact >
  Impact_ (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Impact >
  Impact_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Impact >
  Impact_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Impact >
  Impact_ (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::Impact >
  Impact_ (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Impact >
  Impact_ (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Impact >
  Impact_ (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::Impact >
  Impact_ (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Impact >
  Impact_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::TimeImpact >
  TimeImpact_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::TimeImpact >
  TimeImpact_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::TimeImpact >
  TimeImpact_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::TimeImpact >
  TimeImpact_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::TimeImpact >
  TimeImpact_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::TimeImpact >
  TimeImpact_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::TimeImpact >
  TimeImpact_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::TimeImpact >
  TimeImpact_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::TimeImpact >
  TimeImpact_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::TimeImpact >
  TimeImpact_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::TimeImpact >
  TimeImpact_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::TimeImpact >
  TimeImpact_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::TimeImpact >
  TimeImpact_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::TimeImpact >
  TimeImpact_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::MonetaryImpact >
  MonetaryImpact_ (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MonetaryImpact >
  MonetaryImpact_ (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MonetaryImpact >
  MonetaryImpact_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::MonetaryImpact >
  MonetaryImpact_ (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MonetaryImpact >
  MonetaryImpact_ (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MonetaryImpact >
  MonetaryImpact_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MonetaryImpact >
  MonetaryImpact_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MonetaryImpact >
  MonetaryImpact_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MonetaryImpact >
  MonetaryImpact_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::MonetaryImpact >
  MonetaryImpact_ (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MonetaryImpact >
  MonetaryImpact_ (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MonetaryImpact >
  MonetaryImpact_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::MonetaryImpact >
  MonetaryImpact_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MonetaryImpact >
  MonetaryImpact_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::Confidence >
  Confidence_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Confidence >
  Confidence_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Confidence >
  Confidence_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::Confidence >
  Confidence_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Confidence >
  Confidence_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Confidence >
  Confidence_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Confidence >
  Confidence_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Confidence >
  Confidence_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Confidence >
  Confidence_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::Confidence >
  Confidence_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Confidence >
  Confidence_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Confidence >
  Confidence_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::Confidence >
  Confidence_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Confidence >
  Confidence_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::EventData >
  EventData_ (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::EventData >
  EventData_ (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::EventData >
  EventData_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::EventData >
  EventData_ (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::EventData >
  EventData_ (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::EventData >
  EventData_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::EventData >
  EventData_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::EventData >
  EventData_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::EventData >
  EventData_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::EventData >
  EventData_ (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::EventData >
  EventData_ (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::EventData >
  EventData_ (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::EventData >
  EventData_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::EventData >
  EventData_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::Flow >
  Flow_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Flow >
  Flow_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Flow >
  Flow_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::Flow >
  Flow_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Flow >
  Flow_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Flow >
  Flow_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Flow >
  Flow_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Flow >
  Flow_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Flow >
  Flow_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::Flow >
  Flow_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Flow >
  Flow_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Flow >
  Flow_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::Flow >
  Flow_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Flow >
  Flow_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::System >
  System_ (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::System >
  System_ (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::System >
  System_ (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::System >
  System_ (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::System >
  System_ (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::System >
  System_ (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::System >
  System_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::System >
  System_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::System >
  System_ (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::System >
  System_ (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::System >
  System_ (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::System >
  System_ (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::System >
  System_ (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::System >
  System_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::Node >
  Node_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Node >
  Node_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Node >
  Node_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::Node >
  Node_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Node >
  Node_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Node >
  Node_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Node >
  Node_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Node >
  Node_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Node >
  Node_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::Node >
  Node_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Node >
  Node_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Node >
  Node_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::Node >
  Node_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Node >
  Node_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::Address >
  Address_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Address >
  Address_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Address >
  Address_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::Address >
  Address_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Address >
  Address_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Address >
  Address_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Address >
  Address_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Address >
  Address_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Address >
  Address_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::Address >
  Address_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Address >
  Address_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Address >
  Address_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::Address >
  Address_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Address >
  Address_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Location (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Location (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Location (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Location (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Location (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Location (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Location (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Location (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Location (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Location (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Location (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Location (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Location (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Location (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::NodeRole >
  NodeRole_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::NodeRole >
  NodeRole_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::NodeRole >
  NodeRole_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::NodeRole >
  NodeRole_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::NodeRole >
  NodeRole_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::NodeRole >
  NodeRole_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::NodeRole >
  NodeRole_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::NodeRole >
  NodeRole_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::NodeRole >
  NodeRole_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::NodeRole >
  NodeRole_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::NodeRole >
  NodeRole_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::NodeRole >
  NodeRole_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::NodeRole >
  NodeRole_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::NodeRole >
  NodeRole_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::Service >
  Service_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Service >
  Service_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Service >
  Service_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::Service >
  Service_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Service >
  Service_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Service >
  Service_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Service >
  Service_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Service >
  Service_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Service >
  Service_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::Service >
  Service_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Service >
  Service_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Service >
  Service_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::Service >
  Service_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Service >
  Service_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::Counter >
  Counter_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Counter >
  Counter_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Counter >
  Counter_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::Counter >
  Counter_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Counter >
  Counter_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Counter >
  Counter_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Counter >
  Counter_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Counter >
  Counter_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Counter >
  Counter_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::Counter >
  Counter_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Counter >
  Counter_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Counter >
  Counter_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::Counter >
  Counter_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Counter >
  Counter_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::Record >
  Record_ (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Record >
  Record_ (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Record >
  Record_ (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::Record >
  Record_ (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Record >
  Record_ (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Record >
  Record_ (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Record >
  Record_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Record >
  Record_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Record >
  Record_ (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::Record >
  Record_ (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Record >
  Record_ (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Record >
  Record_ (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::Record >
  Record_ (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::Record >
  Record_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::RecordData >
  RecordData_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RecordData >
  RecordData_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RecordData >
  RecordData_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::RecordData >
  RecordData_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RecordData >
  RecordData_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RecordData >
  RecordData_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RecordData >
  RecordData_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RecordData >
  RecordData_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RecordData >
  RecordData_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::RecordData >
  RecordData_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RecordData >
  RecordData_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RecordData >
  RecordData_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::RecordData >
  RecordData_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RecordData >
  RecordData_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::RecordPattern >
  RecordPattern_ (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RecordPattern >
  RecordPattern_ (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RecordPattern >
  RecordPattern_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::RecordPattern >
  RecordPattern_ (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RecordPattern >
  RecordPattern_ (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RecordPattern >
  RecordPattern_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RecordPattern >
  RecordPattern_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RecordPattern >
  RecordPattern_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RecordPattern >
  RecordPattern_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::RecordPattern >
  RecordPattern_ (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RecordPattern >
  RecordPattern_ (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RecordPattern >
  RecordPattern_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::RecordPattern >
  RecordPattern_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::RecordPattern >
  RecordPattern_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  RecordItem (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  RecordItem (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  RecordItem (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  RecordItem (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  RecordItem (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  RecordItem (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  RecordItem (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  RecordItem (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  RecordItem (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  RecordItem (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  RecordItem (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  RecordItem (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  RecordItem (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::ExtensionType >
  RecordItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  Application (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  Application (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  Application (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  Application (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  Application (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  Application (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  Application (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  Application (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  Application (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  Application (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  Application (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  Application (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  Application (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  Application (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  OperatingSystem (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  OperatingSystem (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  OperatingSystem (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  OperatingSystem (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  OperatingSystem (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  OperatingSystem (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  OperatingSystem (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  OperatingSystem (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  OperatingSystem (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  OperatingSystem (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  OperatingSystem (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  OperatingSystem (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  OperatingSystem (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::SoftwareType >
  OperatingSystem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Description (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Description (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Description (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Description (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Description (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Description (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Description (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Description (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Description (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Description (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Description (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Description (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Description (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::iodef_1_0::MLStringType >
  Description (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  URL (const ::std::string& uri,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URL (const ::std::string& uri,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URL (const ::std::string& uri,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  URL (::std::istream& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URL (::std::istream& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URL (::std::istream& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URL (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URL (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URL (::std::istream& is,
       const ::std::string& id,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  URL (::xercesc::InputSource& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URL (::xercesc::InputSource& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URL (::xercesc::InputSource& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  URL (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URL (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___XSD_IODEF_01_HXX
